<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leee&#39;s World</title>
  
  <subtitle>Talk is Cheap. Show me the code.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="WangHngLeee.github.io/"/>
  <updated>2020-03-07T05:52:04.738Z</updated>
  <id>WangHngLeee.github.io/</id>
  
  <author>
    <name>HongLeee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Review Problems List 📌</title>
    <link href="WangHngLeee.github.io/9999/12/31/problemslist/"/>
    <id>WangHngLeee.github.io/9999/12/31/problemslist/</id>
    <published>9999-12-31T16:13:23.000Z</published>
    <updated>2020-03-07T05:52:04.738Z</updated>
    
    <content type="html"><![CDATA[<br><font size="3"> 记录Problems list的完成情况 每日更新。<br><a href="https://docs.google.com/spreadsheets/d/1SwcfcnOXL_7lbdqZm8dia_WU20aQ-ZTjGf4G0oJ6qpA/edit#gid=972946549" target="_blank" rel="noopener"><font size="4">🔗 Problems List  Link </font></a><br>Github Leetcode Summary 同步更新。<br><a href="https://github.com/WangHngLeee/LeetcodeSummary" target="_blank" rel="noopener"><font size="4">🔗 Github Summary Link </font></a><br>2020/03/02 —— 500题成就达成 💪</font><br><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;
&lt;font size=&quot;3&quot;&gt; 记录Problems list的完成情况 每日更新。&lt;br&gt;
&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1SwcfcnOXL_7lbdqZm8dia_WU20aQ-ZTjGf4G0oJ
      
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Problems List" scheme="WangHngLeee.github.io/tags/Problems-List/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 95 / Array(1) 💪</title>
    <link href="WangHngLeee.github.io/2020/06/03/array01/"/>
    <id>WangHngLeee.github.io/2020/06/03/array01/</id>
    <published>2020-06-03T17:53:35.000Z</published>
    <updated>2020-06-06T01:35:14.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-42-Trapping-Rain-Water-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">42. Trapping Rain Water</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/trapping-rain-water/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.<br><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(height == <span class="keyword">null</span> || height.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftmost = Integer.MIN_VALUE; <span class="comment">//corner case</span></span><br><span class="line">        <span class="keyword">int</span> rightmost = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = height.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> area = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            leftmost = Math.max(leftmost,height[left]);</span><br><span class="line">            rightmost = Math.max(rightmost,height[right]);</span><br><span class="line">            <span class="keyword">if</span>(leftmost &lt; rightmost)&#123;</span><br><span class="line">                area+=leftmost-height[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                area+=rightmost-height[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> area;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The main idea is first we find the leftmost and rightmost height. If leftmost is bigger, then we caculate from right side( shortest one decide the max water we can store). Otherwise we caculate from left side. After that, we move left or right to the middle center by 1.</p><a id="more"></a><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-238-Product-of-Array-Except-Self-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">238. Product of Array Except Self</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/product-of-array-except-self/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples-v2">Examples</h3><p>Given an array nums of n integers where n &gt; 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input:  [1,2,3,4]</span><br><span class="line">Output: [24,12,8,6]</span><br><span class="line">Constraint: It&apos;s guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)<span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                left = left * nums[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            res[i] = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = nums.length-<span class="number">1</span>; j&gt;=<span class="number">0</span> ;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">                right = right * nums[j+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            res[j] = res[j] * right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First from left to get the left multiply num, then from right to left to get the final result.</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-152-Maximum-Product-Subarray-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">152. Maximum Product Subarray</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/maximum-product-subarray/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples-v3">Examples</h3><p>Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [2,3,-2,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [2,3] has the largest product 6.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: [-2,0,-1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The result cannot be 2, because [-2,-1] is not a subarray.</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;nums.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = nums[i];</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; max)max = sum;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j&lt;nums.length ;j++)&#123;</span><br><span class="line">                sum = sum * nums[j];</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; max)max = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Simple two side for loops solution.</p><hr><h2 id="table-tr-td-bgcolor-28B463-font-color-white-121-Best-Time-to-Buy-and-Sell-Stock-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">121. Best Time to Buy and Sell Stock</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples-v4">Examples</h3><p>Say you have an array for which the ith element is the price of a given stock on day i.</p><p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p><p>Note that you cannot sell a stock before you buy one.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</span><br><span class="line">             Not 7-1 = 6, as selling price needs to be larger than buying price.</span><br></pre></td></tr></table></figure><h3 id="Soluiton">Soluiton</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; prices.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i] &gt; min)&#123;</span><br><span class="line">                max = Math.max(prices[i]-min,max);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                min = prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set first day’s value to be min which is like the price to buy in. Max is the value that to sell.</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-56-Merge-Intervals-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">56. Merge Intervals</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/merge-intervals/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples-v5">Examples</h3><p>Given a collection of intervals, merge all overlapping intervals.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">Output: [[1,6],[8,10],[15,18]]</span><br><span class="line">Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: [[1,4],[4,5]]</span><br><span class="line">Output: [[1,5]]</span><br><span class="line">Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span><br></pre></td></tr></table></figure><h3 id="Solution-v4">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals)&#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(intervals == <span class="keyword">null</span> || intervals.length == <span class="number">0</span> )<span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][]);</span><br><span class="line">        Arrays.sort(intervals,(a,b)-&gt;a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> start = intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> end = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] item : intervals)&#123;</span><br><span class="line">            <span class="keyword">if</span>(end &gt;= item[<span class="number">0</span>])&#123; <span class="comment">// [0,4][1,3]</span></span><br><span class="line">                end = Math.max(end,item[<span class="number">1</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;start,end&#125;);</span><br><span class="line">                start = item[<span class="number">0</span>];</span><br><span class="line">                end = item[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;start,end&#125;);</span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Classic merge intervals questions. Using start and end to decide whether merge a new interval or add current interval into answer.</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-560-Subarray-Sum-Equals-K-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">560. Subarray Sum Equals K</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples-v6">Examples</h3><p>Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input:nums = [1,1,1], k = 2</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><h3 id="Solution-v5">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subarraySum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            sum = sum + num;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(sum - k))&#123;</span><br><span class="line">                count+=map.get(sum-k);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(sum,map.getOrDefault(sum,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using presum to precaculate the sum with different length of nums in array.</p><p>Eg:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array : 1 1 1 1 1</span><br><span class="line">       0:1</span><br><span class="line">       1:1</span><br><span class="line"> map -&gt;2:1</span><br><span class="line">       3:1</span><br><span class="line">       4:1</span><br><span class="line">       5:1</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-42-Trapping-Rain-Water-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;42. Trapping Rain Water&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/trapping-rain-water/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.&lt;br&gt;
&lt;img src=&quot;https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [0,1,0,2,1,0,1,3,2,1,2,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;trap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] height)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(height == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || height.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; leftmost = Integer.MIN_VALUE; &lt;span class=&quot;comment&quot;&gt;//corner case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rightmost = Integer.MIN_VALUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right = height.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; area = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(left &amp;lt; right)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            leftmost = Math.max(leftmost,height[left]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rightmost = Math.max(rightmost,height[right]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(leftmost &amp;lt; rightmost)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                area+=leftmost-height[left];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                left++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                area+=rightmost-height[right];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                right--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; area;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The main idea is first we find the leftmost and rightmost height. If leftmost is bigger, then we caculate from right side( shortest one decide the max water we can store). Otherwise we caculate from left side. After that, we move left or right to the middle center by 1.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 94 / String(2) ðŸ’ª</title>
    <link href="WangHngLeee.github.io/2020/06/02/string02/"/>
    <id>WangHngLeee.github.io/2020/06/02/string02/</id>
    <published>2020-06-02T17:53:35.000Z</published>
    <updated>2020-06-06T01:33:53.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-609-Find-Duplicate-File-in-System-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">609. Find Duplicate File in System</font> </td></tr></table></h2><p><a href="https://leetcode.com/problems/find-duplicate-file-in-system/" target="_blank" rel="noopener"><font size="4">ðŸ”— Question Link </font></a></p><p>Given a list of directory info including directory path, and all the files with contents in this directory, you need to find out all the groups of duplicate files in the file system in terms of their paths.</p><h3 id="Example">Example</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[&quot;root/a 1.txt(abcd) 2.txt(efgh)&quot;, &quot;root/c 3.txt(abcd)&quot;, &quot;root/c/d 4.txt(efgh)&quot;, &quot;root 4.txt(efgh)&quot;]</span><br><span class="line">Output:</span><br><span class="line">[[&quot;root/a/2.txt&quot;,&quot;root/c/d/4.txt&quot;,&quot;root/4.txt&quot;],[&quot;root/a/1.txt&quot;,&quot;root/c/3.txt&quot;]]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; findDuplicate(String[] paths) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Map&lt;String,Set&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String str : paths)&#123;</span><br><span class="line">            String[] strs = str.split(<span class="string">"\\s++"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ;i&lt;strs.length ;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> idx = strs[i].indexOf(<span class="string">'('</span>);</span><br><span class="line">                String msg = strs[i].substring(idx);</span><br><span class="line">                String totalName = strs[<span class="number">0</span>] + <span class="string">"/"</span> + strs[i].substring(<span class="number">0</span>,idx);</span><br><span class="line">                Set&lt;String&gt; names = map.getOrDefault(msg,<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">                names.add(totalName);</span><br><span class="line">                map.put(msg,names);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String key : map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(key).size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(map.get(key)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(n) S:O(n)</p><p>First we split the string with &quot; &quot; to seprate the string with two parts : paths + file.<br>Then we go to the file part, and find the message in it using “(”, we split the file with two part: file name + file message.<br>Using map and set to store the file like &quot; message -&gt; Set <paths of file> &quot;. Then we add the path in the set to final res list.</paths></p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-767-Reorganize-String-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">767. Reorganize String</font> </td></tr></table></h2><p><a href="https://leetcode.com/problems/reorganize-string/" target="_blank" rel="noopener"><font size="4">ðŸ”— Question Link </font></a></p><p>Given a string S, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.</p><p>If possible, output any possible result.  If not possible, return the empty string.</p><h3 id="Example-v2">Example</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: S = &quot;aab&quot;</span><br><span class="line">Output: &quot;aba&quot;</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: S = &quot;aaab&quot;</span><br><span class="line">Output: &quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reorganizeString</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; S.length() ;i++)&#123;</span><br><span class="line">            arr[S.charAt(i)-<span class="string">'a'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>, letter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&gt;max)&#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">                letter = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max &gt; (S.length() + <span class="number">1</span>)/<span class="number">2</span>)<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">char</span>[] res = <span class="keyword">new</span> <span class="keyword">char</span>[S.length()];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(arr[letter] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            res[index] = (<span class="keyword">char</span>)(letter +<span class="string">'a'</span>);</span><br><span class="line">            index+=<span class="number">2</span>;</span><br><span class="line">            arr[letter]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;arr.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(arr[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(index &gt;= S.length())&#123;</span><br><span class="line">                    index = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                res[index] = (<span class="keyword">char</span>)(i + <span class="string">'a'</span>);</span><br><span class="line">                index+=<span class="number">2</span>;</span><br><span class="line">                arr[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(n) S:O(1)</p><p>Easy thoughts: We first find the char with max currency and put it on the even positin first like 0,2,4,6… Then we keep to put all other chars in the remained position.</p><p>If we get the end of the size of string, we turn back to the position of 1 and keep put char in it.<br>It easy to understand with the following explain.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a _ a _ a _ _ _ _ // fill in &quot;a&quot; at position 0, 2, 4</span><br><span class="line">a b a _ a _ b _ b // fill in &quot;b&quot; at position 6, 8, 1</span><br><span class="line">a b a c a _ b _ b // fill in &quot;c&quot; at position 3</span><br><span class="line">a b a c a d b d b // fill in &quot;d&quot; at position 5, 7</span><br></pre></td></tr></table></figure><hr><h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-32-Longest-Valid-Parentheses-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">32. Longest Valid Parentheses</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/longest-valid-parentheses/" target="_blank" rel="noopener"><font size="4">ðŸ”— Question Link </font></a></p><p>Given a string containing just the characters ‘(’ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.</p><h3 id="Example-v3">Example</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;(()&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The longest valid parentheses substring is &quot;()&quot;</span><br><span class="line"></span><br><span class="line">Input: &quot;)()())&quot;</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest valid parentheses substring is &quot;()()&quot;</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">int</span> open = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;len ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">'('</span>)open++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(open &gt;<span class="number">0</span> &amp;&amp; s.charAt(i)==<span class="string">')'</span>)&#123;</span><br><span class="line">                dp[i] = dp[i-<span class="number">1</span>]+<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(i-dp[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i]+=dp[i-dp[i]];</span><br><span class="line">                &#125;</span><br><span class="line">                open--;</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(dp[i],max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DP problem. When we meet ‘)’ and open &gt;0 then we start dp operation.</p><p>Tricky point is the line in the bellow:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(i-dp[i] &gt; 0)&#123;</span><br><span class="line">    dp[i]+=dp[i-dp[i]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We are looking for the longest continuous parentheses, so we have to check the dp value before the current valid length.</p><p>For example:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">()()() // case 1</span><br><span class="line">((())) // case 2</span><br></pre></td></tr></table></figure><p>In case 1, only we meet ) then we can make current dp to 2, but after that we will back to the value of 0. So we have to check whether there is valid length before the current length.</p><p>In case 2 it is normal way what we think in the first time.</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-43-Multiply-Strings-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">43. Multiply Strings</font> </td></tr></table></h2><p><a href="https://leetcode.com/problems/multiply-strings/" target="_blank" rel="noopener"><font size="4">ðŸ”— Question Link </font></a></p><p>Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.</p><h3 id="Example-v4">Example</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: num1 = &quot;2&quot;, num2 = &quot;3&quot;</span><br><span class="line">Output: &quot;6&quot;</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: num1 = &quot;123&quot;, num2 = &quot;456&quot;</span><br><span class="line">Output: &quot;56088&quot;</span><br></pre></td></tr></table></figure><h3 id="Solution-v4">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">multiply</span><span class="params">(String num1, String num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = num1.length();</span><br><span class="line">        <span class="keyword">int</span> n = num2.length();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[m+n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = n-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">int</span> mul = (num1.charAt(i)-<span class="string">'0'</span>) * (num2.charAt(j)-<span class="string">'0'</span>);</span><br><span class="line">                <span class="keyword">int</span> pos1 = i+j,pos2 = i+j+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> sum = arr[pos2] + mul;</span><br><span class="line">                arr[pos1] += sum / <span class="number">10</span>;</span><br><span class="line">                arr[pos2] = sum % <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!(sb.length() == <span class="number">0</span> &amp;&amp; num == <span class="number">0</span>))&#123;</span><br><span class="line">                sb.append(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.length() == <span class="number">0</span> ? <span class="string">"0"</span> : sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(n^2) S:O(1)</p><p>We simulate the multiply process. Using pos1 and pos2 to store the carry.<br>For example:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1 2 5</span><br><span class="line">    * 3 2</span><br><span class="line">    ------</span><br><span class="line">      1 0 ( 5*2 ) step 1</span><br><span class="line">    0 4   ( 2*2 ) step 2</span><br><span class="line">  0 2     ( 1*2 ) .... 3</span><br><span class="line">    1 5   ( 3*5 ) .... 4</span><br><span class="line">  0 6   ...</span><br><span class="line">0 3   ...</span><br><span class="line">--------------</span><br><span class="line">  4 0 0 0</span><br></pre></td></tr></table></figure><p>Like above, cause every time we caculate the two number to get mul, then we have to use the last time’s pos1 value, which is the same as current pos2’s vlaue. Then after caculate that we add them together to get the final value string.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-609-Find-Duplicate-File-in-System-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;609. Find Duplicate File in System&lt;/font&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/find-duplicate-file-in-system/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;ðŸ”— Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given a list of directory info including directory path, and all the files with contents in this directory, you need to find out all the groups of duplicate files in the file system in terms of their paths.&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;root/a 1.txt(abcd) 2.txt(efgh)&amp;quot;, &amp;quot;root/c 3.txt(abcd)&amp;quot;, &amp;quot;root/c/d 4.txt(efgh)&amp;quot;, &amp;quot;root 4.txt(efgh)&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&amp;quot;root/a/2.txt&amp;quot;,&amp;quot;root/c/d/4.txt&amp;quot;,&amp;quot;root/4.txt&amp;quot;],[&amp;quot;root/a/1.txt&amp;quot;,&amp;quot;root/c/3.txt&amp;quot;]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="String" scheme="WangHngLeee.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>New App Deployed 🎉</title>
    <link href="WangHngLeee.github.io/2020/05/31/app1/"/>
    <id>WangHngLeee.github.io/2020/05/31/app1/</id>
    <published>2020-05-31T16:13:54.000Z</published>
    <updated>2020-05-31T19:58:21.302Z</updated>
    
    <content type="html"><![CDATA[<h1>Covid-19 Tracker App now available online ! 💊</h1><p><a href="https://leeemask.com/covid-track/" target="_blank" rel="noopener"><font size="4"> 🔗 COVID-19 tracker </font></a></p><p>Brief content of the application.</p><img src="https://s1.ax1x.com/2020/06/01/t3OiWj.md.png"><p>Skill included:</p><ul><li>React, JavaScript, Chart.js, axios, MongoDB, ElementUI…</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Covid-19 Tracker App now available online ! 💊&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://leeemask.com/covid-track/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font 
      
    
    </summary>
    
      <category term="Depolyed Web App" scheme="WangHngLeee.github.io/categories/Depolyed-Web-App/"/>
    
    
      <category term="React" scheme="WangHngLeee.github.io/tags/React/"/>
    
      <category term="Web Application" scheme="WangHngLeee.github.io/tags/Web-Application/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 93 / String(1) 💪</title>
    <link href="WangHngLeee.github.io/2020/05/30/string01/"/>
    <id>WangHngLeee.github.io/2020/05/30/string01/</id>
    <published>2020-05-30T17:53:35.000Z</published>
    <updated>2020-06-02T21:14:03.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-14-Longest-Common-Prefix-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">14. Longest Common Prefix</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><h3 id="Example">Example</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure><hr><a id="more"></a><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strs.length == <span class="number">0</span> || strs == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        String pre = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; strs.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(strs[i].indexOf(pre)!=<span class="number">0</span>)&#123;</span><br><span class="line">                pre = pre.substring(<span class="number">0</span>,pre.length()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T: O(n) S: O(1)</p><p>Using tricky of function of indexOf to get the first positoin of string. We take first string as comparator, then loop all the other strings to check if the first position of comparator in these strings is 0. If not 0, then we shrink the comparator string’s length - 1.</p><hr><h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-10-Regular-Expression-Matching-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">10. Regular Expression Matching</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/regular-expression-matching/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><p>Given an input string (s) and a pattern §, implement regular expression matching with support for ‘.’ and ‘*’.</p><p>‘.’ Matches any single character.<br>‘*’ Matches zero or more of the preceding element.<br>The matching should cover the entire input string (not partial).</p><p>Note:</p><p>s could be empty and contains only lowercase letters a-z.<br>p could be empty and contains only lowercase letters a-z, and characters like . or *.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation: &quot;a&quot; does not match the entire string &quot;aa&quot;.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 2:</span><br><span class="line">Input:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a*&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &apos;*&apos; means zero or more of the preceding element, &apos;a&apos;. Therefore, by repeating &apos;a&apos; once, it becomes &quot;aa&quot;.</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span>[][] state = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>][p.length() + <span class="number">1</span>];</span><br><span class="line">        state[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; state[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">'*'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (state[<span class="number">0</span>][j - <span class="number">1</span>] || (j &gt; <span class="number">1</span> &amp;&amp; state[<span class="number">0</span>][j - <span class="number">2</span>])) &#123;</span><br><span class="line">                    state[<span class="number">0</span>][j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; state.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; state[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == p.charAt(j - <span class="number">1</span>) || p.charAt(j - <span class="number">1</span>) == <span class="string">'.'</span>) &#123;</span><br><span class="line">                    state[i][j] = state[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">if</span> (p.charAt(j - <span class="number">1</span>) == <span class="string">'*'</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) != p.charAt(j - <span class="number">2</span>) &amp;&amp; p.charAt(j - <span class="number">2</span>) != <span class="string">'.'</span>) &#123;</span><br><span class="line">                        state[i][j] = state[i][j - <span class="number">2</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        state[i][j] = state[i - <span class="number">1</span>][j] || state[i][j - <span class="number">1</span>] || state[i][j - <span class="number">2</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> state[s.length()][p.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DP solution.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1, If p.charAt(j) == s.charAt(i) :  dp[i][j] = dp[i-1][j-1];</span><br><span class="line">2, If p.charAt(j) == &apos;.&apos; : dp[i][j] = dp[i-1][j-1];</span><br><span class="line">3, If p.charAt(j) == &apos;*&apos;: </span><br><span class="line">here are two sub conditions:</span><br><span class="line">    1   if p.charAt(j-1) != s.charAt(i) </span><br><span class="line">           dp[i][j] = dp[i][j-2]  //in this case, a* only counts as empty</span><br><span class="line">    2   if p.charAt(i-1) == s.charAt(i) or p.charAt(i-1) == &apos;.&apos;:</span><br><span class="line">           dp[i][j] = dp[i-1][j]    //in this case, a* counts as multiple a </span><br><span class="line">        or dp[i][j] = dp[i][j-1]   // in this case, a* counts as single a</span><br><span class="line">        or dp[i][j] = dp[i][j-2]   // in this case, a* counts as empty</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-14-Longest-Common-Prefix-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;14. Longest Common Prefix&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-common-prefix/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;/p&gt;
&lt;p&gt;If there is no common prefix, return an empty string “”.&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [&amp;quot;flower&amp;quot;,&amp;quot;flow&amp;quot;,&amp;quot;flight&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: &amp;quot;fl&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="String" scheme="WangHngLeee.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 92 💪</title>
    <link href="WangHngLeee.github.io/2020/05/24/code02/"/>
    <id>WangHngLeee.github.io/2020/05/24/code02/</id>
    <published>2020-05-24T22:15:39.000Z</published>
    <updated>2020-05-24T22:26:31.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-130-Surrounded-Regions-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">130. Surrounded Regions</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/surrounded-regions/" target="_blank" rel="noopener"><font size="4">ðŸ”—Question Link </font></a></p><ul><li>BFS Solution :</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(board.length &lt; <span class="number">3</span> || board[<span class="number">0</span>].length &lt; <span class="number">3</span>)<span class="keyword">return</span>;</span><br><span class="line">        Queue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> row = board.length;</span><br><span class="line">        <span class="keyword">int</span> col = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;row;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j&lt;col;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>( (i==<span class="number">0</span> || i==row-<span class="number">1</span> || j==<span class="number">0</span> || j==col-<span class="number">1</span> ) &amp;&amp; board[i][j] == <span class="string">'O'</span>)&#123;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,j&#125;);</span><br><span class="line">                    board[i][j] = <span class="string">'a'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span>[] temp = queue.poll();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>[] dir : dirs)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = temp[<span class="number">0</span>]+dir[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> y = temp[<span class="number">1</span>]+dir[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; row &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; col &amp;&amp; board[x][y] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;x,y&#125;);</span><br><span class="line">                    board[x][y] = <span class="string">'a'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; row ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j&lt;col ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'a'</span>)board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'O'</span>)board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DFS Solution :</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(board.length &lt; <span class="number">3</span> || board[<span class="number">0</span>].length &lt; <span class="number">3</span>)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> row = board.length;</span><br><span class="line">        <span class="keyword">int</span> col = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;row;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j&lt;col;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>( (i==<span class="number">0</span> || i==row-<span class="number">1</span> || j==<span class="number">0</span> || j==col-<span class="number">1</span> ) &amp;&amp; board[i][j] == <span class="string">'O'</span>)&#123;</span><br><span class="line">                    helper(i,j,board);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; row ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j&lt;col ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'a'</span>)board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'O'</span>)board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">char</span>[][]board)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r &gt;= <span class="number">0</span> &amp;&amp; c &gt;= <span class="number">0</span> &amp;&amp; r &lt;= board.length - <span class="number">1</span> &amp;&amp; c &lt;= board[<span class="number">0</span>].length - <span class="number">1</span> &amp;&amp; board[r][c] == <span class="string">'O'</span>)&#123;</span><br><span class="line">            board[r][c] = <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>[] dir : dirs)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = r + dir[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> y = c + dir[<span class="number">1</span>];</span><br><span class="line">                helper(x,y,board);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In both solution, we just first check the boundary of the board and to check the continus Os, and we change every continus O in boundary into ‘a’. After that, we make a loop of the whole board to change ‘a’ into O and all other Os into ‘X’.</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-130-Surrounded-Regions-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;130. Surrounded Regions&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/surrounded-regions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;ðŸ”—Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BFS Solution :&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[][] board)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board.length &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; || board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Queue&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[]&amp;gt; queue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dirs = &amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row = board.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col = board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i&amp;lt;row;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; j&amp;lt;col;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( (i==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || i==row-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || j==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || j==col-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) &amp;amp;&amp;amp; board[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    queue.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[]&amp;#123;i,j&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    board[i][j] = &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!queue.isEmpty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] temp = queue.poll();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] dir : dirs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = temp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]+dir[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y = temp[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+dir[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; x &amp;lt; row &amp;amp;&amp;amp; y &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;lt; col &amp;amp;&amp;amp; board[x][y] == &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    queue.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[]&amp;#123;x,y&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    board[x][y] = &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; row ; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; j&amp;lt;col ; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)board[i][j] = &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;)board[i][j] = &lt;span class=&quot;string&quot;&gt;&#39;X&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;DFS Solution :&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dirs = &amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[][] board)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board.length &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; || board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row = board.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col = board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i&amp;lt;row;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; j&amp;lt;col;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( (i==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || i==row-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || j==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || j==col-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) &amp;amp;&amp;amp; board[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    helper(i,j,board);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; row ; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; j&amp;lt;col ; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)board[i][j] = &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;)board[i][j] = &lt;span class=&quot;string&quot;&gt;&#39;X&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[][]board)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (r &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; c &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; r &amp;lt;= board.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; board[r][c] == &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            board[r][c] = &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] dir : dirs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = r + dir[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y = c + dir[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                helper(x,y,board);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In both solution, we just first check the boundary of the board and to check the continus Os, and we change every continus O in boundary into ‘a’. After that, we make a loop of the whole board to change ‘a’ into O and all other Os into ‘X’.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>React Review 📓</title>
    <link href="WangHngLeee.github.io/2020/05/19/react1/"/>
    <id>WangHngLeee.github.io/2020/05/19/react1/</id>
    <published>2020-05-19T13:58:50.000Z</published>
    <updated>2020-05-19T19:39:10.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-复习">React 复习</h2><h3 id="生命周期">生命周期</h3><p>生命周期就是组件从实例化到渲染再到最终从页面中销毁，整个过程就是生命周期。在生命周期中，有很多可以调用的事件，也称为hook/钩子函数。</p><h3 id="生命周期三个状态">生命周期三个状态</h3><ul><li>Mounting : 将组件插入DOM中</li><li>Updating : 将组件更新到DOM中</li><li>Unmounting : 将组件移出DOM</li></ul><h3 id="钩子函数（方法，事件）">钩子函数（方法，事件）</h3><ul><li><p>componentWillMount(): 组件将要渲染,AJAX,添加动画前的类</p></li><li><p>componentDidMount(): 组件渲染完毕，添加动画</p></li><li><p>componentWillReceiveProps(): 组件将要接受props数据</p></li><li><p>shouldComponentUpdate(): 组件接收到新的props/state时判断是否更新，返回boolean值</p></li><li><p>componentWillUpdate(): 组件将要更新</p></li><li><p>componentDidUpdate(): 组件更新完毕</p></li><li><p>compnentWillUnmount(): 组件将要卸载</p></li></ul><a id="more"></a><p>尝试以下代码输出情况：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complife</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            msg:<span class="string">'test msg'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'构造函数'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillMount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'挂载完毕，准备渲染'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'渲染完毕'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillReceiveProps()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件将要接受props'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    shouldComponentUpdate()&#123;</span><br><span class="line">        <span class="comment">//如果希望更新返回true，不希望则返回false，不更新就是undefined</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.msg == <span class="string">'test msg'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUpdate()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件将要更新'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidUpdate()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件更新完毕'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件卸载'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log（<span class="string">'渲染函数'</span>)</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;hello world&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Complife /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>console结果</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">组件将要渲染</span><br><span class="line">渲染函数</span><br><span class="line">组件渲染完毕</span><br></pre></td></tr></table></figure><p>没有其他event时构造的顺序如上面结果所示。</p><p>但如果有clickevent更新状态时，组件的状态顺序又是怎样的呢？</p><p>其他不变，在render函数中增加一个ondlick事件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">......</span><br><span class="line">    render()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log（<span class="string">'渲染函数'</span>)</span><br><span class="line">            <span class="keyword">return</span>(</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h1&gt;&#123;<span class="keyword">this</span>.state.msg&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;button onClick=&#123;this.changeMsg&#125;&gt;更新&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        changeMsg=()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">            this.setState(&#123;</span></span><br><span class="line"><span class="regexp">                msg:"changing msg"</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp">......</span></span><br></pre></td></tr></table></figure><p>点击更新后此时console将会多出以下内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组件将要更新</span><br><span class="line">渲染函数</span><br><span class="line">组件更新完毕</span><br></pre></td></tr></table></figure><p>在complife之后增加parent class尝试Unmount函数</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            isshow:<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.remove&#125;&gt; remove complif组件 &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;complife /</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    remove=()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">        this.setState(&#123;</span></span><br><span class="line"><span class="regexp">            isshow:false;</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">    &lt;Parent /</span>&gt;,</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>此时点击button后会增加一条console</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组件卸载</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React-复习&quot;&gt;React 复习&lt;/h2&gt;
&lt;h3 id=&quot;生命周期&quot;&gt;生命周期&lt;/h3&gt;
&lt;p&gt;生命周期就是组件从实例化到渲染再到最终从页面中销毁，整个过程就是生命周期。在生命周期中，有很多可以调用的事件，也称为hook/钩子函数。&lt;/p&gt;
&lt;h3 id=&quot;生命周期三个状态&quot;&gt;生命周期三个状态&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mounting : 将组件插入DOM中&lt;/li&gt;
&lt;li&gt;Updating : 将组件更新到DOM中&lt;/li&gt;
&lt;li&gt;Unmounting : 将组件移出DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;钩子函数（方法，事件）&quot;&gt;钩子函数（方法，事件）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;componentWillMount(): 组件将要渲染,AJAX,添加动画前的类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;componentDidMount(): 组件渲染完毕，添加动画&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;componentWillReceiveProps(): 组件将要接受props数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shouldComponentUpdate(): 组件接收到新的props/state时判断是否更新，返回boolean值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;componentWillUpdate(): 组件将要更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;componentDidUpdate(): 组件更新完毕&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;compnentWillUnmount(): 组件将要卸载&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端框架" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="React" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="React" scheme="WangHngLeee.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 91 💪</title>
    <link href="WangHngLeee.github.io/2020/05/16/code01/"/>
    <id>WangHngLeee.github.io/2020/05/16/code01/</id>
    <published>2020-05-16T15:16:38.000Z</published>
    <updated>2020-05-16T23:15:14.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-289-Game-of-Life-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">289. Game of Life</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/game-of-life/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dir =&#123;&#123;<span class="number">1</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gameOfLife</span><span class="params">(<span class="keyword">int</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;board.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;board[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> live=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span>[] d:dir)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(d[<span class="number">0</span>]+i&lt;<span class="number">0</span> || d[<span class="number">0</span>]+i&gt;=board.length || d[<span class="number">1</span>]+j&lt;<span class="number">0</span> || d[<span class="number">1</span>]+j&gt;=board[<span class="number">0</span>].length) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(board[d[<span class="number">0</span>]+i][d[<span class="number">1</span>]+j]==<span class="number">1</span> || board[d[<span class="number">0</span>]+i][d[<span class="number">1</span>]+j]==<span class="number">2</span>) live++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==<span class="number">0</span> &amp;&amp; live==<span class="number">3</span>) board[i][j]=<span class="number">3</span>;<span class="comment">// dead to live</span></span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==<span class="number">1</span> &amp;&amp; (live&lt;<span class="number">2</span> || live&gt;<span class="number">3</span>)) board[i][j]=<span class="number">2</span>; <span class="comment">// live to dead</span></span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==<span class="number">1</span> &amp;&amp; (live ==<span class="number">2</span> || live ==<span class="number">3</span>))board[i][j]=<span class="number">1</span>; <span class="comment">// continue live;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;board.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;board[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">                board[i][j]%=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First we loop the whole board , find total lives for each cell in 8 directions. Then we check different situation according to the question descriptoin. I use three different state to save the state:</p><ul><li>1 means keep living</li><li>2 means live to dead*</li><li>3 means dead to live.</li></ul><p>Finally we just use the number to %2 to get the final result.</p><a id="more"></a><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1249-Minimum-Remove-to-Make-Valid-Parentheses-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1249. Minimum Remove to Make Valid Parentheses</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minRemoveToMakeValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()];</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;s.length() ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">'('</span>)stack.push(i); <span class="comment">// add idnex of ( to stack</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.isEmpty())&#123; <span class="comment">// stack not empty then add index of ) to stack</span></span><br><span class="line">                    check[i] = <span class="keyword">true</span>;</span><br><span class="line">                    check[stack.pop()] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                check[i] = <span class="keyword">true</span>; <span class="comment">// any character in s should be true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; check.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">                res.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First we add index of open / close parenthes to stack. Then we check for pair. If there is a pair of them we change the index of these in check to be true. All other chars should be true in check array except for ( and ). Finally we loop the check array to form the final res string.</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-415-Add-Strings-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">415. Add Strings</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/add-strings/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addStrings</span><span class="params">(String num1, String num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = num1.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len2 = num2.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(len1 &gt;=<span class="number">0</span> || len2 &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> n1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> n2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(len1 &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                n1  = num1.charAt(len1)-<span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(len2&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                n2 = num2.charAt(len2)-<span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> sum = n1 + n2 + carry;</span><br><span class="line">            carry = sum/<span class="number">10</span>;</span><br><span class="line">            sb.append(sum%<span class="number">10</span>);</span><br><span class="line">            len1--;</span><br><span class="line">            len2--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry!=<span class="number">0</span>)&#123;</span><br><span class="line">            sb.append(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Normal solution. Using carry and sum/10 and sum%10. Remeber to reverse the ans in the final.</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-953-Verifying-an-Alien-Dictionary-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">953. Verifying an Alien Dictionary</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/verifying-an-alien-dictionary/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dict = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAlienSorted</span><span class="params">(String[] words, String order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;order.length() ;i++)&#123;</span><br><span class="line">            dict[order.charAt(i)-<span class="string">'a'</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ;j&lt;words.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(checkbig(words[j-<span class="number">1</span>],words[j]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkbig</span><span class="params">(String word1, String word2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = word1.length();</span><br><span class="line">        <span class="keyword">int</span> b = word2.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;a &amp;&amp; i&lt;b;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(word1.charAt(i) != word2.charAt(i))&#123;</span><br><span class="line">                <span class="keyword">if</span>(dict[word1.charAt(i)-<span class="string">'a'</span>] &lt; dict[word2.charAt(i)-<span class="string">'a'</span>])<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(dict[word1.charAt(i)-<span class="string">'a'</span>] &gt; dict[word2.charAt(i)-<span class="string">'a'</span>])<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> word1.length() &gt; word2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First we use int[26] to store the new order of letters. Then we use it as a new dictionary to compare.</p><p>After we make it, we loop the given string array, then check them one by one.</p><p>Make a new function checkbig to check whether the later word is bigger than the former. If yes then return false. Otherwise we continue.<br>In the checkbig function, we check the value of each char in the dictionary. If word1’s char is little than the word2 then we return true. So back to the main function it will return false.</p><p>In final we also need check the length of them. eg ( ‘word’, ‘wordl’).</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-339-Nested-List-Weight-Sum-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">339. Nested List Weight Sum</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/nested-list-weight-sum/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> * <span class="comment">// This is the interface that allows for creating nested lists.</span></span><br><span class="line"> * <span class="comment">// You should not implement it, or speculate about its implementation</span></span><br><span class="line"> * <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NestedInteger</span> </span>&#123;</span><br><span class="line"> *     <span class="comment">// Constructor initializes an empty nested list.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="title">NestedInteger</span><span class="params">()</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// Constructor initializes a single integer.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="title">NestedInteger</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// @return true if this NestedInteger holds a single integer, rather than a nested list.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInteger</span><span class="params">()</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// @return the single integer that this NestedInteger holds, if it holds a single integer</span></span><br><span class="line"> *     <span class="comment">// Return null if this NestedInteger holds a nested list</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> Integer <span class="title">getInteger</span><span class="params">()</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// Set this NestedInteger to hold a single integer.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInteger</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// Set this NestedInteger to hold a nested list and adds a nested integer to it.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(NestedInteger ni)</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// @return the nested list that this NestedInteger holds, if it holds a nested list</span></span><br><span class="line"> *     <span class="comment">// Return null if this NestedInteger holds a single integer</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> List&lt;NestedInteger&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depthSum</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nestedList == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">1</span>;</span><br><span class="line">        Queue&lt;NestedInteger&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(NestedInteger ni : nestedList)&#123;</span><br><span class="line">            queue.add(ni);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;size ;i++)&#123;</span><br><span class="line">                NestedInteger temp = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(temp.isInteger())sum+=temp.getInteger()*level;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(NestedInteger n : temp.getList())&#123;</span><br><span class="line">                        queue.add(n);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            level++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using BFS to loop the whole array like a binary tree. In the queue loop, we only need to check whether current is an integer or a nestedarray. If is an integer, we add its value * level to the sum. After each level loop, we increase level by 1.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,[4,[6]]]</span><br><span class="line">Output: 27</span><br><span class="line">Explanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4*2 + 6*3 = 27.</span><br></pre></td></tr></table></figure><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-364-Nested-List-Weight-Sum-II-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">364. Nested List Weight Sum II</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/nested-list-weight-sum-ii/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> * <span class="comment">// This is the interface that allows for creating nested lists.</span></span><br><span class="line"> * <span class="comment">// You should not implement it, or speculate about its implementation</span></span><br><span class="line"> * <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NestedInteger</span> </span>&#123;</span><br><span class="line"> *     <span class="comment">// Constructor initializes an empty nested list.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="title">NestedInteger</span><span class="params">()</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// Constructor initializes a single integer.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="title">NestedInteger</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// @return true if this NestedInteger holds a single integer, rather than a nested list.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInteger</span><span class="params">()</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// @return the single integer that this NestedInteger holds, if it holds a single integer</span></span><br><span class="line"> *     <span class="comment">// Return null if this NestedInteger holds a nested list</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> Integer <span class="title">getInteger</span><span class="params">()</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// Set this NestedInteger to hold a single integer.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInteger</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// Set this NestedInteger to hold a nested list and adds a nested integer to it.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(NestedInteger ni)</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// @return the nested list that this NestedInteger holds, if it holds a nested list</span></span><br><span class="line"> *     <span class="comment">// Return null if this NestedInteger holds a single integer</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> List&lt;NestedInteger&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depthSumInverse</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nestedList == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;NestedInteger&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(NestedInteger ni : nestedList)&#123;</span><br><span class="line">            queue.add(ni);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> prevsum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">int</span> levelsum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; size ;i++)&#123;</span><br><span class="line">                NestedInteger temp = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(temp.isInteger())levelsum+=temp.getInteger();</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(NestedInteger n : temp.getList())&#123;</span><br><span class="line">                        queue.add(n);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            prevsum+=levelsum;</span><br><span class="line">            total+=prevsum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Different to the former question, in this question we have to loop from the leaf. So we have to keep a prevsum to keep track of.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,[4,[6]]]</span><br><span class="line">Output: 17</span><br><span class="line">Explanation: One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 1*3 + 4*2 + 6*1 = 17.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-289-Game-of-Life-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;289. Game of Life&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/game-of-life/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dir =&amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;,&amp;#123;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gameOfLife&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] board)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;board.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; live=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] d:dir)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]+i&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]+i&amp;gt;=board.length || d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+j&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+j&amp;gt;=board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]+i][d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+j]==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || board[d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]+i][d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+j]==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) live++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j]==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; live==&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) board[i][j]=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// dead to live&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j]==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; (live&amp;lt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; || live&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) board[i][j]=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// live to dead&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j]==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; (live ==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; || live ==&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))board[i][j]=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// continue live;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;board.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                board[i][j]%=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;First we loop the whole board , find total lives for each cell in 8 directions. Then we check different situation according to the question descriptoin. I use three different state to save the state:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 means keep living&lt;/li&gt;
&lt;li&gt;2 means live to dead*&lt;/li&gt;
&lt;li&gt;3 means dead to live.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally we just use the number to %2 to get the final result.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Interview Note 5 💪</title>
    <link href="WangHngLeee.github.io/2020/04/26/front-end-interview2/"/>
    <id>WangHngLeee.github.io/2020/04/26/front-end-interview2/</id>
    <published>2020-04-26T18:28:27.000Z</published>
    <updated>2020-05-19T15:45:43.592Z</updated>
    
    <content type="html"><![CDATA[<h1>HTML</h1><h2 id="DOCTYPE-作用">&lt;!DOCTYPE&gt;作用</h2><p>一般在html文档第一行声明。用来告知浏览器用什么文档解析标准来解析当前文档。解析模式分为标准模式和兼容模式。</p><h2 id="标准模式-兼容模式">标准模式 &amp;&amp; 兼容模式</h2><ul><li>标准模式：标准模式的渲染方式和 JS 引擎的解析方式都是以该浏览器支持的最高标准运行。</li><li>兼容模式：页面以宽松的向后兼容的方式显示，模拟老式浏览器的行为以防止站点无法工作。</li></ul><h2 id="link-和-import区别">link 和 @import区别</h2><ul><li>从属关系：link是基于html的语法，而@import是基于css的，css2.1之后才出现。</li><li>加载顺序：link中的内容可以随页面其他内容一起加载，而@import中引入的css必须等其他全部加载完成后再开始加载。</li><li>兼容性区别：link是基于html的，不存在兼容性问题。@import是css2.1之后才出现的，会存在部分IE5+之前的浏览器在不兼容的问题。</li><li>DOM可操作性： 可以通过JS操作DOM改变link中的内容来改变样式；而DOM是基于文档的，无法使用@import来改变。</li></ul><h2 id="浏览器渲染原理">浏览器渲染原理</h2><ol><li>首先解析收到HTML的文件，构造DOM树。</li><li>对CSS文件进行解析，构造CSSOM规则树。</li><li>根据DOM和CSSOM规则树构造渲染树。</li><li>当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也叫做回流/重排）.</li><li>布局阶段结束后是绘制阶段（重绘），遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示在屏幕上，绘制使用 UI 基础组件。</li></ol><h2 id="async-和-defer-的作用和区别">async 和 defer 的作用和区别</h2><ol><li>如果script中没有async和defer，则浏览器会自动加载和执行指定对脚本文件，并暂停其他资源的加载和执行，知道script中的资源加载执行完毕。</li><li><strong>defer</strong>：表示延迟执行引入的JS。JS加载时 HTML 并未停止解析，这两个过程是并行的。当整个 document 解析完毕后再执行脚本文件，在 DOMContentLoaded 事件触发之前完成。多个脚本按顺序执行。</li><li><strong>async</strong>：表示异步执行引入JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行，也就是说它的执行仍然会阻塞文档的解析，只是它的加载过程不会阻塞。多个脚本的执行顺序无法保证。</li></ol><img src="https://segmentfault.com/img/bVWhRl?w=801&h=814"><h2 id="DOMContentLoaded-事件和-Load-事件的区别">DOMContentLoaded 事件和 Load 事件的区别</h2><p>DOMContentLoaded在HTML文件全部加载完成后触发，并不需要等待css样式、图片图表等文件的加载。</p><p>Load必须等到所有文件全部加载完成后才会触发。</p><h2 id="HTML离线缓存">HTML离线缓存</h2><p>原理：HTML5 的离线存储是基于一个新建的 .appcache 文件的缓存机制（不是存储技术），通过这个文件上的解析清单离线存储资源，这些资源就会像 cookie 一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p><p>在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问 app ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过 app 并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</p><p>离线的情况下，浏览器就直接使用离线存储的资源。</p><h2 id="attibute和property区别">attibute和property区别</h2><p>attribute 是 dom 元素在文档中作为 html 标签拥有的属性；<br>property 就是 dom 元素在 js 中作为对象拥有的属性。</p><p>对于 html 的标准属性来说，attribute 和 property 是同步的，是会自动更新的，但是对于自定义的属性来说，他们是不同步的。</p><h1>CSS</h1><h2 id></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;HTML&lt;/h1&gt;
&lt;h2 id=&quot;DOCTYPE-作用&quot;&gt;&amp;lt;!DOCTYPE&amp;gt;作用&lt;/h2&gt;
&lt;p&gt;一般在html文档第一行声明。用来告知浏览器用什么文档解析标准来解析当前文档。解析模式分为标准模式和兼容模式。&lt;/p&gt;
&lt;h2 id=&quot;标准模式-兼容模式&quot;&gt;
      
    
    </summary>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/Interview/"/>
    
      <category term="HTML" scheme="WangHngLeee.github.io/categories/Interview/HTML/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Interview Note 4 💪</title>
    <link href="WangHngLeee.github.io/2020/04/26/frontend-interview-note/"/>
    <id>WangHngLeee.github.io/2020/04/26/frontend-interview-note/</id>
    <published>2020-04-26T18:28:27.000Z</published>
    <updated>2020-05-19T15:45:59.415Z</updated>
    
    <content type="html"><![CDATA[<h1>CSS</h1><h2 id="before-和-after中单引号和双引号的区别">::before 和:after中单引号和双引号的区别</h2><p>单冒号(:)用于css伪类，双冒号(::)用于css伪元素。有些浏览器考虑到兼容问题，部分情况下也可以用单引号(:)表示伪元素。</p><p>伪类(😃：一般匹配的是元素的某些特定状态，例如:hover, :link</p><ul><li>伪类用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的<br>元素时，我们可以通过 :hover 来描述这个元素的状态。</li></ul><p>伪元素(:😃：一般匹配的是特殊位置，比如::before ::after等。</p><ul><li>伪元素用于创建一些不在文档树中的元素，并为其添加样式。它们允许我们为元素的某些部分设置样式。比如说，我们可以通过 ::be<br>fore 来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</li></ul><a id="more"></a><h2 id="居中问题">居中问题</h2><h3 id="1-水平居中">1.水平居中</h3><ol><li>为div设置宽度，让margin为0 auto。</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用text-align实现</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:black;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:pink;<span class="comment">/*和black区分开更清楚*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-水平垂直居中">2.水平垂直居中</h3><ol><li>容器高宽值给定时,margin设为自身宽高一半</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先将div左上角移到屏幕中心，再设置margin为自身size的一半。</p><ol start="2"><li>容器宽高未知时，使用transform方法。</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;<span class="comment">/* 相对定位或绝对定位均可 */</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用flex布局</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:red;<span class="comment">/*看效果*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="position中，不同的值其定位原点各是什么？-relative-absolute-static-fixed-inherit">position中，不同的值其定位原点各是什么？(relative,absolute,static,fixed,inherit)</h2><ul><li><p>absolute:<br>生成绝对定位的元素，相对于值不为 static 的第一个父元素的 padding box 进行定位，也可以理解为离自己这一级元素最近的<br>一级 position 设置为 absolute 或者 relative 的父元素的 padding box 的左上角为原点的。</p></li><li><p>fixed :生成绝对定位的元素，相对于浏览器窗口进行定位。</p></li><li><p>relative: 生成相对定位的元素，相对于其元素本身所在正常位置进行定位。</p></li><li><p>static: 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right, z-index 声明）。</p></li><li><p>inherit: 规定从父元素继承 position 属性的值。</p></li></ul><h2 id="li-与-li-之间有看不见的空白间隔问题-解决方法">li 与 li 之间有看不见的空白间隔问题 &amp;&amp; 解决方法</h2><p>浏览器在渲染inline行内元素的时候，为了美观会将元素间的空白字符渲染成换空格。而我们在写li的时候为了美观会将li放在单独一行，所以li换行后会产生换行符。</p><ul><li>为li设置 float: left。</li><li>将所有 li 写在同一行。</li><li>将 ul 内的font-size设为0。</li><li>消除 ul 的字符间隔 ，设置letter-spacing: -8px，</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;CSS&lt;/h1&gt;
&lt;h2 id=&quot;before-和-after中单引号和双引号的区别&quot;&gt;::before 和:after中单引号和双引号的区别&lt;/h2&gt;
&lt;p&gt;单冒号(:)用于css伪类，双冒号(::)用于css伪元素。有些浏览器考虑到兼容问题，部分情况下也可以用单引号(:)表示伪元素。&lt;/p&gt;
&lt;p&gt;伪类(😃：一般匹配的是元素的某些特定状态，例如:hover, :link&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;伪类用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的&lt;br&gt;
元素时，我们可以通过 :hover 来描述这个元素的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;伪元素(:😃：一般匹配的是特殊位置，比如::before ::after等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;伪元素用于创建一些不在文档树中的元素，并为其添加样式。它们允许我们为元素的某些部分设置样式。比如说，我们可以通过 ::be&lt;br&gt;
fore 来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/Interview/"/>
    
      <category term="CSS" scheme="WangHngLeee.github.io/categories/Interview/CSS/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
  </entry>
  
  <entry>
    <title>📖 Vue学习笔记(3)</title>
    <link href="WangHngLeee.github.io/2020/04/13/vue3/"/>
    <id>WangHngLeee.github.io/2020/04/13/vue3/</id>
    <published>2020-04-13T17:15:41.000Z</published>
    <updated>2020-04-27T00:06:07.125Z</updated>
    
    <content type="html"><![CDATA[<h1>vue v-model 和 数据双向绑定</h1><h2 id="v-model">v-model</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span> &#123;&#123; msg &#125;&#125; <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">v-bind:value</span> = <span class="string">"msg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">v-model</span> = <span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">'This is new data '</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码很清楚的展示了v-bind 单向数据绑定和 v-model 双向数据绑定的区别。<br><br>第一个input框内的文字只会和h4内同步一次，当对input做出改变时，h4内容不会随之改变。<br><br>相反，使用了v-model的input发生改变时，h4显示的内容会随之一起改变。</p><p>待更新</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;vue v-model 和 数据双向绑定&lt;/h1&gt;
&lt;h2 id=&quot;v-model&quot;&gt;v-model&lt;/h2&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="前端框架" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/"/>
    
    
      <category term="Vue" scheme="WangHngLeee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>📖 前端问题杂烩-Vue篇(1)</title>
    <link href="WangHngLeee.github.io/2020/04/08/front-end-interview-vue/"/>
    <id>WangHngLeee.github.io/2020/04/08/front-end-interview-vue/</id>
    <published>2020-04-08T18:15:41.000Z</published>
    <updated>2020-05-19T15:45:47.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="讲一讲MVVM？（⭐️⭐️⭐️⭐️）">讲一讲MVVM？（⭐️⭐️⭐️⭐️）</h3><p>MVVM是Model-View-ViewModel的缩写，也就是把后端概念里MVC的controller换成了viewmodel。<br></p><p>Model层代表数据模型，View代表UI组件，ViewModel是View和Model层的桥梁，数据会绑定到viewModel层并自动将数据渲染到页面中，视图变化的时候会通知viewModel层更新数据。</p><h3 id="讲一下Vue2-x响应式数据的原理（⭐️⭐️⭐️）">讲一下Vue2.x响应式数据的原理（⭐️⭐️⭐️）</h3><p>Vue在初始化数据时，会使用Object.defineProperty重新定义data中的所有属性。当页面使用对应属性时，首先会进行依赖收集(收集当前组件的watcher)，如果属性发生变化会通知相关依赖进行更新操作(发布订阅)。</p><a id="more"></a><h3 id="讲一下Vue3-x响应式数据原理（⭐️⭐️⭐️⭐️）">讲一下Vue3.x响应式数据原理（⭐️⭐️⭐️⭐️）</h3><p>Vue3.x改用Proxy替代Object.defineProperty。因为Proxy可以直接监听对象和数组的变化，并且有多达13种拦截方法。并且作为新标准将受到浏览器厂商重点持续的性能优化。</p><h3 id="Proxy只会代理对象的第一层，那么Vue3又是怎样处理这个问题的呢？（⭐️⭐️⭐️）">Proxy只会代理对象的第一层，那么Vue3又是怎样处理这个问题的呢？（⭐️⭐️⭐️）</h3><p>判断当前Reflect.get的返回值是否为Object。如果是则再通过reactive方法做代理，这样就实现了深度观测。</p><h3 id="监测数组的时候可能触发多次get-set，如何防止触发多次呢？（⭐️⭐️⭐️）">监测数组的时候可能触发多次get/set，如何防止触发多次呢？（⭐️⭐️⭐️）</h3><p>可以通过判断key是否为当前被代理对象target自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行trigger。</p><h3 id="vue2-x中如何监测数组变化（⭐️⭐️）">vue2.x中如何监测数组变化（⭐️⭐️）</h3><p>使用了函数劫持的方式，重写了数组的方法，Vue将data中的数组进行了原型链重写，指向了自己定义的数组原型方法。这样当调用数组api时，可以通知依赖更新。如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。<br><br>（这里要多看vue源码和js原型链的概念。)</p><h3 id="nextTick是什么？它的实现原理？（⭐️⭐️）">nextTick是什么？它的实现原理？（⭐️⭐️）</h3><p>在下次 DOM 更新循环结束之后执行延迟回调。nextTick主要使用了宏任务和微任务。根据执行环境分别尝试采用</p><ul><li>Promise</li><li>MutationObserver</li><li>setImmediate</li></ul><p>如果以上都不行则采用setTimeout<br>定义了一个异步方法，多次调用nextTick会将方法存入队列中，通过这个异步方法清空当前队列。</p><p>(其实问框架最终还是考验原生JavaScript的功底)</p><h3 id="Vue的生命周期（⭐️⭐️⭐️⭐️⭐️）">Vue的生命周期（⭐️⭐️⭐️⭐️⭐️）</h3><p>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载DOM、渲染➡️更新➡️渲染、销毁等一系列过程，这就是Vue生命周期的定义。通俗讲就是Vue实例从创建到销毁到全过程。</p><p><strong>beforeCreate</strong>：是new Vue()之后触发的第一个钩子，在当前阶段data、methods、computed以及watch上的数据和方法都不能被访问。</p><p><strong>created</strong>：在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发updated函数。可以做一些初始数据的获取，在当前阶段无法与Dom进行交互，如果非要想，可以通过vm.$nextTick来访问Dom。</p><p><strong>beforeMount</strong>：  发生在挂载之前，在这之前template模板已导入渲染函数编译。而当前阶段虚拟Dom已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发updated。</p><p><strong>mounted</strong>： 在挂载完成后发生，在当前阶段，真实的Dom挂载完毕，数据完成双向绑定，可以访问到Dom节点，使用$refs属性对Dom进行操作。</p><p><strong>beforeUpdate</strong>： 发生在更新之前，也就是响应式数据发生更新，虚拟dom重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。</p><p><strong>updated</strong>： 发生在更新完成之后，当前阶段组件Dom已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。</p><p><strong>beforeDestroy</strong>： 发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。</p><p><strong>destroyed</strong>： 发生在实例销毁之后，这个时候只剩下了dom空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;讲一讲MVVM？（⭐️⭐️⭐️⭐️）&quot;&gt;讲一讲MVVM？（⭐️⭐️⭐️⭐️）&lt;/h3&gt;
&lt;p&gt;MVVM是Model-View-ViewModel的缩写，也就是把后端概念里MVC的controller换成了viewmodel。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Model层代表数据模型，View代表UI组件，ViewModel是View和Model层的桥梁，数据会绑定到viewModel层并自动将数据渲染到页面中，视图变化的时候会通知viewModel层更新数据。&lt;/p&gt;
&lt;h3 id=&quot;讲一下Vue2-x响应式数据的原理（⭐️⭐️⭐️）&quot;&gt;讲一下Vue2.x响应式数据的原理（⭐️⭐️⭐️）&lt;/h3&gt;
&lt;p&gt;Vue在初始化数据时，会使用Object.defineProperty重新定义data中的所有属性。当页面使用对应属性时，首先会进行依赖收集(收集当前组件的watcher)，如果属性发生变化会通知相关依赖进行更新操作(发布订阅)。&lt;/p&gt;
    
    </summary>
    
      <category term="前端框架" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/"/>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Interview/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
      <category term="Vue" scheme="WangHngLeee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>📖 Vue学习笔记(2)</title>
    <link href="WangHngLeee.github.io/2020/04/05/vue2/"/>
    <id>WangHngLeee.github.io/2020/04/05/vue2/</id>
    <published>2020-04-05T13:15:41.000Z</published>
    <updated>2020-04-05T14:29:12.774Z</updated>
    
    <content type="html"><![CDATA[<h1>vue指令–事件修饰符</h1><h2 id="stop阻止冒泡">.stop阻止冒泡</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span> = <span class="string">"divclicker"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'clickme'</span> @<span class="attr">click.stop</span> =<span class="string">"btnclicker"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                divclicker()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'div clicked'</span>)</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                btnclicker()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'btn clicked'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">btn clicked</span><br></pre></td></tr></table></figure><p>stop让冒泡停在了btn这个地方，不会继续向上延伸到div父类。<br><br>如果没有stop阻止冒泡的话，正常冒泡行为输出应该为：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">btn clicked</span><br><span class="line">div clicked</span><br></pre></td></tr></table></figure><ul><li>xxx.stop: 自身修饰符,可以阻止冒泡行为。</li></ul><a id="more"></a><h2 id="prevent-阻止默认事件">.prevent 阻止默认事件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://google.com"</span> @<span class="attr">click.prevent</span>=<span class="string">"linkclicked"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                linkclicked()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'link clicked'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码最终将会console出‘link clicked’的结果但是并不会跳转，因为prevent阻止了跳转的默认行为。<br></p><ul><li>.prevent: 可以阻止默认的js行为。</li></ul><h2 id="capture-捕获行为">.capture 捕获行为</h2><p>利用之前.stop中的代码来看：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span> = <span class="string">"divclicker"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'clickme'</span> @<span class="attr">click</span> =<span class="string">"btnclicker"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                divclicker()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'div clicked'</span>)</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                btnclicker()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'btn clicked'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时控制台输出的顺序则将会是</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div clicked</span><br><span class="line">btn clicked</span><br></pre></td></tr></table></figure><p>capture改变了web的默认冒泡行为，变成了捕获行为。<br></p><ul><li>冒泡：渲染之后，当用户产生交互时，先从父节点向下寻找触发行为的component，然后由下至上冒泡地依次触发sub父类。</li><li>捕获：与冒泡相反，直接由上到下触发。</li></ul><h2 id="self-自身触发">.self 自身触发</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.self</span> = <span class="string">"divclicker"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'clickme'</span> @<span class="attr">click</span> =<span class="string">"btnclicker"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                divclicker()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'div clicked'</span>)</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                btnclicker()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'btn clicked'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时只点击button时控制台只会输出：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">btn clicked</span><br></pre></td></tr></table></figure><p>并没有div的消息出现，这是因为self定义了只有点击该元素本身的时候才会触发行为。所以当点击div范围内的空白处时会输出‘div clicked’.</p><h2 id="once-只执行一次">.once 只执行一次</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://google.com"</span> @<span class="attr">click.prevent.self</span> =<span class="string">"linkclicked"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                linkclicked()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'link clicked'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码只会阻止该a标签跳转一次，点击第二次则会正常跳转，因为self限制了prevent只起作用一次。</p><ul><li>事件修饰符可以串联。</li><li>once只触发一次，且只有一次有效。</li></ul><h2 id="stop-和-self-阻止冒泡的原理区别">.stop 和 .self 阻止冒泡的原理区别</h2><p>.stop 和 .self 都可以产生阻止冒泡的行为发生，但是二者原理不同。<br></p><ul><li>.stop 阻止了该元素之上的所有父元素的冒泡行为</li><li>.self 只阻止了自身的冒泡行为。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// self机制</span><br><span class="line">div1</span><br><span class="line">    div2</span><br><span class="line">        div3 @click.self</span><br><span class="line">            btn @click</span><br></pre></td></tr></table></figure><p>点击btn后，除了div3不会冒泡，btn，div1和div2均会正常冒泡。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// stop机制</span><br><span class="line">div1</span><br><span class="line">    div2</span><br><span class="line">        div3 @click.stop</span><br><span class="line">            btn @click</span><br></pre></td></tr></table></figure><p>此时点击btn，只有btn和div3会冒泡，而div1和div2均不会冒泡。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;vue指令–事件修饰符&lt;/h1&gt;
&lt;h2 id=&quot;stop阻止冒泡&quot;&gt;.stop阻止冒泡&lt;/h2&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; @&lt;span class=&quot;attr&quot;&gt;click&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;divclicker&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;button&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;clickme&#39;&lt;/span&gt; @&lt;span class=&quot;attr&quot;&gt;click.stop&lt;/span&gt; =&lt;span class=&quot;string&quot;&gt;&quot;btnclicker&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vm = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vue(&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;            el:&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            data:&amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            methods:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                divclicker()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;div clicked&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                btnclicker()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;btn clicked&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;btn clicked&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;stop让冒泡停在了btn这个地方，不会继续向上延伸到div父类。&lt;br&gt;&lt;br&gt;
如果没有stop阻止冒泡的话，正常冒泡行为输出应该为：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;btn clicked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;div clicked&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;xxx.stop: 自身修饰符,可以阻止冒泡行为。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端框架" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/"/>
    
    
      <category term="Vue" scheme="WangHngLeee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>📖 Vue学习笔记(1)</title>
    <link href="WangHngLeee.github.io/2020/04/04/vue1/"/>
    <id>WangHngLeee.github.io/2020/04/04/vue1/</id>
    <published>2020-04-04T17:23:41.000Z</published>
    <updated>2020-04-05T14:29:14.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC-MVVM">MVC &amp; MVVM</h2><h4 id="MVC">MVC</h4><ul><li>MVC是后端中的分层概念。M-Model，V-View，C-Controller。</li></ul><h4 id="MVVM">MVVM</h4><ul><li>MVVC只是针对前端分层。M-Model，V-View，VM-View Model。其中M和V要通过VM来进行数据链接。</li></ul><h2 id="Vue基本代码">Vue基本代码</h2><p>分两大部分。html和js。</p><h4 id="html部分">html部分</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">//js中new的vue实例将会控制该div中的所有元素。</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="js部分">js部分</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建新的vue实例</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>, <span class="comment">// 选择控制某个div</span></span><br><span class="line">    data:&#123;</span><br><span class="line">        title:<span class="string">'test'</span><span class="comment">//存放data</span></span><br><span class="line">    &#125;,</span><br><span class="line">    method:&#123;</span><br><span class="line">        func1()&#123;</span><br><span class="line">            <span class="comment">// 实现函数内容</span></span><br><span class="line">        &#125;,</span><br><span class="line">        func2()&#123;</span><br><span class="line">            <span class="comment">//实现函数内容</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>不难看出，html中的部分是V-view，js中的部分是VM-ViewModel，负责数据链接，另外model部分也在js中，具体是data体现了model的功能。</li><li>vue中不需要用data.title来引用，直接用即可。</li></ul><a id="more"></a><h2 id="v-cloak-v-text-v-html">v-cloak / v-text / v-html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>aaa &#123;&#123; msg &#125;&#125; aaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">"msg1"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            msg1:<span class="string">'test'</span>，</span></span><br><span class="line"><span class="xml">            msg2:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is h1 text<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用v-cloak能够解决插值表达式在网速不稳定下文本的闪烁问题。</li><li>v-text能够覆盖原本的文本，而v-cloak只会替代本身的占字符。</li><li>v-html可以自动识别html文本语句并转成html渲染。</li></ul><h2 id="v-bind-属性绑定">v-bind 属性绑定</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"btn"</span> <span class="attr">v-bind:title</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            title:<span class="string">'this is title'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-bind会将目标target绑定到该元素上，如果不用v-bind则会显示title字样而不是data中自定义的title值。</li><li>另外由于v-bind:是js语法，所以后面可以跟自定义的lambda，例如v-bind:title=“title + ‘123’”.</li><li>v-bind:也可以直接简写为:</li></ul><h2 id="v-on-事件绑定">v-on 事件绑定</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"btn"</span> <span class="attr">v-on:click</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            title:<span class="string">'this is title'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            alert:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'test'</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-on用于事件绑定。后面一般跟自己定义的函数。类似js中的onclick.</li><li>可以简写为@click，@mouseover。。。</li><li>js中定义methods时，有两种写法，一种是function，一种是函数名直接跟().</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods&#123;</span><br><span class="line">    alert()&#123;</span><br><span class="line">        alert(<span class="string">'test'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    alert1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'test1'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo1-跑马灯文字循环">demo1 : 跑马灯文字循环</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'开始'</span> @<span class="attr">click</span>=<span class="string">"begin"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'停止'</span> @<span class="attr">click</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            msg:<span class="string">'测试跑马灯文字流！测试！'</span>，</span></span><br><span class="line"><span class="javascript">            intervalId:<span class="literal">null</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:</span><br><span class="line">            begin()&#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(intervalId != <span class="literal">null</span>)<span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.intervalId = setInterval( <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 保证能够自动刷新加入interval</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> start = msg.substring(<span class="number">0</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> end = msg.substring(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.msg = start + end;<span class="comment">//重新拼接string</span></span></span><br><span class="line">                &#125;,400);</span><br><span class="line">            &#125;,</span><br><span class="line">            stop()&#123;</span><br><span class="line"><span class="javascript">                clearInterval(<span class="keyword">this</span>.intervalId);</span></span><br><span class="line"><span class="javascript">                intervalId = <span class="literal">null</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><ul><li>每次把第一位char移到最后</li><li>为了保证连续滚动，设定interval</li><li>利用intervalId来保证开始和停止按钮正常工作。利用intervalId是否为null来判断之前是否移动过。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MVC-MVVM&quot;&gt;MVC &amp;amp; MVVM&lt;/h2&gt;
&lt;h4 id=&quot;MVC&quot;&gt;MVC&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MVC是后端中的分层概念。M-Model，V-View，C-Controller。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;MVVM&quot;&gt;MVVM&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MVVC只是针对前端分层。M-Model，V-View，VM-View Model。其中M和V要通过VM来进行数据链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Vue基本代码&quot;&gt;Vue基本代码&lt;/h2&gt;
&lt;p&gt;分两大部分。html和js。&lt;/p&gt;
&lt;h4 id=&quot;html部分&quot;&gt;html部分&lt;/h4&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//js中new的vue实例将会控制该div中的所有元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123; title &amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;js部分&quot;&gt;js部分&lt;/h4&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建新的vue实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vm = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    el:&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 选择控制某个div&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        title:&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//存放data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    method:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        func1()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 实现函数内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        func2()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//实现函数内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;不难看出，html中的部分是V-view，js中的部分是VM-ViewModel，负责数据链接，另外model部分也在js中，具体是data体现了model的功能。&lt;/li&gt;
&lt;li&gt;vue中不需要用data.title来引用，直接用即可。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端框架" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/"/>
    
    
      <category term="Vue" scheme="WangHngLeee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 90 💪</title>
    <link href="WangHngLeee.github.io/2020/03/15/chin-up-28/"/>
    <id>WangHngLeee.github.io/2020/03/15/chin-up-28/</id>
    <published>2020-03-15T18:13:23.000Z</published>
    <updated>2020-03-16T01:03:27.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-567-Permutation-in-String-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">567. Permutation in String</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/permutation-in-string/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1 == <span class="keyword">null</span> || s2 == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> len1 = s1.length();</span><br><span class="line">        <span class="keyword">int</span> len2 = s2.length();</span><br><span class="line">        <span class="keyword">if</span>(len1 &gt; len2)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;len1 ;i++)&#123;</span><br><span class="line">            arr[s1.charAt(i) - <span class="string">'a'</span>]++;</span><br><span class="line">            arr[s2.charAt(i) - <span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(allzero(arr))<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = len1; j&lt;len2 ;j++)&#123;</span><br><span class="line">            arr[s2.charAt(j)-<span class="string">'a'</span>]--;</span><br><span class="line">            arr[s2.charAt(j-len1)-<span class="string">'a'</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(allzero(arr))<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allzero</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]!=<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典26大小arr方法。检查各个字母出现的次数。维护一个len1大小的窗口</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-567-Permutation-in-String-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color
      
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="SilidingWindow" scheme="WangHngLeee.github.io/tags/SilidingWindow/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Contest 180 🏆</title>
    <link href="WangHngLeee.github.io/2020/03/15/contest06/"/>
    <id>WangHngLeee.github.io/2020/03/15/contest06/</id>
    <published>2020-03-15T13:02:09.000Z</published>
    <updated>2020-03-16T00:11:01.441Z</updated>
    
    <content type="html"><![CDATA[<p>由于比赛时间延后没赶上，所以这次赛后做的，本次三题。</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-1380-Lucky-Numbers-in-a-Matrix-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">1380. Lucky Numbers in a Matrix</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/lucky-numbers-in-a-matrix/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">luckyNumbers</span> <span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; minvalues = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;matrix.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> min = matrix[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt; matrix[<span class="number">0</span>].length ;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] &lt; min)&#123;</span><br><span class="line">                    min = matrix[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            minvalues.add(min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt; matrix[<span class="number">0</span>].length ;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> max = matrix[<span class="number">0</span>][j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span> ; i&lt;matrix.length ;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] &gt; max)&#123;</span><br><span class="line">                    max = matrix[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(minvalues.contains(max))&#123;</span><br><span class="line">                res.add(max);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很直观。行的min同时也是col的max才是lucky number。 所以一个set先存出现过的min值，再扫描col找到所有的max，如果max在set里出现过，则加入res。</p><a id="more"></a><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1381-Design-a-Stack-With-Increment-Operation-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1381. Design a Stack With Increment Operation</font> </td></tr></table></h2><p><a href="https://leetcode.com/problems/design-a-stack-with-increment-operation/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><h3 id="First-Soluiton">First Soluiton</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomStack</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack;</span><br><span class="line">    <span class="keyword">int</span> max;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        max = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack.size() &lt; max)&#123;</span><br><span class="line">            stack.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.size() == <span class="number">0</span> ? -<span class="number">1</span> : stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; temp = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()) temp.push(stack.pop());</span><br><span class="line">        <span class="keyword">while</span>(k!=<span class="number">0</span> &amp;&amp; !temp.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = temp.pop() + val;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!temp.isEmpty())</span><br><span class="line">            stack.push(temp.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Simply using extra stack to reverse the original stack, and to add some operations on it.</p><h3 id="Optimized-Soluiton">Optimized Soluiton</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomStack</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; arr;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        size = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.size() &lt; size)&#123;</span><br><span class="line">            arr.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.size() == <span class="number">0</span> ? -<span class="number">1</span> : arr.remove(arr.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k &amp;&amp; i&lt;arr.size() ; i++)&#123;</span><br><span class="line">            arr.set(i,arr.get(i)+val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using extra arr to simulate a stack. Pay attention to the ‘remove’, it can remove the specified index num and return it’s value.</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1382-Balance-a-Binary-Search-Tree-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1382. Balance a Binary Search Tree</font> </td></tr></table></h2><p><a href="https://leetcode.com/problems/balance-a-binary-search-tree/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; sortedarr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">balanceBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        inorder(root);</span><br><span class="line">        <span class="keyword">return</span> buildtree(<span class="number">0</span>,sortedarr.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)<span class="keyword">return</span>;</span><br><span class="line">        inorder(root.left);</span><br><span class="line">        sortedarr.add(root.val);</span><br><span class="line">        inorder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildtree</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = start + ( end - start)/<span class="number">2</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(sortedarr.get(mid));</span><br><span class="line">        root.left = buildtree(start,mid-<span class="number">1</span>);</span><br><span class="line">        root.right = buildtree(mid+<span class="number">1</span>,end);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Classic template : inorder traverse + preorder buildtree.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于比赛时间延后没赶上，所以这次赛后做的，本次三题。&lt;/p&gt;
&lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-1380-Lucky-Numbers-in-a-Matrix-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;1380. Lucky Numbers in a Matrix&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/lucky-numbers-in-a-matrix/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;luckyNumbers&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] matrix)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Integer&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        HashSet&amp;lt;Integer&amp;gt; minvalues = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i&amp;lt;matrix.length ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; min = matrix[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ; j&amp;lt; matrix[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length ;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(matrix[i][j] &amp;lt; min)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    min = matrix[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minvalues.add(min);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; j&amp;lt; matrix[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length ;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; max = matrix[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i =&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ; i&amp;lt;matrix.length ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(matrix[i][j] &amp;gt; max)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    max = matrix[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(minvalues.contains(max))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                res.add(max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很直观。行的min同时也是col的max才是lucky number。 所以一个set先存出现过的min值，再扫描col找到所有的max，如果max在set里出现过，则加入res。&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly Contest" scheme="WangHngLeee.github.io/categories/Weekly-Contest/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Contest" scheme="WangHngLeee.github.io/tags/Contest/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 89 💪</title>
    <link href="WangHngLeee.github.io/2020/03/12/chin-up-27/"/>
    <id>WangHngLeee.github.io/2020/03/12/chin-up-27/</id>
    <published>2020-03-12T15:13:23.000Z</published>
    <updated>2020-05-16T22:28:46.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-734-Sentence-Similarity-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">734. Sentence Similarity</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/sentence-similarity/" target="_blank" rel="noopener"><font size="4">đQuestion Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areSentencesSimilar</span><span class="params">(String[] words1, String[] words2, List&lt;List&lt;String&gt;&gt; pairs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(words1.length != words2.length)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;String,Set&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(List&lt;String&gt; str : pairs)&#123;</span><br><span class="line">            map.putIfAbsent(str.get(<span class="number">0</span>),<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">            map.putIfAbsent(str.get(<span class="number">1</span>),<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">            map.get(str.get(<span class="number">0</span>)).add(str.get(<span class="number">1</span>));</span><br><span class="line">            map.get(str.get(<span class="number">1</span>)).add(str.get(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; words1.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(words1[i].equals(words2[i]))<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(words1[i]))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(!map.get(words1[i]).contains(words2[i]))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using map to store the key-value of each string in the pairs. Then we loop the word1 and words2, only when two stirng is equal or map contains each other then we can continue to loop. Other wise we return fasle.</p><a id="more"></a><h2 id="table-tr-td-bgcolor-28B463-font-color-white-737-Sentence-Similarity-II-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">737. Sentence Similarity II</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/sentence-similarity-ii/" target="_blank" rel="noopener"><font size="4">đQuestion Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areSentencesSimilarTwo</span><span class="params">(String[] words1, String[] words2, List&lt;List&lt;String&gt;&gt; pairs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(words1.length != words2.length)<span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// corner case</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(List&lt;String&gt; str : pairs)&#123;<span class="comment">// initialize union find hashmap</span></span><br><span class="line">            String parent1 = find(map,str.get(<span class="number">0</span>));</span><br><span class="line">            String parent2 = find(map,str.get(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span>(!parent1.equals(parent2))map.put(parent1,parent2); <span class="comment">// </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; words1.length ;i++)&#123; <span class="comment">// return false if two string are not equal and both of them are not from the same root string</span></span><br><span class="line">            <span class="keyword">if</span>(!words1[i].equals(words2[i]) &amp;&amp; !find(map,words1[i]).equals(find(map,words2[i])))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">(Map&lt;String,String&gt; map, String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(s))map.put(s,s);</span><br><span class="line">        <span class="keyword">return</span> s.equals(map.get(s)) ? s : find(map,map.get(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using Union-Find. Using map to create unionfind graph. First we initialize each string with the root of itself. Then we update the root with parent2 if they are not the same. Then loop the word1, if we meet two string are not equal and are not from the same root string , we return false. Otherwise we continue until we return true in the final.</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-277-Find-the-Celebrity-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">277. Find the Celebrity</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/find-the-celebrity/" target="_blank" rel="noopener"><font size="4">đQuestion Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The knows API is defined in the parent class Relation.</span></span><br><span class="line"><span class="comment">      boolean knows(int a, int b); */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">Relation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCelebrity</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> person = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(knows(person,i))&#123;</span><br><span class="line">                person = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;n ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != person &amp;&amp; (!knows(i,person) || knows(person,i)))<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>we first loop the perosn and change the candidate if the first know the second one. Because we have to make sure that candidate know nobody. Then we for loop again, only when the person is not candidate and he don’t know the candidate or the candidate know the person, we return -1. Other wise we just return the candidate that we found.</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-139-Word-Break-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white"> 139. Word Break </font></td></tr></table></h2><p><a href="https://leetcode.com/problems/word-break/" target="_blank" rel="noopener"><font size="4">đQuestion Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()+<span class="number">1</span>];</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String str : wordDict)&#123;</span><br><span class="line">            set.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j&lt;i ;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j] &amp;&amp; set.contains(s.substring(j,i)))&#123;</span><br><span class="line">                    dp[i] = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dpć´ć°0-ĺ˝ĺindexććsubstringćŻĺŚĺşç°čżă</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-399-Evaluate-Division-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">399. Evaluate Division</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/evaluate-division/" target="_blank" rel="noopener"><font size="4">đQuestion Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span>[] calcEquation(List&lt;List&lt;String&gt;&gt; eq, <span class="keyword">double</span>[] vals, List&lt;List&lt;String&gt;&gt; q) &#123;</span><br><span class="line">        Map&lt;String, Map&lt;String, Double&gt;&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vals.length; i++) &#123;</span><br><span class="line">            m.putIfAbsent(eq.get(i).get(<span class="number">0</span>), <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">            m.putIfAbsent(eq.get(i).get(<span class="number">1</span>), <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">            m.get(eq.get(i).get(<span class="number">0</span>)).put(eq.get(i).get(<span class="number">1</span>), vals[i]);</span><br><span class="line">            m.get(eq.get(i).get(<span class="number">1</span>)).put(eq.get(i).get(<span class="number">0</span>), <span class="number">1</span> / vals[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span>[] r = <span class="keyword">new</span> <span class="keyword">double</span>[q.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q.size(); i++)</span><br><span class="line">            r[i] = dfs(q.get(i).get(<span class="number">0</span>), q.get(i).get(<span class="number">1</span>), <span class="number">1</span>, m, <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dfs</span><span class="params">(String s, String t, <span class="keyword">double</span> r, Map&lt;String, Map&lt;String, Double&gt;&gt; m, Set&lt;String&gt; seen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!m.containsKey(s) || !seen.add(s)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s.equals(t)) <span class="keyword">return</span> r;</span><br><span class="line">        Map&lt;String, Double&gt; next = m.get(s);</span><br><span class="line">        <span class="keyword">for</span> (String c : next.keySet()) &#123;</span><br><span class="line">            <span class="keyword">double</span> result = dfs(c, t, r * next.get(c), m, seen);</span><br><span class="line">            <span class="keyword">if</span> (result != -<span class="number">1</span>) <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ç°ććŻä¸Şĺ­ćŻĺŻšĺşçĺłçłťĺ­čżmăĺDFSćžqueryéç¸ĺŻšĺşçä¸¤ä¸Şäšé´çĺźă</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-990-Satisfiability-of-Equality-Equations-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">990. Satisfiability of Equality Equations</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/satisfiability-of-equality-equations/" target="_blank" rel="noopener"><font size="4">đQuestion Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] UF = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equationsPossible</span><span class="params">(String[] equations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(equations.length == <span class="number">0</span> || equations == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// corner case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            UF[i] = i;<span class="comment">//initialize UF array.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String str : equations)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(<span class="number">1</span>) == <span class="string">'='</span>)&#123;</span><br><span class="line">                UF[find(str.charAt(<span class="number">0</span>)-<span class="string">'a'</span>)] = find(str.charAt(<span class="number">3</span>)-<span class="string">'a'</span>);<span class="comment">// link the two == chars</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String str : equations)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(<span class="number">1</span>) == <span class="string">'!'</span>)&#123; <span class="comment">//check whether two chars in != case have the same root</span></span><br><span class="line">                <span class="keyword">if</span>(UF[find(str.charAt(<span class="number">0</span>)-<span class="string">'a'</span>)] == find(str.charAt(<span class="number">3</span>)-<span class="string">'a'</span>))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123; <span class="comment">// create find function.</span></span><br><span class="line">        <span class="keyword">if</span>(a != UF[a])UF[a] = find(UF[a]);</span><br><span class="line">        <span class="keyword">return</span> UF[a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UnionFindăCreate a UF graph to store the first and second char in equations. In ‘==’ case, we update the UF of first char. In ‘!=’ case, if we find that the two char has the same root, then return false.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-734-Sentence-Similarity-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;734. Sentence Similarity&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/sentence-similarity/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;đQuestion Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;areSentencesSimilar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] words1, String[] words2, List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; pairs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(words1.length != words2.length)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Map&amp;lt;String,Set&amp;lt;String&amp;gt;&amp;gt; map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(List&amp;lt;String&amp;gt; str : pairs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.putIfAbsent(str.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.putIfAbsent(str.get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;),&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(str.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)).add(str.get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(str.get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)).add(str.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; words1.length ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(words1[i].equals(words2[i]))&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!map.containsKey(words1[i]))&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!map.get(words1[i]).contains(words2[i]))&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Using map to store the key-value of each string in the pairs. Then we loop the word1 and words2, only when two stirng is equal or map contains each other then we can continue to loop. Other wise we return fasle.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="DP" scheme="WangHngLeee.github.io/tags/DP/"/>
    
      <category term="Union-Find" scheme="WangHngLeee.github.io/tags/Union-Find/"/>
    
      <category term="DFS" scheme="WangHngLeee.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 88 💪</title>
    <link href="WangHngLeee.github.io/2020/03/10/chin-up-26/"/>
    <id>WangHngLeee.github.io/2020/03/10/chin-up-26/</id>
    <published>2020-03-10T15:13:23.000Z</published>
    <updated>2020-03-13T23:02:39.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-304-Range-Sum-Query-2D-Immutable-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">304. Range Sum Query 2D - Immutable</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/range-sum-query-2d-immutable/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumMatrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span>; i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ;j&lt;=n ;j++)&#123;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>] - dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + matrix[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRegion</span><span class="params">(<span class="keyword">int</span> row1, <span class="keyword">int</span> col1, <span class="keyword">int</span> row2, <span class="keyword">int</span> col2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> iMin = Math.min(row1, row2);</span><br><span class="line">        <span class="keyword">int</span> iMax = Math.max(row1, row2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> jMin = Math.min(col1, col2);</span><br><span class="line">        <span class="keyword">int</span> jMax = Math.max(col1, col2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[iMax + <span class="number">1</span>][jMax + <span class="number">1</span>] - dp[iMax + <span class="number">1</span>][jMin] - dp[iMin][jMax + <span class="number">1</span>] + dp[iMin][jMin];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dp存当前位置构成的方形内所有的和，在计算时由于dp[i-1][j-1]加了两次，要减去一次，然后加上当前的值matrix[i][j]。<br>在计算sum的时候，最右下位置的和减去最小行、最小列对应的和值，由于左上的值被减了两次，要加回来一次。<br><img src="https://i.imgur.com/gQ2jkLB.jpg"></p><a id="more"></a><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-221-Maximal-Square-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">221. Maximal Square</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/maximal-square/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j-<span class="number">1</span>], Math.min(dp[i][j-<span class="number">1</span>], dp[i-<span class="number">1</span>][j]))+<span class="number">1</span>;</span><br><span class="line">                    max = Math.max(max,dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max*max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dp[i][j]表示位于右下角(i, j)的正方形的边长长度。<br>如果此单元格的值也是1，则正方形最小长度其上方的值，左侧和对角线左上值中的最小值+1。因为如果一侧短或缺失，则不会形成正方形。</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1277-Count-Square-Submatrices-with-All-One-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1277. Count Square Submatrices with All One</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/count-square-submatrices-with-all-ones/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSquares</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; m ;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;n ;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; j &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        matrix[i][j] = Math.min(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>], Math.min(matrix[i][j-<span class="number">1</span>],matrix[i-<span class="number">1</span>][j]))+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res+=matrix[i][j];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>matrix保存每个位置能够组成正方形的最小边长，其实把所有情况的最小边长加起来就是正方形的个数。</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">309. Best Time to Buy and Sell Stock with Cooldown</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sell = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> prevsell = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> buy = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> prevbuy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> price : prices)&#123;</span><br><span class="line">            prevbuy = buy;</span><br><span class="line">            buy = Math.max(prevsell - price, prevbuy);</span><br><span class="line">            prevsell = sell;</span><br><span class="line">            sell = Math.max(prevbuy + price, prevsell);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sell;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>buy–目前买完之后最大剩余值，sell–目前卖完最大剩余值，prevbuy–上次操作之后剩余值，prevsell–上次操作之后剩余值。<br>更新buy，要求最大剩余值，所以要和prevsell-price比较。更新sell，要求最大卖出值，所以 prevbuy + price比较。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-304-Range-Sum-Query-2D-Immutable-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;304. Range Sum Query 2D - Immutable&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/range-sum-query-2d-immutable/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NumMatrix&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NumMatrix&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] matrix)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(matrix == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || matrix.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m = matrix.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = matrix[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[m+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;=m;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ;j&amp;lt;=n ;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i][j] = dp[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j] + dp[i][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] - dp[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] + matrix[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sumRegion&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; iMin = Math.min(row1, row2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; iMax = Math.max(row1, row2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; jMin = Math.min(col1, col2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; jMax = Math.max(col1, col2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[iMax + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][jMax + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] - dp[iMax + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][jMin] - dp[iMin][jMax + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] + dp[iMin][jMin];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;dp存当前位置构成的方形内所有的和，在计算时由于dp[i-1][j-1]加了两次，要减去一次，然后加上当前的值matrix[i][j]。&lt;br&gt;
在计算sum的时候，最右下位置的和减去最小行、最小列对应的和值，由于左上的值被减了两次，要加回来一次。&lt;br&gt;
&lt;img src=&quot;https://i.imgur.com/gQ2jkLB.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="DP" scheme="WangHngLeee.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Contest 179 🏆</title>
    <link href="WangHngLeee.github.io/2020/03/07/contest05/"/>
    <id>WangHngLeee.github.io/2020/03/07/contest05/</id>
    <published>2020-03-08T04:02:09.000Z</published>
    <updated>2020-03-09T01:31:22.991Z</updated>
    
    <content type="html"><![CDATA[<p>本次三题。</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-1374-Generate-a-String-With-Characters-That-Have-Odd-Counts-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">1374. Generate a String With Characters That Have Odd Counts</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateTheString</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> )<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> k = n-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; k ;i++)&#123;</span><br><span class="line">                sb.append(<span class="string">"a"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">"b"</span>);</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;n ;i++)&#123;</span><br><span class="line">                sb.append(<span class="string">"a"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是判断n的奇偶性，如果奇数全部加a，如果偶数则在最后一位加b就行了。题目描述不清。</p><a id="more"></a><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1375-Bulb-Switcher-III-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1375. Bulb Switcher III</font> </td></tr></table></h2><p><a href="https://leetcode.com/problems/rank-teams-by-votes/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTimesAllBlue</span><span class="params">(<span class="keyword">int</span>[] light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = light.length;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len; i++)&#123;</span><br><span class="line">            right = Math.max(right,light[i]);</span><br><span class="line">            <span class="keyword">if</span>(right == i+<span class="number">1</span>)res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>维护最右的灯泡编号，如果当前index+1等于最右的灯泡编号，则说明左边全部点亮，res++。因为index反映了点亮了多少灯泡，而灯泡不可能重复，所以在最右编号不变的情况下，如果index+1等于最右编号(编号从1开始所以要+1)，说明左边全部点过，res++。</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1376-Time-Needed-to-Inform-All-Employees-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1376. Time Needed to Inform All Employees</font> </td></tr></table></h2><p><a href="https://leetcode.com/problems/time-needed-to-inform-all-employees/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numOfMinutes</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> headID, <span class="keyword">int</span>[] manager, <span class="keyword">int</span>[] informTime)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;manager.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(manager[i]!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!map.containsKey(manager[i]))&#123;</span><br><span class="line">                    map.put(manager[i],<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                &#125;</span><br><span class="line">                map.get(manager[i]).add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(headID);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;size ; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(manager[temp]!=-<span class="number">1</span>)&#123; <span class="comment">// 避开head的位置，从不是head的time开始累加。</span></span><br><span class="line">                    informTime[temp]+=informTime[manager[temp]];</span><br><span class="line">                &#125;</span><br><span class="line">                max = Math.max(max,informTime[temp]);</span><br><span class="line">                <span class="keyword">if</span>(map.get(temp)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> num : map.get(temp))&#123;</span><br><span class="line">                        queue.add(num);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接裸BFS。更新informTime的值，使其成为累计和。最后返回其中的max。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本次三题。&lt;/p&gt;
&lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-1374-Generate-a-String-With-Characters-That-Have-Odd-Counts-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;1374. Generate a String With Characters That Have Odd Counts&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;generateTheString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; )&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StringBuilder sb = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; k ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sb.append(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sb.append(&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sb.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i&amp;lt;n ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sb.append(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sb.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是判断n的奇偶性，如果奇数全部加a，如果偶数则在最后一位加b就行了。题目描述不清。&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly Contest" scheme="WangHngLeee.github.io/categories/Weekly-Contest/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Contest" scheme="WangHngLeee.github.io/tags/Contest/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 87 💪</title>
    <link href="WangHngLeee.github.io/2020/03/06/chin-up-25/"/>
    <id>WangHngLeee.github.io/2020/03/06/chin-up-25/</id>
    <published>2020-03-06T16:13:23.000Z</published>
    <updated>2020-03-13T20:43:12.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-992-Subarrays-with-K-Different-Integers-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">992. Subarrays with K Different Integers</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/subarrays-with-k-different-integers/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subarraysWithKDistinct</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> help(A,K) - help(A,K-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">help</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span></span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; A.length ;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.getOrDefault(A[j], <span class="number">0</span>) == <span class="number">0</span>) K--;</span><br><span class="line">            map.put(A[j],map.getOrDefault(A[j],<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(K&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                map.put(A[i],map.get(A[i])-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(map.get(A[i]) == <span class="number">0</span>)K++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += j-i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正好有K个 = 最多K个的情况减去最多K-1的情况。</p><a id="more"></a><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-15-3Sum-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">15. 3Sum</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/3sum/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || i&gt;<span class="number">0</span> &amp;&amp; nums[i] != nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> low = i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> high = nums.length -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> target = <span class="number">0</span> - nums[i];</span><br><span class="line">                <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[low] + nums[high] == target)&#123;</span><br><span class="line">                        res.add(Arrays.asList(nums[low],nums[high],nums[i]));</span><br><span class="line">                        <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[low]==nums[low + <span class="number">1</span>])low++;</span><br><span class="line">                        <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[high ] == nums[high-<span class="number">1</span>])high--;</span><br><span class="line">                        low++;</span><br><span class="line">                        high--;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[low] + nums[high] &lt; target)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[low] == nums[low]+<span class="number">1</span>)low++;</span><br><span class="line">                        low++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[high] == nums[high-<span class="number">1</span>])high--;</span><br><span class="line">                        high--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四遍。two pointers基本思路。注意判断有重复数字的情况。</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-167-Two-Sum-II-Input-array-is-sorted-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">167. Two Sum II - Input array is sorted</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(numbers == <span class="keyword">null</span> || numbers.length&lt;<span class="number">2</span>)<span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = numbers.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = numbers[left] + numbers[right];</span><br><span class="line">            <span class="keyword">if</span>(temp == target)&#123;</span><br><span class="line">                res[<span class="number">0</span>] = left+<span class="number">1</span>;</span><br><span class="line">                res[<span class="number">1</span>] = right+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;target)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>two pointers。注意最后返回index要+1.</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-16-3Sum-Closest-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">16. 3Sum Closest</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/3sum-closest/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> sum = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[nums.length-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> closetsum = sum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;nums.length-<span class="number">2</span> ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || i&gt;<span class="number">0</span> &amp;&amp; nums[i] != nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> left = i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> right = nums.length -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum &lt; target)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>])left++;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; target)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right-<span class="number">1</span>])right--;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> sum;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(Math.abs(target - closetsum) &gt; Math.abs(target-sum))&#123;</span><br><span class="line">                        closetsum = sum;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closetsum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 sum变种。只需要多维护一个临时的sum值，和closetsum比较更新就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-992-Subarrays-with-K-Different-Integers-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;992. Subarrays with K Different Integers&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/subarrays-with-k-different-integers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;subarraysWithKDistinct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] A, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; K)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; help(A,K) - help(A,K-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] A, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; K)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Map&amp;lt;Integer, Integer&amp;gt; map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ans = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; j &amp;lt; A.length ;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (map.getOrDefault(A[j], &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) K--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.put(A[j],map.getOrDefault(A[j],&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(K&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                map.put(A[i],map.get(A[i])-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(map.get(A[i]) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)K++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ans += j-i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正好有K个 = 最多K个的情况减去最多K-1的情况。&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="TwoPointer" scheme="WangHngLeee.github.io/tags/TwoPointer/"/>
    
  </entry>
  
</feed>
