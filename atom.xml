<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leee&#39;s World</title>
  
  <subtitle>Talk is Cheap. Show me the code.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="WangHngLeee.github.io/"/>
  <updated>2020-07-22T05:27:38.047Z</updated>
  <id>WangHngLeee.github.io/</id>
  
  <author>
    <name>HongLeee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Review Problems List 📌</title>
    <link href="WangHngLeee.github.io/9999/12/31/problemslist/"/>
    <id>WangHngLeee.github.io/9999/12/31/problemslist/</id>
    <published>9999-12-31T16:13:23.000Z</published>
    <updated>2020-07-22T05:27:38.047Z</updated>
    
    <content type="html"><![CDATA[<br><font size="3"> 记录Problems list的完成情况 每日更新。<br><a href="https://docs.google.com/spreadsheets/d/1SwcfcnOXL_7lbdqZm8dia_WU20aQ-ZTjGf4G0oJ6qpA/edit#gid=972946549" target="_blank" rel="noopener"><font size="4">🔗 Problems List  Link </font></a><br>Github Leetcode Summary 同步更新。<br><a href="https://github.com/WangHngLeee/LeetcodeSummary" target="_blank" rel="noopener"><font size="4">🔗 Github Summary Link </font></a><br></font><br><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;
&lt;font size=&quot;3&quot;&gt; 记录Problems list的完成情况 每日更新。&lt;br&gt;
&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1SwcfcnOXL_7lbdqZm8dia_WU20aQ-ZTjGf4G0oJ
      
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Problems List" scheme="WangHngLeee.github.io/tags/Problems-List/"/>
    
  </entry>
  
  <entry>
    <title>Review | Hard | 992. Subarrays with K Different Integers</title>
    <link href="WangHngLeee.github.io/2020/08/07/992.%20Subarrays%20with%20K%20Different%20Integers/"/>
    <id>WangHngLeee.github.io/2020/08/07/992. Subarrays with K Different Integers/</id>
    <published>2020-08-07T22:27:29.000Z</published>
    <updated>2020-08-07T23:50:13.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-992-Subarrays-with-K-Different-Integers-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">992. Subarrays with K Different Integers</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/subarrays-with-k-different-integers/"><font size="4">🔗  LeetCode Link </font></a></p><h3 id="Example">Example</h3><p>Given an array <code>A</code> of positive integers, call a (contiguous, not necessarily distinct) subarray of <code>A</code> <em>good</em> if the number of different integers in that subarray is exactly <code>K</code>.</p><p>(For example, <code>[1,2,3,1,2]</code> has <code>3</code> different integers: <code>1</code>, <code>2</code>, and <code>3</code>.)</p><p>Return the number of good subarrays of <code>A</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A = [1,2,1,2,3], K = 2</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A = [1,2,1,3,4], K = 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li><code>1 &lt;= A.length &lt;= 20000</code></li><li><code>1 &lt;= A[i] &lt;= A.length</code></li><li><code>1 &lt;= K &lt;= A.length</code></li></ol><a id="more"></a><h3 id="Solution">Solution</h3><p>It’s a bit different from previous <code> at most K different/distinct</code> problem. This question need just<code>K</code> different integers.</p><p>However, it’s straightforward to prove that <code>Just(K) = AtMost(K) - AtMost(K-1)</code>, so we can call the <a href="https://leeemask.com/2020/08/07/340.%20Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/" target="_blank" rel="noopener">previous kinda code</a> twice and substract them then will get the res.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subarraysWithKDistinct</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> help(A,K) - help(A,K-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">help</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span></span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; A.length ;j++)&#123;</span><br><span class="line">            map.put(A[j],map.getOrDefault(A[j],<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(map.size() &gt; K)&#123;</span><br><span class="line">                map.put(A[i],map.get(A[i])-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(map.get(A[i]) == <span class="number">0</span>)&#123;</span><br><span class="line">                    map.remove(A[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += j-i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(N)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-992-Subarrays-with-K-Different-Integers-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;992. Subarrays with K Different Integers&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/subarrays-with-k-different-integers/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  LeetCode Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given an array &lt;code&gt;A&lt;/code&gt; of positive integers, call a (contiguous, not necessarily distinct) subarray of &lt;code&gt;A&lt;/code&gt; &lt;em&gt;good&lt;/em&gt; if the number of different integers in that subarray is exactly &lt;code&gt;K&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(For example, &lt;code&gt;[1,2,3,1,2]&lt;/code&gt; has &lt;code&gt;3&lt;/code&gt; different integers: &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, and &lt;code&gt;3&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Return the number of good subarrays of &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: A = [1,2,1,2,3], K = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: A = [1,2,1,3,4], K = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= A.length &amp;lt;= 20000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= A[i] &amp;lt;= A.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= K &amp;lt;= A.length&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Two Pointers" scheme="WangHngLeee.github.io/tags/Two-Pointers/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 340. Longest Substring with At Most K Distinct Characters</title>
    <link href="WangHngLeee.github.io/2020/08/07/340.%20Longest%20Substring%20with%20At%20Most%20K%20Distinct%20Characters/"/>
    <id>WangHngLeee.github.io/2020/08/07/340. Longest Substring with At Most K Distinct Characters/</id>
    <published>2020-08-07T19:30:29.000Z</published>
    <updated>2020-08-07T23:50:38.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-340-Longest-Substring-with-At-Most-K-Distinct-Characters-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">340. Longest Substring with At Most K Distinct Characters</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/"><font size="4">🔗  Leetcode Link</font></a></p><h3 id="Examples">Examples</h3><p>Given a string, find the length of the longest substring T that contains at most <em>k</em> distinct characters.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;eceba&quot;, k = 2</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: T is &quot;ece&quot; which its length is 3.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;aa&quot;, k = 1</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: T is &quot;aa&quot; which its length is 2.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Typical sliding window question. Using <code>left</code> and <code>right</code> pointer to scan the string, and keep each character’s frequency in a <code>HashMap</code>.</p><p>When the size of map <code>( which is also the total num of distinct characters)</code> is greater than k, we need to substract chars from left.</p><p>When the <code>map size &lt;= 2</code>, we update the res.</p><p>This question can share the same code template with question <a href="https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/" target="_blank" rel="noopener">159. Longest Substring with At Most Two Distinct Characters</a></p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstringKDistinct</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//corner case</span></span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() ==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> right =<span class="number">0</span>; right &lt; s.length(); right++)&#123;</span><br><span class="line">            <span class="keyword">char</span> temp = s.charAt(right);</span><br><span class="line">            map.put(temp, map.getOrDefault(temp,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(map.size() &gt; k)&#123;</span><br><span class="line">                <span class="keyword">char</span> leftchar = s.charAt(left);</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(leftchar))&#123;</span><br><span class="line">                    map.put(leftchar,map.get(leftchar)-<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(map.get(leftchar) == <span class="number">0</span>)&#123;</span><br><span class="line">                        map.remove(leftchar);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, right - left+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(N)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-340-Longest-Substring-with-At-Most-K-Distinct-Characters-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;340. Longest Substring with At Most K Distinct Characters&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given a string, find the length of the longest substring T that contains at most &lt;em&gt;k&lt;/em&gt; distinct characters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: s = &amp;quot;eceba&amp;quot;, k = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: T is &amp;quot;ece&amp;quot; which its length is 3.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: s = &amp;quot;aa&amp;quot;, k = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: T is &amp;quot;aa&amp;quot; which its length is 2.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Two Pointers" scheme="WangHngLeee.github.io/tags/Two-Pointers/"/>
    
      <category term="String" scheme="WangHngLeee.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 3. Longest Substring Without Repeating Characters</title>
    <link href="WangHngLeee.github.io/2020/08/07/3.%20Longest%20Substring%20Without%20Repeating%20Characters/"/>
    <id>WangHngLeee.github.io/2020/08/07/3. Longest Substring Without Repeating Characters/</id>
    <published>2020-08-07T14:30:29.000Z</published>
    <updated>2020-08-07T22:34:24.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-3-Longest-Substring-Without-Repeating-Characters-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">3. Longest Substring Without Repeating Characters</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/longest-substring-without-repeating-characters/"><font size="4">🔗  Leetcode Link</font></a></p><h3 id="Examples">Examples</h3><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;abcabcbb&quot;</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3. </span><br><span class="line">             Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Using two pointers and HashSet to store the current chars. It set contains current char, it means we have seen this before, then move the left point. Update the max after we add a char to the set.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; s.length() &amp;&amp; right &lt;s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(s.charAt(right)))&#123;</span><br><span class="line">                set.add(s.charAt(right));</span><br><span class="line">                right++;</span><br><span class="line">                max = Math.max(max,set.size());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.remove(s.charAt(left));</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(N)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-3-Longest-Substring-Without-Repeating-Characters-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;3. Longest Substring Without Repeating Characters&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given a string, find the length of the &lt;strong&gt;longest substring&lt;/strong&gt; without repeating characters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: &amp;quot;abcabcbb&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The answer is &amp;quot;abc&amp;quot;, with the length of 3.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: &amp;quot;bbbbb&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The answer is &amp;quot;b&amp;quot;, with the length of 1.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: &amp;quot;pwwkew&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The answer is &amp;quot;wke&amp;quot;, with the length of 3. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             Note that the answer must be a substring, &amp;quot;pwke&amp;quot; is a subsequence and not a substring.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Two Pointers" scheme="WangHngLeee.github.io/tags/Two-Pointers/"/>
    
      <category term="String" scheme="WangHngLeee.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 5. Longest Palindromic Substring</title>
    <link href="WangHngLeee.github.io/2020/08/06/5.%20Longest%20Palindromic%20Substring/"/>
    <id>WangHngLeee.github.io/2020/08/06/5. Longest Palindromic Substring/</id>
    <published>2020-08-06T20:30:29.000Z</published>
    <updated>2020-08-07T22:27:54.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-5-Longest-Palindromic-Substring-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">5. Longest Palindromic Substring</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/longest-palindromic-substring/"><font size="4">🔗  Leetcode Link</font></a></p><h3 id="Examples">Examples</h3><p>Given a string s, find the longest palindromic subsequence’s length in s. You may assume that the maximum length of s is 1000.</p><p><strong>Example 1:</strong><br>Input:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;bbbab&quot;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>One possible longest palindromic subsequence is “bbbb”.</p><p><strong>Example 2:</strong><br>Input:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;cbbd&quot;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>One possible longest palindromic subsequence is “bb”.</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> consists only of lowercase English letters.</li></ul><a id="more"></a><h3 id="Solution">Solution</h3><h4 id="Two-Pointers">Two Pointers</h4><p>The first navie solution is using two pointers to scan both 1 chars or 2 chars from itself. Like <code>aabbaabb</code> we can start scaling from <code>a</code> or <code>aa</code>, because palindrome can only form with 1 or 2 chars.( 3 is based on 1).</p><h4 id="DP">DP</h4><p>It can also be solved by using DP.</p><p>It’s a bit like problem <a href="[https://leeemask.com/2020/08/06/516.%20Longest%20Palindromic%20Subsequence/](https://leeemask.com/2020/08/06/516. Longest Palindromic Subsequence/)">516. Longest Palindromic Subsequence</a> . We expand from inside to outside.</p><p>The only difference in this question is that : we only keep record of boolean array to see whether <code>dp[i][j]</code> can form a palindrome substring from <code>i</code> to <code>j</code>.</p><p>Only the situation meet the requirements of following can be a palindrome substring:</p><ul><li><p><code>s.charAt(i) == s.charAt(j)</code>: Two chars need to be same.</p></li><li><p><code>j-i&lt;3</code>: means only 2 or 1 letters in the current range. Like <code>aa</code> or <code>a</code>.</p></li><li><p><code>dp[i+1][j-1] = true </code> : It means that the smaller range from i+1 to j-1 can form a palindrome, so the current range from <code>i</code> to <code>j</code> can also be true.</p></li></ul><p>After updating the current dp state, we need to update the max length of substring and the start point. FInally we just return the substring from <code>start</code> to <code>start + max</code>.</p><h3 id="Code">Code</h3><h4 id="Two-Pointers-v2">Two Pointers</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start, max;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            check(s,i,i);</span><br><span class="line">            check(s,i,i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start,start + max);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>( left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right))&#123;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(right - left &gt; max)&#123;</span><br><span class="line">            max = right - left - <span class="number">1</span>;</span><br><span class="line">            start = left + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(N)</p><h4 id="DP-v2">DP</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">1</span>; i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;n;j++)&#123;</span><br><span class="line">                dp[i][j] = ( s.charAt(i) == s.charAt(j) &amp;&amp; ( j-i&lt;<span class="number">3</span> || dp[i+<span class="number">1</span>][j-<span class="number">1</span>] ));</span><br><span class="line">                <span class="keyword">if</span>(dp[i][j] &amp;&amp; (j-i+<span class="number">1</span> &gt; max))&#123;</span><br><span class="line">                    max = j - i + <span class="number">1</span>;</span><br><span class="line">                    start = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, start + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(N)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-5-Longest-Palindromic-Substring-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;5. Longest Palindromic Substring&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given a string s, find the longest palindromic subsequence’s length in s. You may assume that the maximum length of s is 1000.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
Input:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;bbbab&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;One possible longest palindromic subsequence is “bbbb”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;
Input:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;cbbd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;One possible longest palindromic subsequence is “bb”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; consists only of lowercase English letters.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Two Pointers" scheme="WangHngLeee.github.io/tags/Two-Pointers/"/>
    
      <category term="String" scheme="WangHngLeee.github.io/tags/String/"/>
    
      <category term="DP" scheme="WangHngLeee.github.io/tags/DP/"/>
    
      <category term="Palindromic" scheme="WangHngLeee.github.io/tags/Palindromic/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 516. Longest Palindromic Subsequence</title>
    <link href="WangHngLeee.github.io/2020/08/06/516.%20Longest%20Palindromic%20Subsequence/"/>
    <id>WangHngLeee.github.io/2020/08/06/516. Longest Palindromic Subsequence/</id>
    <published>2020-08-06T14:30:29.000Z</published>
    <updated>2020-08-06T21:40:14.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-516-Longest-Palindromic-Subsequence-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">516. Longest Palindromic Subsequence</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/longest-palindromic-subsequence/"><font size="4">🔗  Leetcode Link</font></a></p><h3 id="Exapmles">Exapmles</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given a string s, find the longest palindromic subsequence&apos;s length in s. You may assume that the maximum length of s is 1000.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line">Input:</span><br><span class="line"></span><br><span class="line">&quot;bbbab&quot;</span><br><span class="line">Output:</span><br><span class="line">4</span><br><span class="line">One possible longest palindromic subsequence is &quot;bbbb&quot;.</span><br><span class="line"> </span><br><span class="line">Example 2:</span><br><span class="line">Input:</span><br><span class="line"></span><br><span class="line">&quot;cbbd&quot;</span><br><span class="line">Output:</span><br><span class="line">2</span><br><span class="line">One possible longest palindromic subsequence is &quot;bb&quot;.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>It’s a typical palindromic string problem. When we see subsequence instead of substring, it means it can be interruptted and not continous, and we always using <code>DP </code> to solve that kind of uncontinous problem.</p><p>We first create a <code>two-dimension DP array</code> to store the length.</p><p><code>dp[i][j]</code> means the max palindromic subsequence between start of <code>i</code> and end of<code>j</code> in the string <code>s</code></p><p><code>Transition Function</code> :</p><ol><li>When <code>s.charAt(i) == s.charAt(j) </code>  :  <code>dp[i][j] = dp[i+1][j-1] + 2</code><ul><li>It looks like we expand the range of current <code>i+1, j-1</code> to <code>i,j</code>, which is extremely like two pointers , one with left+1, and one with right-1. Instead, in this problem we solve from inside to outside.</li></ul></li><li>When <code>s.charAt(i) != s.charAt(j) </code>  : <code>dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1])</code><ul><li>If ther are not the same, we just choosing the range from <code>left+1,right</code> or <code>left,right-1</code> because the subsequence can be interuppted.</li></ul></li></ol><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i) == s.charAt(j))&#123;</span><br><span class="line">                    dp[i][j] = dp[i+<span class="number">1</span>][j-<span class="number">1</span>] +<span class="number">2</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i+<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N^2) S:O(N^2)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-516-Longest-Palindromic-Subsequence-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;516. Longest Palindromic Subsequence&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/longest-palindromic-subsequence/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Exapmles&quot;&gt;Exapmles&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Given a string s, find the longest palindromic subsequence&amp;apos;s length in s. You may assume that the maximum length of s is 1000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;bbbab&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;One possible longest palindromic subsequence is &amp;quot;bbbb&amp;quot;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;cbbd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;One possible longest palindromic subsequence is &amp;quot;bb&amp;quot;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="String" scheme="WangHngLeee.github.io/tags/String/"/>
    
      <category term="DP" scheme="WangHngLeee.github.io/tags/DP/"/>
    
      <category term="Palindromic" scheme="WangHngLeee.github.io/tags/Palindromic/"/>
    
  </entry>
  
  <entry>
    <title>Review | Hard | 23. Merge k Sorted Lists</title>
    <link href="WangHngLeee.github.io/2020/08/03/23.%20Merge%20k%20Sorted%20Lists/"/>
    <id>WangHngLeee.github.io/2020/08/03/23. Merge k Sorted Lists/</id>
    <published>2020-08-04T00:27:29.000Z</published>
    <updated>2020-08-04T02:30:15.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-23-Merge-k-Sorted-Lists-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">23. Merge k Sorted Lists</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/merge-k-sorted-lists/"><font size="4">🔗  LeetCode Link </font></a></p><h3 id="Example">Example</h3><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Using self-design <code>PriorityQueue</code> to store each head of <code>list</code> in the <code>lists</code>. Then loop each head and add their next listnode into the priorityqueue. Finally we can get a sorted linkedlist.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lists == <span class="keyword">null</span> || lists.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode head = dummy;</span><br><span class="line">        PriorityQueue&lt;ListNode&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a,b)-&gt; a.val - b.val);</span><br><span class="line">        <span class="keyword">for</span>(ListNode list : lists)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list != <span class="keyword">null</span>)&#123;</span><br><span class="line">                pq.add(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">            head.next = pq.poll();</span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="keyword">if</span>(head.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                pq.add(head.next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(N)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-23-Merge-k-Sorted-Lists-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;23. Merge k Sorted Lists&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/merge-k-sorted-lists/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  LeetCode Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1-&amp;gt;4-&amp;gt;5,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1-&amp;gt;3-&amp;gt;4,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2-&amp;gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="LinkedList" scheme="WangHngLeee.github.io/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>Review | Hard | 4. Median of Two Sorted Arrays</title>
    <link href="WangHngLeee.github.io/2020/08/03/4.%20Median%20of%20Two%20Sorted%20Arrays/"/>
    <id>WangHngLeee.github.io/2020/08/03/4. Median of Two Sorted Arrays/</id>
    <published>2020-08-03T22:27:29.000Z</published>
    <updated>2020-08-05T00:03:59.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-4-Median-of-Two-Sorted-Arrays-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">4. Median of Two Sorted Arrays</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/median-of-two-sorted-arrays/"><font size="4">🔗  LeetCode Link </font></a></p><h3 id="Example">Example</h3><p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume nums1 and nums2 cannot be both empty.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line">The median is 2.0</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line"></span><br><span class="line">The median is (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><h4 id="Brute-force">Brute force</h4><p>The first solution we can come up with is getting two arrays into one and sort the final array, then try to get the middle index number. But it will cost <code>O(nlogn)</code>, which doesn’t meet the time complexity requirement of <code>log(m+n)</code>.</p><p>Apparently, the <code>O(log(n+m))</code> can be approached only by <code>Binary Search</code>.</p><h4 id="Binary-Search">Binary Search</h4><p>Idea copied from <a href="https://leetcode.com/yaokaiyang" target="_blank" rel="noopener">@YaokaiYang<br></a></p><p>In order to solve this question, we need to first understand what a median is. A median is the middle value of a dataset.</p><p>Since we have 2 seperately sorted array in this question, to find the middle value is somewhat complicated. However, keep in mind that we do not care about the actual value of the numbers, what we want is the middle point from the combination of 2 arrays. In other words, we are looking for the middle index of the 2 arrays. Thus approach like binary search could be employed.</p><p>Based on the fact that the 2 arrays are sorted seperatedly, we could try to get the submedian of the 2 arrays in each round. Than compare them. And the basic idea is that the left half of the array with a smaller submedian can never contains the common median.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (mid1 &lt; mid2) keep nums1.right + nums2</span><br><span class="line">else keep nums1 + nums2.right</span><br></pre></td></tr></table></figure><h3 id="Code">Code</h3><h4 id="Navie-Brute-Force">Navie Brute Force</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[m+n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;m ;i++)&#123;</span><br><span class="line">            arr[i] = nums1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j&lt;n;j++)&#123;</span><br><span class="line">            arr[m+j] = nums2[j];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">int</span> k = arr.length;</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">2</span> != <span class="number">0</span>)<span class="keyword">return</span> (<span class="keyword">double</span>)arr[k/<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">else</span>  <span class="keyword">return</span> ((<span class="keyword">double</span>)(arr[(k/<span class="number">2</span>) - <span class="number">1</span>] + arr[(k/<span class="number">2</span>)])/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(NlogN) S:O(N)</p><h4 id="Binary-Search-v2">Binary Search</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line">        <span class="keyword">int</span> left = (m + n + <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> right = (m + n + <span class="number">2</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (help(nums1,<span class="number">0</span>,nums2,<span class="number">0</span>,left) + help(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, right)) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">help</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> s1, <span class="keyword">int</span>[]nums2, <span class="keyword">int</span> s2, <span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( s1 &gt; nums1.length-<span class="number">1</span>)<span class="keyword">return</span> nums2[s2 + position - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>( s2 &gt; nums2.length-<span class="number">1</span>)<span class="keyword">return</span> nums1[s1 + position - <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(position == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[s1], nums2[s2]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> mid1 = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> mid2 = Integer.MAX_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s1 + position/<span class="number">2</span> - <span class="number">1</span> &lt; nums1.length)mid1 = nums1[s1 + position/<span class="number">2</span> -<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s2 + position/<span class="number">2</span> - <span class="number">1</span> &lt; nums2.length)mid2 = nums2[s2 + position/<span class="number">2</span> -<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(mid1 &lt; mid2)&#123;</span><br><span class="line">            <span class="keyword">return</span> help(nums1,s1 + position/<span class="number">2</span>, nums2, s2, position - position/<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> help(nums1,s1,nums2,s2 + position/<span class="number">2</span>, position - position/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(log(M+N)) S:O(N)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-4-Median-of-Two-Sorted-Arrays-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;4. Median of Two Sorted Arrays&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  LeetCode Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;There are two sorted arrays nums1 and nums2 of size m and n respectively.&lt;/p&gt;
&lt;p&gt;Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).&lt;/p&gt;
&lt;p&gt;You may assume nums1 and nums2 cannot be both empty.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nums1 = [1, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nums2 = [2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The median is 2.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nums1 = [1, 2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nums2 = [3, 4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The median is (2 + 3)/2 = 2.5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Review | Easy | 125. Valid Palindrome</title>
    <link href="WangHngLeee.github.io/2020/08/03/125.%20Valid%20Palindrome/"/>
    <id>WangHngLeee.github.io/2020/08/03/125. Valid Palindrome/</id>
    <published>2020-08-03T12:30:29.000Z</published>
    <updated>2020-08-03T14:07:08.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-125-Valid-Palindrome-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">125. Valid Palindrome</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/valid-palindrome/"><font size="4">LeetCode Link </font></a></p><h3 id="Examples">Examples</h3><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p><p>Note: For the purpose of this problem, we define empty string as valid palindrome…</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: &quot;race a car&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Using two pointers to scan the string from start and end. Skip all <code>unletterOrDigit</code> character like ’ ’ and ‘.’ and other signs. Then check two characters is same or not.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = s.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">char</span> l = s.charAt(left);</span><br><span class="line">            <span class="keyword">char</span> r = s.charAt(right);</span><br><span class="line">            <span class="keyword">if</span>(!Character.isLetterOrDigit(l))&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!Character.isLetterOrDigit(r))&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(Character.toLowerCase(l) != Character.toLowerCase(r))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(1)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-125-Valid-Palindrome-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;125. Valid Palindrome&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/valid-palindrome/&quot;&gt;&lt;font size=&quot;4&quot;&gt;LeetCode Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.&lt;/p&gt;
&lt;p&gt;Note: For the purpose of this problem, we define empty string as valid palindrome…&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: &amp;quot;A man, a plan, a canal: Panama&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: &amp;quot;race a car&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Two Pointers" scheme="WangHngLeee.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>Review | Easy | 359. Logger Rate Limiter</title>
    <link href="WangHngLeee.github.io/2020/08/02/359.%20Logger%20Rate%20Limiter/"/>
    <id>WangHngLeee.github.io/2020/08/02/359. Logger Rate Limiter/</id>
    <published>2020-08-02T12:30:29.000Z</published>
    <updated>2020-08-03T01:47:19.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-359-Logger-Rate-Limiter-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">359. Logger Rate Limiter</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/logger-rate-limiter/"><font size="4">LeetCode Link </font></a></p><h3 id="Examples">Examples</h3><p>Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only if it is not printed in the last 10 seconds.</p><p>Given a message and a timestamp (in seconds granularity), return true if the message should be printed in the given timestamp, otherwise returns false.</p><p>It is possible that several messages arrive roughly at the same time.</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Logger logger = new Logger();</span><br><span class="line"></span><br><span class="line">// logging string &quot;foo&quot; at timestamp 1</span><br><span class="line">logger.shouldPrintMessage(1, &quot;foo&quot;); returns true;</span><br><span class="line"></span><br><span class="line">// logging string &quot;bar&quot; at timestamp 2</span><br><span class="line">logger.shouldPrintMessage(2,&quot;bar&quot;); returns true;</span><br><span class="line"></span><br><span class="line">// logging string &quot;foo&quot; at timestamp 3</span><br><span class="line">logger.shouldPrintMessage(3,&quot;foo&quot;); returns false;</span><br><span class="line"></span><br><span class="line">// logging string &quot;bar&quot; at timestamp 8</span><br><span class="line">logger.shouldPrintMessage(8,&quot;bar&quot;); returns false;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><h4 id="Navie">Navie</h4><p>It’s obvious that we can use a <code>HashMap</code> to store each message’s timestamp. Each time we meet a previous existed message, we only need check whether <code>current timestamp - map.get(message) &gt; 10</code>, if not return false. Otherwise update the message’s timestamp and return true.</p><p>However, using hashmap in some huge date stream can cause memory usage keeps growing, which is a waste of performance. So we have to think a better solution to save memory.</p><h4 id="Cicular-buffer">Cicular buffer</h4><p>Using Set and bucket array to store at most 10 seconds before. After that we clear the set. Give each <code>timestamp % 10</code> a new set to store message.</p><h4 id="Two-HashMap">Two HashMap</h4><p><code>starttime</code> record the start time of the <code>newmap</code>.</p><p><code>newmap</code> keeps the messages of <code>[starttime, starttime +10)</code>;</p><p><code>oldmap</code> keeps messages at most <code>20</code> seconds before.</p><h3 id="Code">Code</h3><h4 id="Navie-v2">Navie</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    Map&lt;String,Integer&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Logger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldPrintMessage</span><span class="params">(<span class="keyword">int</span> timestamp, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(message))&#123;</span><br><span class="line">            map.put(message,timestamp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(timestamp - map.get(message) &lt; <span class="number">10</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            map.put(message,timestamp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(1) S:O(N)</p><h4 id="Circular-buffer">Circular buffer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] bucket;</span><br><span class="line">    Set[] sets;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Logger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sets = <span class="keyword">new</span> Set[<span class="number">10</span>];</span><br><span class="line">        bucket = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;sets.length;i++)&#123;</span><br><span class="line">            sets[i] = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldPrintMessage</span><span class="params">(<span class="keyword">int</span> timestamp, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = timestamp % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(timestamp != bucket[index])&#123;</span><br><span class="line">            sets[index].clear();</span><br><span class="line">            bucket[index] = timestamp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;bucket.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(timestamp - bucket[i] &lt; <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sets[i].contains(message))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sets[index].add(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(1) S:O(N)</p><h4 id="Two-HashMaps">Two HashMaps</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; oldmap;</span><br><span class="line">    Map&lt;String, Integer&gt; newmap;</span><br><span class="line">    <span class="keyword">int</span> startime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Logger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        oldmap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        newmap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        starttime = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldPrintMessage</span><span class="params">(<span class="keyword">int</span> timestamp, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timestamp &gt;= latest + <span class="number">20</span>)&#123; <span class="comment">// both map need refresh</span></span><br><span class="line">            oldmap.clear();</span><br><span class="line">            newmap.clear();</span><br><span class="line">            starttime = timestamp;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(timestamp &gt;= latest + <span class="number">10</span>)&#123; <span class="comment">// refresh new map and assign old map with the value of new map</span></span><br><span class="line">            oldmap = <span class="keyword">new</span> HashMap&lt;&gt;(newmap);</span><br><span class="line">            newmap.clear();</span><br><span class="line">            starttime = timestamp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(newmap.containsKey(message)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(oldmap.containsKey(message))&#123;</span><br><span class="line">            <span class="keyword">int</span> last = oldmap.get(message);</span><br><span class="line">            <span class="keyword">if</span>(last + <span class="number">10</span> &gt; timestamp) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        newmap.put(message, timestamp);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(1) S:O(N)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-359-Logger-Rate-Limiter-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;359. Logger Rate Limiter&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/logger-rate-limiter/&quot;&gt;&lt;font size=&quot;4&quot;&gt;LeetCode Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only if it is not printed in the last 10 seconds.&lt;/p&gt;
&lt;p&gt;Given a message and a timestamp (in seconds granularity), return true if the message should be printed in the given timestamp, otherwise returns false.&lt;/p&gt;
&lt;p&gt;It is possible that several messages arrive roughly at the same time.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Logger logger = new Logger();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// logging string &amp;quot;foo&amp;quot; at timestamp 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logger.shouldPrintMessage(1, &amp;quot;foo&amp;quot;); returns true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// logging string &amp;quot;bar&amp;quot; at timestamp 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logger.shouldPrintMessage(2,&amp;quot;bar&amp;quot;); returns true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// logging string &amp;quot;foo&amp;quot; at timestamp 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logger.shouldPrintMessage(3,&amp;quot;foo&amp;quot;); returns false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// logging string &amp;quot;bar&amp;quot; at timestamp 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logger.shouldPrintMessage(8,&amp;quot;bar&amp;quot;); returns false;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Design" scheme="WangHngLeee.github.io/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Review | Easy | 844. Backspace String Compare</title>
    <link href="WangHngLeee.github.io/2020/07/29/844.%20Backspace%20String%20Compare/"/>
    <id>WangHngLeee.github.io/2020/07/29/844. Backspace String Compare/</id>
    <published>2020-07-29T23:30:29.000Z</published>
    <updated>2020-07-30T02:47:33.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-844-Backspace-String-Compare-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">844. Backspace String Compare</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/backspace-string-compare/"><font size="4">🔗 LeetCode Link </font></a></p><h3 id="Examples">Examples</h3><p>Note that after backspacing an empty text, the text will continue empty.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: S = &quot;ab#c&quot;, T = &quot;ad#c&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Both S and T become &quot;ac&quot;.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: S = &quot;ab##&quot;, T = &quot;c#d#&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Both S and T become &quot;&quot;.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: S = &quot;a##c&quot;, T = &quot;#a#c&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Both S and T become &quot;c&quot;.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><h4 id="Navie">Navie</h4><p>We can using stack to simulate backspacing option. When we meet <code>#</code> we just pop up the top element in the stack. Finally we only need to compare the two stacks.</p><h4 id="Backforward">Backforward</h4><p>Starting from the last element, keep count of the <code>#</code>. If current is <code>#</code>, we increase by 1. Otherwise, if count is larger than 0, it means current char is before # and need to be deleted. If count is equal to 0, we add current char to the res.</p><h4 id="Optimized-Two-pointers-with-O-1-space">Optimized - Two pointers with O(1) space</h4><p>Follow up : Can you make up only O(1) space ?</p><p>Apparently we can only using two pointers to achieve O(1) spce without any other space.</p><p>Start from both tails, keep record the number of ‘#’.</p><p>It will eventually stop at the final char of res. Then we can check the rest of chars to see whether they are the same.</p><p>If not, we have to check whether they both have been cleaned up with index of -1.</p><h3 id="Code">Code</h3><h4 id="Navie-v2">Navie</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">backspaceCompare</span><span class="params">(String S, String T)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> help(S).equals(help(T));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Stack&lt;Character&gt; <span class="title">help</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) != <span class="string">'#'</span>)stack.push(str.charAt(i));</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!stack.isEmpty())&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(N)</p><h4 id="Backforward-v2">Backforward</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">backspaceCompare</span><span class="params">(String S, String T)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> help(S).equals(help(T));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">help</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">1</span>; i&gt;=<span class="number">0</span> ;i--)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'#'</span>)count++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(count &gt; <span class="number">0</span>)count--;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    res+=c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(N)</p><h4 id="Two-pointers">Two pointers</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">backspaceCompare</span><span class="params">(String S, String T)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(S == <span class="keyword">null</span> || T == <span class="keyword">null</span>)<span class="keyword">return</span> S == T;</span><br><span class="line">        <span class="keyword">int</span> m = S.length();</span><br><span class="line">        <span class="keyword">int</span> n = T.length();</span><br><span class="line">        <span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = m-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> || j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; (S.charAt(i) == <span class="string">'#'</span> || cnt1 &gt; <span class="number">0</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(S.charAt(i) == <span class="string">'#'</span>)cnt1++;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cnt1--;</span><br><span class="line">                &#125;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; (T.charAt(j) == <span class="string">'#'</span> || cnt2 &gt; <span class="number">0</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(T.charAt(j) == <span class="string">'#'</span>)cnt2++;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cnt2--;</span><br><span class="line">                &#125;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( j&gt;=<span class="number">0</span> &amp;&amp; i&gt;=<span class="number">0</span> &amp;&amp; S.charAt(i) == T.charAt(j))&#123;</span><br><span class="line">                j--;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> i == -<span class="number">1</span> &amp;&amp; j == -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(1)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-844-Backspace-String-Compare-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;844. Backspace String Compare&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/backspace-string-compare/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 LeetCode Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Note that after backspacing an empty text, the text will continue empty.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: S = &amp;quot;ab#c&amp;quot;, T = &amp;quot;ad#c&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Both S and T become &amp;quot;ac&amp;quot;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: S = &amp;quot;ab##&amp;quot;, T = &amp;quot;c#d#&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Both S and T become &amp;quot;&amp;quot;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input: S = &amp;quot;a##c&amp;quot;, T = &amp;quot;#a#c&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Both S and T become &amp;quot;c&amp;quot;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Two Pointers" scheme="WangHngLeee.github.io/tags/Two-Pointers/"/>
    
      <category term="String" scheme="WangHngLeee.github.io/tags/String/"/>
    
      <category term="Stack" scheme="WangHngLeee.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Review | Hard | 683. K Empty Slots</title>
    <link href="WangHngLeee.github.io/2020/07/29/683.%20K%20Empty%20Slots/"/>
    <id>WangHngLeee.github.io/2020/07/29/683. K Empty Slots/</id>
    <published>2020-07-29T19:27:29.000Z</published>
    <updated>2020-07-29T21:43:43.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-683-K-Empty-Slots"><table><tr><td bgcolor="#E74C3C"><font color="white">683. K Empty Slots</font></td></tr></table></h2><p></p><p><a href="https://leetcode.com/problems/k-empty-slots/" target="_blank" rel="noopener"><font size="4">🔗  LeetCode Link </font></a></p><h3 id="Example">Example</h3><p>You have N bulbs in a row numbered from 1 to N. Initially, all the bulbs are turned off. We turn on exactly one bulb everyday until all bulbs are on after N days.</p><p>You are given an array bulbs of length N where bulbs[i] = x means that on the (i+1)th day, we will turn on the bulb at position x where i is 0-indexed and x is 1-indexed.</p><p>Given an integer K, find out the minimum day number such that there exists two turned on bulbs that have exactly K bulbs between them that are all turned off.</p><p>If there isn’t such day, return -1.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">bulbs: [1,3,2]</span><br><span class="line">K: 1</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:</span><br><span class="line">On the first day: bulbs[0] = 1, first bulb is turned on: [1,0,0]</span><br><span class="line">On the second day: bulbs[1] = 3, third bulb is turned on: [1,0,1]</span><br><span class="line">On the third day: bulbs[2] = 2, second bulb is turned on: [1,1,1]</span><br><span class="line">We return 2 because on the second day, there were two on bulbs with one off bulb between them.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><h4 id="TreeSet">TreeSet</h4><p>Using TreeSet to get the higher and lower pos of bulb in the previous. The only requirement is <code> currentDay - lower - 1 == K || higher - currentDay - 1 == K</code>.</p><p><code>set.lower(pos)</code> is going to find the first lower element from <code>pos</code> in the set.</p><p><code>set.higher(pos)</code> is going to find the first higher element from <code>pos</code> in the set.</p><h4 id="Straight-Forward">Straight Forward</h4><p>Checking by date. Create a new array of <code>days</code> to store the open time of each position bulb.</p><p>The only thing we need to do is keeping a window of size K and check left,right and current bulb’s open day. If <code>days[left] &lt; currentDay &amp;&amp; days[right] &lt; currentDay</code>, it means both left and right bulb will open before the currentDay. Like <code> ..open - close - open.. , assuming K is 1</code>, meeting the requirement of the question.</p><h3 id="Code">Code</h3><h4 id="TreeSet-v2">TreeSet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kEmptySlots</span><span class="params">(<span class="keyword">int</span>[] bulbs, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = bulbs.length;</span><br><span class="line">        TreeSet&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> day = <span class="number">1</span>; day&lt;=n; day++)&#123;</span><br><span class="line">            <span class="keyword">int</span> pos = bulbs[day-<span class="number">1</span>];</span><br><span class="line">            set.add(pos);</span><br><span class="line">            Integer lower = set.lower(pos);</span><br><span class="line">            Integer higher = set.higher(pos);</span><br><span class="line">            <span class="keyword">if</span>(lower != <span class="keyword">null</span> &amp;&amp; pos - lower -<span class="number">1</span> == k)<span class="keyword">return</span> day;</span><br><span class="line">            <span class="keyword">if</span>(higher != <span class="keyword">null</span> &amp;&amp; higher - pos - <span class="number">1</span> == k)<span class="keyword">return</span> day;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T: O(NlogN) S:O(N)</p><h4 id="Straight-Forward-v2">Straight Forward</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kEmptySlots</span><span class="params">(<span class="keyword">int</span>[] bulbs, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bulbs == <span class="keyword">null</span> || bulbs.length == <span class="number">0</span>)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> n = bulbs.length;</span><br><span class="line">        <span class="keyword">int</span>[] days = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            days[bulbs[i]-<span class="number">1</span>] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = k + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; right &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(days[i] &gt; days[left] &amp;&amp; days[i] &gt; days[right])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( i == right)&#123;</span><br><span class="line">                res = Math.min(res, Math.max(days[left], days[right]));</span><br><span class="line">            &#125;</span><br><span class="line">            left = i;</span><br><span class="line">            right = left + k + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == Integer.MAX_VALUE ? -<span class="number">1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(N)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-683-K-Empty-Slots&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;683. K Empty Slots&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/k-empty-slots/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  LeetCode Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;You have N bulbs in a row numbered from 1 to N. Initially, all the bulbs are turned off. We turn on exactly one bulb everyday until all bulbs are on after N days.&lt;/p&gt;
&lt;p&gt;You are given an array bulbs of length N where bulbs[i] = x means that on the (i+1)th day, we will turn on the bulb at position x where i is 0-indexed and x is 1-indexed.&lt;/p&gt;
&lt;p&gt;Given an integer K, find out the minimum day number such that there exists two turned on bulbs that have exactly K bulbs between them that are all turned off.&lt;/p&gt;
&lt;p&gt;If there isn’t such day, return -1.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bulbs: [1,3,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;K: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;On the first day: bulbs[0] = 1, first bulb is turned on: [1,0,0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;On the second day: bulbs[1] = 3, third bulb is turned on: [1,0,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;On the third day: bulbs[2] = 2, second bulb is turned on: [1,1,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;We return 2 because on the second day, there were two on bulbs with one off bulb between them.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Two Pointers" scheme="WangHngLeee.github.io/tags/Two-Pointers/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 1248. Count Number of Nice Subarrays</title>
    <link href="WangHngLeee.github.io/2020/07/29/1248.%20Count%20Number%20of%20Nice%20Subarrays/"/>
    <id>WangHngLeee.github.io/2020/07/29/1248. Count Number of Nice Subarrays/</id>
    <published>2020-07-29T13:27:29.000Z</published>
    <updated>2020-07-29T15:08:31.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1248-Count-Number-of-Nice-Subarrays-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1248. Count Number of Nice Subarrays</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/count-number-of-nice-subarrays/submissions/" target="_blank" rel="noopener"><font size="4">🔗  LeetCode Link </font></a></p><h3 id="Examples">Examples</h3><p>Given an array of integers nums and an integer k. A subarray is called nice if there are k odd numbers on it.</p><p>Return the number of nice sub-arrays.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: nums = [1,1,2,1,1], k = 3</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: nums = [2,4,6], k = 1</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: There is no odd numbers in the array.</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2</span><br><span class="line">Output: 16</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><h4 id="Navie-Solution">Navie Solution</h4><p>Apparently using sliding window. Keep the window that matain K odd numbers. Then perform <code>atMost</code> algo, to get the number of subarray with exactly <code>k</code> odd numbers.</p><p><code>k = atMost(k) - atMost(k-1)</code></p><h4 id="Optimized-Solution">Optimized Solution</h4><p>Based on the sliding window, we record the number of even num and to get all the subarray number. It’s true that when we add the even number from 0 to max one , then we can get all the possible nums of combination.</p><h3 id="Code">Code</h3><h4 id="Sliding-Window-with-atMost">Sliding Window with atMost</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfSubarrays</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> atMost(A, k) - atMost(A, k - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">atMost</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, i = <span class="number">0</span>, n = A.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            k -= A[j] % <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span> (k &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                k+=A[i] % <span class="number">2</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += j - i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(n) S:O(1)</p><h4 id="Optimized-Solution-v2">Optimized Solution</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfSubarrays</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.length;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>,count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>; end &lt; n; end++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[end] % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                k--;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>( k == <span class="number">0</span>)&#123;</span><br><span class="line">                k+=A[start++]%<span class="number">2</span>;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            res+=count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(n) S:O(1)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-1248-Count-Number-of-Nice-Subarrays-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;1248. Count Number of Nice Subarrays&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/count-number-of-nice-subarrays/submissions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  LeetCode Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given an array of integers nums and an integer k. A subarray is called nice if there are k odd numbers on it.&lt;/p&gt;
&lt;p&gt;Return the number of nice sub-arrays.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: nums = [1,1,2,1,1], k = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: nums = [2,4,6], k = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: There is no odd numbers in the array.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 3:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Two Pointers" scheme="WangHngLeee.github.io/tags/Two-Pointers/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 1004. Max Consecutive Ones III</title>
    <link href="WangHngLeee.github.io/2020/07/28/1004.%20Max%20Consecutive%20Ones%20III/"/>
    <id>WangHngLeee.github.io/2020/07/28/1004. Max Consecutive Ones III/</id>
    <published>2020-07-28T23:27:29.000Z</published>
    <updated>2020-07-29T04:18:59.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-946-Validate-Stack-Sequences-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">946. Validate Stack Sequences</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/validate-stack-sequences/"><font size="4">🔗  Leetcode Link</font></a></p><h3 id="Example">Example</h3><p>Given an array A of 0s and 1s, we may change up to K values from 0 to 1.</p><p>Return the length of the longest (contiguous) subarray that contains only 1s.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2</span><br><span class="line">Output: 6</span><br><span class="line">Explanation:</span><br><span class="line">[1,1,1,0,0,1,1,1,1,1,1]</span><br><span class="line">Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3</span><br><span class="line">Output: 10</span><br><span class="line">Explanation:</span><br><span class="line">[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]</span><br><span class="line">Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Using <code>sliding window</code> to maintain just at most <code>K</code> zeros in the window.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestOnes</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>; end &lt; A.length; end++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[end] == <span class="number">0</span>)K--;</span><br><span class="line">            <span class="keyword">while</span>(start &lt;= end &amp;&amp; K&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(A[start] == <span class="number">0</span>)K++;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res,end - start+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Actually we can just using <code>if</code> instead of <code>while</code> cause we need the max length of 1s. So we can either matain the same size or increasing the size of window instead decrease it.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestOnes</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>; end &lt; A.length; end++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[end] == <span class="number">0</span>)K--;</span><br><span class="line">            <span class="keyword">if</span>(K&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(A[start] == <span class="number">0</span>)K++;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res,end - start+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(n) S:O(n)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-946-Validate-Stack-Sequences-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;946. Validate Stack Sequences&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/validate-stack-sequences/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given an array A of 0s and 1s, we may change up to K values from 0 to 1.&lt;/p&gt;
&lt;p&gt;Return the length of the longest (contiguous) subarray that contains only 1s.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1,1,1,0,0,1,1,1,1,1,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Two Pointers" scheme="WangHngLeee.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>Review | Easy | 234. Palindrome Linked List</title>
    <link href="WangHngLeee.github.io/2020/07/28/234-Palindrome-Linked-List/"/>
    <id>WangHngLeee.github.io/2020/07/28/234-Palindrome-Linked-List/</id>
    <published>2020-07-28T19:30:29.000Z</published>
    <updated>2020-07-28T22:43:18.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-234-Palindrome-Linked-List-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">234. Palindrome Linked List</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/palindrome-linked-list/"><font size="4">LeetCode Link </font></a></p><h3 id="Examples">Examples</h3><p>Given a singly linked list, determine if it is a palindrome.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: 1-&gt;2</span><br><span class="line">Output: false</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Using two pointers to find the two half of linkedlist, and reverse one of them. Then start comparation one by one.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fast!=<span class="keyword">null</span> )&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = reverse(slow);</span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">while</span>(slow != <span class="keyword">null</span> &amp;&amp; fast!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(slow.val != fast.val)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode next = head.next;</span><br><span class="line">            head.next = prev;</span><br><span class="line">            prev = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(n) S:O(1)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-234-Palindrome-Linked-List-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;234. Palindrome Linked List&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/palindrome-linked-list/&quot;&gt;&lt;font size=&quot;4&quot;&gt;LeetCode Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given a singly linked list, determine if it is a palindrome.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: 1-&amp;gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: 1-&amp;gt;2-&amp;gt;2-&amp;gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="LinkedList" scheme="WangHngLeee.github.io/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>Review | Easy | 53. Maximum Subarray</title>
    <link href="WangHngLeee.github.io/2020/07/28/53-Maximum-Subarray/"/>
    <id>WangHngLeee.github.io/2020/07/28/53-Maximum-Subarray/</id>
    <published>2020-07-28T19:30:29.000Z</published>
    <updated>2020-07-28T22:43:27.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-53-Maximum-Subarray-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">53. Maximum Subarray</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/maximum-subarray/"><font size="4">LeetCode Link </font></a></p><h3 id="Examples">Examples</h3><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum = 6.</span><br><span class="line">Follow up:</span><br><span class="line"></span><br><span class="line">If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</span><br></pre></td></tr></table></figure><h4 id="Follow-Up">Follow Up</h4><p>If you have figured out the O(n) solution, try coding another solution using the <code>divide and conquer</code> approach, which is more subtle.</p><a id="more"></a><h3 id="Solution">Solution</h3><h4 id="Greedy">Greedy</h4><p>It’s the first navie solution we can come with. Keep a record of sum and update only when the new sum is positive. Otherwise let current num be the sum value.</p><h4 id="DP">DP</h4><p>Based on the <code>greedy</code> solution, we can using <code>DP</code> to easily solve it. The basic idea is same.</p><p>The transition function is <code>dp[i] = nums[i] + (dp[i-1] &gt; 0 ? dp[i-1] : 0)</code>. Only add <code>nums[i]</code> to previous sum only when the sum is positive, otherwise only set <code>dp[i]</code> with current <code>nums[i]</code></p><h4 id="Divide-and-Conquer">Divide and Conquer</h4><p>Follow up solution. Just divide array into left and right part, and caculate another left and right parts of each part. Then reutrn the sum. If <code>leftsum</code> is bigger than both <code>rightsum</code> and <code>crosssum</code>, just return it. Same as rightsum and crosssum.</p><h3 id="Code">Code</h3><h4 id="Greedy-v2">Greedy</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                sum = num;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum+=num;</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(sum,max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(n) S:O(1)</p><h4 id="DP-v2">DP</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> max = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            dp[i] = nums[i] + (dp[i-<span class="number">1</span>] &gt; <span class="number">0</span> ? dp[i-<span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">            max = Math.max(max, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(n) S:O(n)</p><h4 id="Divide-and-Conquer-v2">Divide and Conquer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxsum = subArray(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> maxsum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">subArray</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right)&#123;</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">            <span class="keyword">return</span> A[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> leftsum = subArray(A, left, mid); <span class="comment">//left part of the subarray sum, condition 1</span></span><br><span class="line">        <span class="keyword">int</span> rightsum = subArray(A, mid+<span class="number">1</span>, right); <span class="comment">//right part of the subarray sum, condition 2</span></span><br><span class="line">        <span class="keyword">int</span> middlesum = midSubArray(A, left, mid, right); <span class="comment">//cross part of the subarray sum, condition 3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (leftsum &gt;= rightsum &amp;&amp; leftsum &gt;= middlesum)&#123;</span><br><span class="line">            <span class="keyword">return</span> leftsum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rightsum &gt;= leftsum &amp;&amp; rightsum &gt;= middlesum)&#123;</span><br><span class="line">            <span class="keyword">return</span> rightsum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> middlesum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">midSubArray</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> leftsum = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> rightsum = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mid; i &gt;= left; i--)&#123;</span><br><span class="line">            sum += A[i];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; leftsum)&#123;</span><br><span class="line">                leftsum = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = mid + <span class="number">1</span>; j &lt;= right; j++)&#123;</span><br><span class="line">            sum += A[j];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; rightsum)&#123;</span><br><span class="line">                rightsum = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> leftsum + rightsum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(nlogn) S:O(1)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-53-Maximum-Subarray-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;53. Maximum Subarray&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/maximum-subarray/&quot;&gt;&lt;font size=&quot;4&quot;&gt;LeetCode Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [-2,1,-3,4,-1,2,1,-5,4],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: [4,-1,2,1] has the largest sum = 6.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Follow up:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Follow-Up&quot;&gt;Follow Up&lt;/h4&gt;
&lt;p&gt;If you have figured out the O(n) solution, try coding another solution using the &lt;code&gt;divide and conquer&lt;/code&gt; approach, which is more subtle.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Review | Hard | 1153. String Transforms Into Another String</title>
    <link href="WangHngLeee.github.io/2020/07/27/1153.%20String%20Transforms%20Into%20Another%20String/"/>
    <id>WangHngLeee.github.io/2020/07/27/1153. String Transforms Into Another String/</id>
    <published>2020-07-27T23:27:29.000Z</published>
    <updated>2020-07-28T02:32:13.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-1153-String-Transforms-Into-Another-String-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">1153. String Transforms Into Another String</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/string-transforms-into-another-string/"><font size="4">🔗  Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given two strings str1 and str2 of the same length, determine whether you can transform str1 into str2 by doing zero or more conversions.</p><p>In one conversion you can convert all occurrences of one character in str1 to any other lowercase English character.</p><p>Return true if and only if you can transform str1 into str2.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: str1 = &quot;aabcc&quot;, str2 = &quot;ccdee&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Convert &apos;c&apos; to &apos;e&apos; then &apos;b&apos; to &apos;d&apos; then &apos;a&apos; to &apos;c&apos;. Note that the order of conversions matter.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: str1 = &quot;leetcode&quot;, str2 = &quot;codeleet&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There is no way to transform str1 to str2.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><h4 id="Tricky-Part">Tricky Part</h4><p>We can use HashMap to store the link of chars. For example,</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a -&gt; b, b-&gt;c , c-&gt;d</span><br></pre></td></tr></table></figure><p>So each time when we scan from both str1 and str2, we check the str2 character with the one stored in map of str1, if it non exist then set default one with str2’ char. Otherwise, if they are different, like the link in map is <code>a-&gt;c</code> but the reality is <code>a-&gt;d</code> then return false, because one character can’t transform to two different chars at same time.</p><h4 id="Special-Edge-case">Special/Edge case :</h4><p>First case is two string are equal then we return true.</p><p>Second one is like the unique chars of both strs are same and have 26 chars. But in order to transform one to another we need a temp char that is unused, like <code> temp -&gt; a, a -&gt; b , b-&gt; c , c-&gt; temp</code>. Same as swap two number in array. So in this case we can’t perform the transformation, because there is just 26 chars and no more for us to mark as temp, so just return false.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(String str1, String str2)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character,Character&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(str1.equals(str2))<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(str1 == <span class="keyword">null</span> || str1.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;str1.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.getOrDefault(str1.charAt(i), str2.charAt(i)) != str2.charAt(i))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(str1.charAt(i),str2.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(map.values());</span><br><span class="line">        <span class="keyword">return</span> set.size() &lt; <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-1153-String-Transforms-Into-Another-String-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;1153. String Transforms Into Another String&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/string-transforms-into-another-string/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given two strings str1 and str2 of the same length, determine whether you can transform str1 into str2 by doing zero or more conversions.&lt;/p&gt;
&lt;p&gt;In one conversion you can convert all occurrences of one character in str1 to any other lowercase English character.&lt;/p&gt;
&lt;p&gt;Return true if and only if you can transform str1 into str2.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: str1 = &amp;quot;aabcc&amp;quot;, str2 = &amp;quot;ccdee&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Convert &amp;apos;c&amp;apos; to &amp;apos;e&amp;apos; then &amp;apos;b&amp;apos; to &amp;apos;d&amp;apos; then &amp;apos;a&amp;apos; to &amp;apos;c&amp;apos;. Note that the order of conversions matter.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: str1 = &amp;quot;leetcode&amp;quot;, str2 = &amp;quot;codeleet&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: There is no way to transform str1 to str2.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
      <category term="String" scheme="WangHngLeee.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 785. Is Graph Bipartite</title>
    <link href="WangHngLeee.github.io/2020/07/27/785.%20Is%20Graph%20Bipartite/"/>
    <id>WangHngLeee.github.io/2020/07/27/785. Is Graph Bipartite/</id>
    <published>2020-07-27T22:30:29.000Z</published>
    <updated>2020-07-29T21:34:21.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-785-Is-Graph-Bipartite-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">785. Is Graph Bipartite </font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/is-graph-bipartite/"><font size="4">🔗  Leetcode Link</font></a></p><h3 id="Examples">Examples</h3><p>Given an undirected graph, return true if and only if it is bipartite.</p><p>Recall that a graph is bipartite if we can split it’s set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.</p><p>The graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists.  Each node is an integer between 0 and graph.length - 1.  There are no self edges or parallel edges: graph[i] does not contain i, and it doesn’t contain any element twice.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [[1,3], [0,2], [1,3], [0,2]]</span><br><span class="line">Output: true</span><br><span class="line">Explanation:</span><br><span class="line">The graph looks like this:</span><br><span class="line">0----1</span><br><span class="line">|    |</span><br><span class="line">|    |</span><br><span class="line">3----2</span><br><span class="line">We can divide the vertices into two groups: &#123;0, 2&#125; and &#123;1, 3&#125;.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: [[1,2,3], [0,2], [0,1,3], [0,2]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation:</span><br><span class="line">The graph looks like this:</span><br><span class="line">0----1</span><br><span class="line">| \  |</span><br><span class="line">|  \ |</span><br><span class="line">3----2</span><br><span class="line">We cannot find a way to divide the set of nodes into two independent subsets.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Soluiton">Soluiton</h3><p>We can use both DFS and BFS to check whether a node is both current and neighboor. The main idea is using two different state to mark the current node and its all neighboors. If any neighboor has been already marked, just check that neighboor’s state equals to the <code>target color</code> or not, which is also the next color that we want to color the neighboor. It’s kinda like loop each level, but mark each level with different color like <code>black -1</code> or <code>white 1</code>, which is repeatedly.</p><h3 id="Code">Code</h3><h4 id="DFS">DFS</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(graph == <span class="keyword">null</span> || graph.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> m = graph.length;</span><br><span class="line">        <span class="keyword">int</span>[] color = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(color[i] == <span class="number">0</span> &amp;&amp; !DFS(graph,color,<span class="number">1</span>,i))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] color, <span class="keyword">int</span> target_color, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(color[i] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> color[i] == target_color;</span><br><span class="line">        &#125;</span><br><span class="line">        color[i] = target_color;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : graph[i])&#123;</span><br><span class="line">            <span class="keyword">if</span>(!DFS(graph,color,-target_color,num))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BFS">BFS</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(graph == <span class="keyword">null</span> || graph.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> m = graph.length;</span><br><span class="line">        <span class="keyword">int</span>[] color = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(color[i] != <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            queue.add(i);</span><br><span class="line">            color[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = queue.poll();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> next : graph[temp])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(color[next] == <span class="number">0</span>)&#123;</span><br><span class="line">                        queue.add(next);</span><br><span class="line">                        color[next] = -color[temp];</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(color[next] != -color[temp])&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-785-Is-Graph-Bipartite-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;785. Is Graph Bipartite &lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/is-graph-bipartite/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given an undirected graph, return true if and only if it is bipartite.&lt;/p&gt;
&lt;p&gt;Recall that a graph is bipartite if we can split it’s set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.&lt;/p&gt;
&lt;p&gt;The graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists.  Each node is an integer between 0 and graph.length - 1.  There are no self edges or parallel edges: graph[i] does not contain i, and it doesn’t contain any element twice.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [[1,3], [0,2], [1,3], [0,2]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The graph looks like this:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0----1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3----2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;We can divide the vertices into two groups: &amp;#123;0, 2&amp;#125; and &amp;#123;1, 3&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [[1,2,3], [0,2], [0,1,3], [0,2]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The graph looks like this:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0----1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| \  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  \ |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3----2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;We cannot find a way to divide the set of nodes into two independent subsets.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 209. Minimum Size Subarray Sum</title>
    <link href="WangHngLeee.github.io/2020/07/25/209.%20Minimum%20Size%20Subarray%20Sum/"/>
    <id>WangHngLeee.github.io/2020/07/25/209. Minimum Size Subarray Sum/</id>
    <published>2020-07-25T22:30:29.000Z</published>
    <updated>2020-07-26T04:30:03.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-209-Minimum-Size-Subarray-Sum-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">209. Minimum Size Subarray Sum</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/minimum-size-subarray-sum/"><font size="4">🔗  Leetcode Link</font></a></p><h3 id="Example">Example</h3><p>Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn’t one, return 0 instead.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: s = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: the subarray [4,3] has the minimal length under the problem constraint.</span><br><span class="line">Follow up:</span><br><span class="line">If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><h4 id="Two-pointers-Sliding-window">Two pointers + Sliding window</h4><p>Since the given array contains only positive integers, the subarray sum can only increase by including more elements. Therefore, you don’t have to include more elements once the current subarray already has a sum large enough. This gives the linear time complexity solution by maintaining a minimum window with a two indices.</p><h4 id="Binary-search-Presum-array">Binary search + Presum array</h4><p>Since all elements are positive, the cumulative sum must be strictly increasing. Then, a subarray sum can expressed as the difference between two cumulative sum. Hence, given a start index for the cumulative sum array, the other end index can be searched using binary search.</p><h3 id="Code">Code</h3><h4 id="Two-pointers">Two pointers</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span>(end &lt; len)&#123;</span><br><span class="line">            sum+=nums[end];</span><br><span class="line">            <span class="keyword">while</span>(start &lt;= end &amp;&amp; sum&gt;= s)&#123;</span><br><span class="line">                sum-=nums[start];</span><br><span class="line">                res = Math.min(res, end - start + <span class="number">1</span>);</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            end++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == Integer.MAX_VALUE ? <span class="number">0</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(n) S:O(1)</p><h4 id="Binary-Search">Binary Search</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] preSum = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) preSum[i] = preSum[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> res = n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">          <span class="comment">// preSum[i] for i in [0, n-1], preSum[j] for j in [i+1, n]</span></span><br><span class="line">            <span class="keyword">int</span> j = binarySearch(i + <span class="number">1</span>, n + <span class="number">1</span> , preSum, s + preSum[i]);</span><br><span class="line">            <span class="keyword">if</span> (j != -<span class="number">1</span>) &#123;</span><br><span class="line">                res = Math.min(res, j - i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == n + <span class="number">1</span> ? <span class="number">0</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span>[] preSum, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = low, r = high;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (preSum[mid] &gt;= key) &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l == high ? -<span class="number">1</span> : l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(nlogn) S:O(n)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-209-Minimum-Size-Subarray-Sum-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;209. Minimum Size Subarray Sum&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/minimum-size-subarray-sum/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn’t one, return 0 instead.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: s = 7, nums = [2,3,1,2,4,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: the subarray [4,3] has the minimal length under the problem constraint.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Follow up:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Review | Hard | 269. Alien Dictionary</title>
    <link href="WangHngLeee.github.io/2020/07/25/269.%20Alien%20Dictionary/"/>
    <id>WangHngLeee.github.io/2020/07/25/269. Alien Dictionary/</id>
    <published>2020-07-25T22:27:29.000Z</published>
    <updated>2020-07-26T04:29:08.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-269-Alien-Dictionary-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">269. Alien Dictionary</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/alien-dictionary/"><font size="4">🔗  Question Link </font></a></p><h3 id="Example">Example</h3><p>There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  &quot;wrt&quot;,</span><br><span class="line">  &quot;wrf&quot;,</span><br><span class="line">  &quot;er&quot;,</span><br><span class="line">  &quot;ett&quot;,</span><br><span class="line">  &quot;rftt&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Output: &quot;wertf&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>It’s simple to come up with DFS and BFS solutions.</p><h4 id="DFS">DFS</h4><p>We can build a graph of connectin characters and make a topological sort using DFS. We can define different state of a character during DFS.</p><p><code>state[i] = -1</code> : Not even exist.</p><p><code>state[i] = 0</code> : Exist. Non-visited.</p><p><code>state[i] = 1</code> : Visiting.</p><p><code>state[i] = 2</code> : Visited.</p><h4 id="BFS">BFS</h4><p>We can using solution like indegree sorting to create a indegree of each character. And also create a set of other characters that ranks after current character. <code>Eg: wrf -&gt; w : r</code></p><h4 id="Edge-case-consideration">Edge case consideration</h4><p>In the new test cases ,there exist some cases like <code> 'abc', 'ab'</code>,which will occur ERROR when we using original code. So we have to add some code to return this case with “”.</p><p>Only thing we need to do is just compare the two adjcent string to check whether the first one can be made up with the whole next one.</p><h3 id="Code">Code</h3><h4 id="DFS-v2">DFS</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line"><span class="comment">//     private final int N = 26;</span></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">boolean</span>[][] cnt = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span>[] state = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">alienOrder</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(words == <span class="keyword">null</span> || words.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(!build(words))<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(state[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!dfs(words,i))<span class="keyword">return</span><span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(String[] words, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        state[i] = <span class="number">1</span>; <span class="comment">// visiting</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[i][j])&#123;</span><br><span class="line">                <span class="keyword">if</span>(state[j] == <span class="number">1</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(state[j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!dfs(words,j))&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        state[i] = <span class="number">2</span>;</span><br><span class="line">        sb.append((<span class="keyword">char</span>)(i+<span class="string">'a'</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">build</span><span class="params">(String[] words)</span></span>&#123;</span><br><span class="line">        Arrays.fill(state,-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;words.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c : words[i].toCharArray())&#123;</span><br><span class="line">                state[c-<span class="string">'a'</span>] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    String w1 = words[i-<span class="number">1</span>];</span><br><span class="line">                    String w2 = words[i];</span><br><span class="line">                    <span class="keyword">int</span> len = Math.min(w1.length(), w2.length());</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;len; k++)&#123;</span><br><span class="line">                        <span class="keyword">char</span> c1 = w1.charAt(k);</span><br><span class="line">                        <span class="keyword">char</span> c2 = w2.charAt(k);</span><br><span class="line">                        <span class="keyword">if</span>(c1 != c2)&#123;</span><br><span class="line">                            cnt[c1-<span class="string">'a'</span>][c2-<span class="string">'a'</span>] = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(w1.length() &gt; w2.length() &amp;&amp; w1.substring(<span class="number">0</span>,len).equals(w2.substring(<span class="number">0</span>,len)))&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BFS-v2">BFS</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">alienOrder</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Set&lt;Character&gt;&gt; map=<span class="keyword">new</span> HashMap&lt;Character, Set&lt;Character&gt;&gt;();</span><br><span class="line">        Map&lt;Character, Integer&gt; degree=<span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        String result=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(words==<span class="keyword">null</span> || words.length==<span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">for</span>(String s: words)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c: s.toCharArray())&#123;</span><br><span class="line">                degree.put(c,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;words.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            String cur=words[i];</span><br><span class="line">            String next=words[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (cur.length() &gt; next.length() &amp;&amp; cur.startsWith(next)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> length=Math.min(cur.length(), next.length());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;length; j++)&#123;</span><br><span class="line">                <span class="keyword">char</span> c1=cur.charAt(j);</span><br><span class="line">                <span class="keyword">char</span> c2=next.charAt(j);</span><br><span class="line">                <span class="keyword">if</span>(c1!=c2)&#123;</span><br><span class="line">                    Set&lt;Character&gt; set=<span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">                    <span class="keyword">if</span>(map.containsKey(c1)) set=map.get(c1);</span><br><span class="line">                    <span class="keyword">if</span>(!set.contains(c2))&#123;</span><br><span class="line">                        set.add(c2);</span><br><span class="line">                        map.put(c1, set);</span><br><span class="line">                        degree.put(c2, degree.get(c2)+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Character&gt; q=<span class="keyword">new</span> LinkedList&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: degree.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(degree.get(c)==<span class="number">0</span>) q.add(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">char</span> c=q.remove();</span><br><span class="line">            result+=c;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(c))&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c2: map.get(c))&#123;</span><br><span class="line">                    degree.put(c2,degree.get(c2)-<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(degree.get(c2)==<span class="number">0</span>) q.add(c2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(result.length()!=degree.size()) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-269-Alien-Dictionary-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;269. Alien Dictionary&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/alien-dictionary/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗  Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;wrt&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;wrf&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;er&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;ett&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;rftt&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: &amp;quot;wertf&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
  </entry>
  
</feed>
