<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leee&#39;s World</title>
  
  <subtitle>Talk is Cheap. Show me the code.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="WangHngLeee.github.io/"/>
  <updated>2020-07-22T05:27:38.047Z</updated>
  <id>WangHngLeee.github.io/</id>
  
  <author>
    <name>HongLeee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Review Problems List 📌</title>
    <link href="WangHngLeee.github.io/9999/12/31/problemslist/"/>
    <id>WangHngLeee.github.io/9999/12/31/problemslist/</id>
    <published>9999-12-31T16:13:23.000Z</published>
    <updated>2020-07-22T05:27:38.047Z</updated>
    
    <content type="html"><![CDATA[<br><font size="3"> 记录Problems list的完成情况 每日更新。<br><a href="https://docs.google.com/spreadsheets/d/1SwcfcnOXL_7lbdqZm8dia_WU20aQ-ZTjGf4G0oJ6qpA/edit#gid=972946549" target="_blank" rel="noopener"><font size="4">🔗 Problems List  Link </font></a><br>Github Leetcode Summary 同步更新。<br><a href="https://github.com/WangHngLeee/LeetcodeSummary" target="_blank" rel="noopener"><font size="4">🔗 Github Summary Link </font></a><br></font><br><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;
&lt;font size=&quot;3&quot;&gt; 记录Problems list的完成情况 每日更新。&lt;br&gt;
&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1SwcfcnOXL_7lbdqZm8dia_WU20aQ-ZTjGf4G0oJ
      
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Problems List" scheme="WangHngLeee.github.io/tags/Problems-List/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 138. Copy List with Random Pointer</title>
    <link href="WangHngLeee.github.io/2020/07/23/138.%20Copy%20List%20with%20Random%20Pointer/"/>
    <id>WangHngLeee.github.io/2020/07/23/138. Copy List with Random Pointer/</id>
    <published>2020-07-23T22:30:29.000Z</published>
    <updated>2020-07-24T03:40:56.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-138-Copy-List-with-Random-Pointer-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">138. Copy List with Random Pointer</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/copy-list-with-random-pointer/"><font size="4">🔗 Leetcode Link</font></a></p><p><a target="_blank" href="https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/"><font size="4">🔗Leetcode-CN Link</font></a></p><h3 id="Example">Example</h3><p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p><p>Return a deep copy of the list.</p><p>The Linked List is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:</p><p>val: an integer representing Node.val</p><p>random_index: the index of the node (range from 0 to n-1) where random pointer points to, or null if it does not point to any node.</p><img src="https://assets.leetcode.com/uploads/2019/12/18/e1.png" alt="leetcode 138"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Easy to come up with <code>HashMap</code> solution. Keep record of the node and it’s new copied one. And assign each next and ramdon to the copied one.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        Map&lt;Node,Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Node node = head;</span><br><span class="line">        <span class="keyword">while</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            map.put(node, <span class="keyword">new</span> Node(node.val));</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        node = head;</span><br><span class="line">        <span class="keyword">while</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            map.get(node).next = map.get(node.next);</span><br><span class="line">            map.get(node).random = map.get(node.random);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(N)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-138-Copy-List-with-Random-Pointer-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;138. Copy List with Random Pointer&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/copy-list-with-random-pointer/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Leetcode-CN Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.&lt;/p&gt;
&lt;p&gt;Return a deep copy of the list.&lt;/p&gt;
&lt;p&gt;The Linked List is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:&lt;/p&gt;
&lt;p&gt;val: an integer representing Node.val&lt;/p&gt;
&lt;p&gt;random_index: the index of the node (range from 0 to n-1) where random pointer points to, or null if it does not point to any node.&lt;/p&gt;
&lt;img src=&quot;https://assets.leetcode.com/uploads/2019/12/18/e1.png&quot; alt=&quot;leetcode 138&quot;&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="LinkedList" scheme="WangHngLeee.github.io/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 426. Convert Binary Search Tree to Sorted Doubly Linked List</title>
    <link href="WangHngLeee.github.io/2020/07/23/426.%20Convert%20Binary%20Search%20Tree%20to%20Sorted%20Doubly%20Linked%20List/"/>
    <id>WangHngLeee.github.io/2020/07/23/426. Convert Binary Search Tree to Sorted Doubly Linked List/</id>
    <published>2020-07-23T22:30:29.000Z</published>
    <updated>2020-07-24T03:40:55.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-426-Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">426. Convert Binary Search Tree to Sorted Doubly Linked List</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/"><font size="4">🔗 Leetcode Link</font></a></p><p><a target="_blank" href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/"><font size="4">🔗Leetcode-CN Link</font></a></p><h3 id="Example">Example</h3><p>Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.</p><p>You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.</p><p>We want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.</p><img src="https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: root = [4,2,5,1,3]</span><br></pre></td></tr></table></figure><img src="https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Output: [1,2,3,4,5]</span><br></pre></td></tr></table></figure><img src="https://assets.leetcode.com/uploads/2018/10/12/bstdllreturnbst.png"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Explanation: The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Using the benifit of inorder to traverse the tree.</p><p>As we all know that inorder is an assending array. So we can using DFS to inorder traverse the whole tree.</p><p>Hence during the middle line code, all we need to do is linking the nodes and reassign the new node to the variables.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Node pre = <span class="keyword">null</span>, head = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">treeToDoublyList</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        dfs(root);</span><br><span class="line">        pre.right = head; <span class="comment">// link the pre.right to the head</span></span><br><span class="line">        head.left = pre;  <span class="comment">// link the head.left to the pre. In order to make the listnode cycled.</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Node cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="keyword">null</span>)<span class="keyword">return</span>;</span><br><span class="line">        dfs(cur.left);</span><br><span class="line">        <span class="keyword">if</span>(pre == <span class="keyword">null</span>)head = cur; <span class="comment">// pre is used to store the left node of cur. If pre is null, it means cur has no node in the left, so the head should be cur.</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            pre.right = cur; <span class="comment">// otherwise we link pre node to cur using pre.right = cur like `pre-&gt;cur`; </span></span><br><span class="line">        &#125;</span><br><span class="line">        cur.left = pre; <span class="comment">// linking pre to the cur node like `pre&lt;-cur` (We have link those two before from `pre-&gt;cur`)</span></span><br><span class="line">        pre = cur; <span class="comment">// updating the value of pre and keeping dfs.</span></span><br><span class="line">        dfs(cur.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-426-Convert-Binary-Search-Tree-to-Sorted-Doubly-Linked-List-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;426. Convert Binary Search Tree to Sorted Doubly Linked List&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Leetcode-CN Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.&lt;/p&gt;
&lt;p&gt;You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.&lt;/p&gt;
&lt;p&gt;We want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.&lt;/p&gt;
&lt;img src=&quot;https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png&quot;&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: root = [4,2,5,1,3]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png&quot;&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Output: [1,2,3,4,5]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;https://assets.leetcode.com/uploads/2018/10/12/bstdllreturnbst.png&quot;&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="LinkedList" scheme="WangHngLeee.github.io/tags/LinkedList/"/>
    
      <category term="BST" scheme="WangHngLeee.github.io/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>Review | Hard | 297. Serialize and Deserialize Binary Tree</title>
    <link href="WangHngLeee.github.io/2020/07/23/297.%20Serialize%20and%20Deserialize%20Binary%20Tree/"/>
    <id>WangHngLeee.github.io/2020/07/23/297. Serialize and Deserialize Binary Tree/</id>
    <published>2020-07-23T22:27:29.000Z</published>
    <updated>2020-07-24T04:00:07.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-297-Serialize-and-Deserialize-Binary-Tree-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">297. Serialize and Deserialize Binary Tree</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree/"><font size="4">🔗 Leetcode Link</font></a></p><p><a target="_blank" href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/submissions/"><font size="4">🔗Leetcode-CN Link</font></a></p><h3 id="Example">Example</h3><p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p><p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work.</p><p>You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">You may serialize the following tree:</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   3</span><br><span class="line">     / \</span><br><span class="line">    4   5</span><br><span class="line"></span><br><span class="line">as &quot;[1,2,3,null,null,4,5]&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><ul><li><p>Serialize: Using stringbuilder to take tree into a string split with &quot; &quot; using preorder + dfs.</p></li><li><p>Deserialize: Using the result from serialize to form a new tree preorderly.</p></li></ul><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        serial(root,res);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serial</span><span class="params">(TreeNode root, StringBuilder res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)res.append(<span class="string">"null"</span>).append(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res.append(root.val).append(<span class="string">" "</span>);</span><br><span class="line">            serial(root.left,res);</span><br><span class="line">            serial(root.right,res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(String source)</span></span>&#123;</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        String[] strs = source.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span>(String str : strs)&#123;</span><br><span class="line">            queue.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> des(queue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">des</span><span class="params">(Queue&lt;String&gt; queue)</span></span>&#123;</span><br><span class="line">        String cur = queue.poll();</span><br><span class="line">        <span class="keyword">if</span>(cur.equals(<span class="string">"null"</span>))<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode node = <span class="keyword">new</span> TreeNode(Integer.parseInt(cur));</span><br><span class="line">        node.left = des(queue);</span><br><span class="line">        node.right = des(queue);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-297-Serialize-and-Deserialize-Binary-Tree-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;297. Serialize and Deserialize Binary Tree&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/serialize-and-deserialize-binary-tree/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/submissions/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Leetcode-CN Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.&lt;/p&gt;
&lt;p&gt;Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work.&lt;/p&gt;
&lt;p&gt;You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You may serialize the following tree:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2   3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    4   5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;as &amp;quot;[1,2,3,null,null,4,5]&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 255. Verify Preorder Sequence in Binary Search Tree</title>
    <link href="WangHngLeee.github.io/2020/07/22/255.%20Verify%20Preorder%20Sequence%20in%20Binary%20Search%20Tree/"/>
    <id>WangHngLeee.github.io/2020/07/22/255. Verify Preorder Sequence in Binary Search Tree/</id>
    <published>2020-07-22T22:30:29.000Z</published>
    <updated>2020-07-22T23:30:03.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-255-Verify-Preorder-Sequence-in-Binary-Search-Tree-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">255. Verify Preorder Sequence in Binary Search Tree</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/"><font size="4">🔗 Leetcode Link</font></a></p><p><a target="_blank" href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/"><font size="4">🔗Leetcode-CN Link</font></a></p><h3 id="Example">Example</h3><p>Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.</p><p>You may assume each number in the sequence is unique.</p><p>Consider the following binary search tree:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    5</span><br><span class="line">   / \</span><br><span class="line">  2   6</span><br><span class="line"> / \</span><br><span class="line">1   3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [5,2,6,1,3]</span><br><span class="line">Output: false</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: [5,2,1,3,6]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><ol><li><p>Using DFS and loop the whole array to find the bigger index, then dfs the left and right part.</p></li><li><p>Using stack to iterate the tree. When current node is bigger than the peek in the stack, let low equal to the popped one, until the peek is greater than current node.</p></li></ol><h3 id="Code">Code</h3><ol><li>DFS</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyPreorder</span><span class="params">(<span class="keyword">int</span>[] preorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder == <span class="keyword">null</span> || preorder.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> help(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">help</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= end) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = a[start];</span><br><span class="line">        <span class="keyword">int</span> max = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start + <span class="number">1</span>; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max == -<span class="number">1</span> &amp;&amp; a[i] &gt; temp) max = i;</span><br><span class="line">            <span class="keyword">if</span>(max != -<span class="number">1</span> &amp;&amp; a[i] &lt; temp) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bigger == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> help(a, start + <span class="number">1</span>, end);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> help(a, start + <span class="number">1</span>, max - <span class="number">1</span>) &amp;&amp; help(a, max, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Stack</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verifyPreorder</span><span class="params">(<span class="keyword">int</span>[] preorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = Integer.MIN_VALUE;</span><br><span class="line">        Stack&lt;Integer&gt; path = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p : preorder) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p &lt; low)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">while</span> (!path.empty() &amp;&amp; p &gt; path.peek())</span><br><span class="line">                low = path.pop();</span><br><span class="line">            path.push(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-255-Verify-Preorder-Sequence-in-Binary-Search-Tree-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;255. Verify Preorder Sequence in Binary Search Tree&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Leetcode-CN Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.&lt;/p&gt;
&lt;p&gt;You may assume each number in the sequence is unique.&lt;/p&gt;
&lt;p&gt;Consider the following binary search tree:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2   6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1   3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [5,2,6,1,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [5,2,1,3,6]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 113. Path Sum II</title>
    <link href="WangHngLeee.github.io/2020/07/22/113.%20Path%20Sum%20II/"/>
    <id>WangHngLeee.github.io/2020/07/22/113. Path Sum II/</id>
    <published>2020-07-22T22:30:29.000Z</published>
    <updated>2020-07-22T23:03:01.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-113-Path-Sum-II-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">113. Path Sum II</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/path-sum-ii/"><font size="4">🔗 Leetcode Link</font></a></p><p><a target="_blank" href="https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/"><font size="4">🔗Leetcode-CN Link</font></a></p><h3 id="Example">Example</h3><p>Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.</p><p>Note: A leaf is a node with no children.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Given the below binary tree and sum = 22,</span><br><span class="line"></span><br><span class="line">      5</span><br><span class="line">     / \</span><br><span class="line">    4   8</span><br><span class="line">   /   / \</span><br><span class="line">  11  13  4</span><br><span class="line"> /  \    / \</span><br><span class="line">7    2  5   1</span><br><span class="line">Return:</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>It’s simple and clear we have to use DFS + backtracking to get all the possible paths.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; templist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)<span class="keyword">return</span> res;</span><br><span class="line">        help(root,res,sum,templist);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">(TreeNode root, List&lt;List&lt;Integer&gt;&gt; res, <span class="keyword">int</span> sum, List&lt;Integer&gt; templist)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)<span class="keyword">return</span>;</span><br><span class="line">        templist.add(root.val);</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; root.val == sum)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(templist));</span><br><span class="line">        &#125;</span><br><span class="line">        help(root.left,res,sum - root.val, templist);</span><br><span class="line">        help(root.right,res,sum-root.val, templist);</span><br><span class="line">        templist.remove(templist.size() -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-113-Path-Sum-II-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;113. Path Sum II&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/path-sum-ii/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Leetcode-CN Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.&lt;/p&gt;
&lt;p&gt;Note: A leaf is a node with no children.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Given the below binary tree and sum = 22,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    4   8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /   / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  11  13  4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; /  \    / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7    2  5   1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Return:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [5,4,11,2],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [5,8,4,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 946. Validate Stack Sequences</title>
    <link href="WangHngLeee.github.io/2020/07/22/946.%20Validate%20Stack%20Sequences/"/>
    <id>WangHngLeee.github.io/2020/07/22/946. Validate Stack Sequences/</id>
    <published>2020-07-22T22:30:29.000Z</published>
    <updated>2020-07-22T22:53:48.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-946-Validate-Stack-Sequences-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">946. Validate Stack Sequences</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/validate-stack-sequences/"><font size="4">🔗 Leetcode Link</font></a></p><p><a target="_blank" href="https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/"><font size="4">🔗Leetcode-CN Link</font></a></p><h3 id="Example">Example</h3><p>Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: We might do the following sequence:</span><br><span class="line">push(1), push(2), push(3), push(4), pop() -&gt; 4,</span><br><span class="line">push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>We can solve this by simulating a real stack. We first Loop through the pushed array, keep pushing pushed elements into stack if the top element on the stack is different from the current one of popped;</p><p>Keep poping out of the top element from stack if it is same as the current one of popped;<br>Check if the stack is empty after loop.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateStackSequences</span><span class="params">(<span class="keyword">int</span>[] pushed, <span class="keyword">int</span>[] popped)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : pushed)&#123;</span><br><span class="line">            stack.push(num);</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; idx &lt; popped.length &amp;&amp; stack.peek() == popped[idx])&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                idx++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> idx == popped.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(N) S:O(N)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-946-Validate-Stack-Sequences-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;946. Validate Stack Sequences&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/validate-stack-sequences/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Leetcode-CN Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: We might do the following sequence:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;push(1), push(2), push(3), push(4), pop() -&amp;gt; 4,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;push(5), pop() -&amp;gt; 5, pop() -&amp;gt; 3, pop() -&amp;gt; 2, pop() -&amp;gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 79. Word Search</title>
    <link href="WangHngLeee.github.io/2020/07/21/79.%20Word%20Search/"/>
    <id>WangHngLeee.github.io/2020/07/21/79. Word Search/</id>
    <published>2020-07-21T22:30:29.000Z</published>
    <updated>2020-07-22T05:26:23.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-341-Flatten-Nested-List-Iterator-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">341. Flatten Nested List Iterator</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/word-search/"><font size="4">🔗 Leetcode Link</font></a></p><p><a target="_blank" href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/submissions/"><font size="4">🔗Leetcode-CN Link</font></a></p><h3 id="Examples">Examples</h3><p>Given a 2D board and a word, find if the word exists in the grid.</p><p>The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">board =</span><br><span class="line">[</span><br><span class="line">  [&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;E&apos;],</span><br><span class="line">  [&apos;S&apos;,&apos;F&apos;,&apos;C&apos;,&apos;S&apos;],</span><br><span class="line">  [&apos;A&apos;,&apos;D&apos;,&apos;E&apos;,&apos;E&apos;]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Given word = &quot;ABCCED&quot;, return true.</span><br><span class="line">Given word = &quot;SEE&quot;, return true.</span><br><span class="line">Given word = &quot;ABCB&quot;, return false.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Clearly we can using <code>DFS</code> and <code>Backtracking</code> to find the matched path in four different directions. Temperaily changing <code>borad[i][j</code>] to <code>'#'</code> before next DFS.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(word == <span class="keyword">null</span> || word.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        m = board.length;</span><br><span class="line">        n = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(board,word,i,j,<span class="number">0</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, String word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start == word.length())<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>( i&lt;<span class="number">0</span> || i&gt;=m || j&lt;<span class="number">0</span> || j&gt;=n || board[i][j] != word.charAt(start))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        board[i][j] = <span class="string">'#'</span>;</span><br><span class="line">        <span class="keyword">boolean</span> res = dfs(board,word,i+<span class="number">1</span>,j,start+<span class="number">1</span>)||</span><br><span class="line">                      dfs(board,word,i-<span class="number">1</span>,j,start+<span class="number">1</span>)||</span><br><span class="line">                      dfs(board,word,i,j+<span class="number">1</span>,start+<span class="number">1</span>)||</span><br><span class="line">                      dfs(board,word,i,j-<span class="number">1</span>,start+<span class="number">1</span>);</span><br><span class="line">        board[i][j] = word.charAt(start);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-341-Flatten-Nested-List-Iterator-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;341. Flatten Nested List Iterator&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/word-search/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Leetcode Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/submissions/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Leetcode-CN Link&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given a 2D board and a word, find if the word exists in the grid.&lt;/p&gt;
&lt;p&gt;The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;board =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;apos;A&amp;apos;,&amp;apos;B&amp;apos;,&amp;apos;C&amp;apos;,&amp;apos;E&amp;apos;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;apos;S&amp;apos;,&amp;apos;F&amp;apos;,&amp;apos;C&amp;apos;,&amp;apos;S&amp;apos;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&amp;apos;A&amp;apos;,&amp;apos;D&amp;apos;,&amp;apos;E&amp;apos;,&amp;apos;E&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Given word = &amp;quot;ABCCED&amp;quot;, return true.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Given word = &amp;quot;SEE&amp;quot;, return true.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Given word = &amp;quot;ABCB&amp;quot;, return false.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 341. Flatten Nested List Iterator</title>
    <link href="WangHngLeee.github.io/2020/07/20/341.%20Flatten%20Nested%20List%20Iterator/"/>
    <id>WangHngLeee.github.io/2020/07/20/341. Flatten Nested List Iterator/</id>
    <published>2020-07-20T22:30:29.000Z</published>
    <updated>2020-07-21T02:27:50.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-341-Flatten-Nested-List-Iterator-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">341. Flatten Nested List Iterator</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/flatten-nested-list-iterator/"><font size="4">🔗Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given a nested list of integers, implement an iterator to flatten it.</p><p>Each element is either an integer, or a list – whose elements may also be integers or other lists.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [[1,1],2,[1,1]]</span><br><span class="line">Output: [1,1,2,1,1]</span><br><span class="line">Explanation: By calling next repeatedly until hasNext returns false, </span><br><span class="line">             the order of elements returned by next should be: [1,1,2,1,1].</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: [1,[4,[6]]]</span><br><span class="line">Output: [1,4,6]</span><br><span class="line">Explanation: By calling next repeatedly until hasNext returns false, </span><br><span class="line">             the order of elements returned by next should be: [1,4,6].</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Typical flatten array question. We can using stack to add each part from right to left, in order to keep the <code>leftmost</code> at the top of stack.</p><p>In <code>hasNext()</code> we have to check the peek, if the peek is integer then we just return true. If not it means it’a <code>nestedList</code> so we have to flatten it and push back to the stack.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    Stack&lt;NestedInteger&gt; stack;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NestedIterator</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        help(nestedList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasNext() ? stack.pop().getInteger() : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.peek().isInteger())<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            help(stack.pop().getList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">(List&lt;NestedInteger&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=list.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            stack.push(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-341-Flatten-Nested-List-Iterator-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;341. Flatten Nested List Iterator&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/flatten-nested-list-iterator/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given a nested list of integers, implement an iterator to flatten it.&lt;/p&gt;
&lt;p&gt;Each element is either an integer, or a list – whose elements may also be integers or other lists.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [[1,1],2,[1,1]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [1,1,2,1,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: By calling next repeatedly until hasNext returns false, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             the order of elements returned by next should be: [1,1,2,1,1].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [1,[4,[6]]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [1,4,6]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: By calling next repeatedly until hasNext returns false, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             the order of elements returned by next should be: [1,4,6].&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Design" scheme="WangHngLeee.github.io/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Review | Easy | 346. Moving Average from Data Stream</title>
    <link href="WangHngLeee.github.io/2020/07/20/346.%20Moving%20Average%20from%20Data%20Stream/"/>
    <id>WangHngLeee.github.io/2020/07/20/346. Moving Average from Data Stream/</id>
    <published>2020-07-20T22:30:29.000Z</published>
    <updated>2020-07-21T02:31:32.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-346-Moving-Average-from-Data-Stream-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">346. Moving Average from Data Stream</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/moving-average-from-data-stream/"><font size="4">🔗Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">MovingAverage m = new MovingAverage(3);</span><br><span class="line">m.next(1) = 1</span><br><span class="line">m.next(10) = (1 + 10) / 2</span><br><span class="line">m.next(3) = (1 + 10 + 3) / 3</span><br><span class="line">m.next(5) = (10 + 3 + 5) / 3</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Simple question that we can using circular queue to solve it. When the queue reach size then we poll one element and substract it from the sum.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovingAverage</span> </span>&#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue;</span><br><span class="line">    <span class="keyword">double</span> sum;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovingAverage</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        s = size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(queue.size() == s)&#123;</span><br><span class="line">            sum-=queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(val);</span><br><span class="line">        sum+=val;</span><br><span class="line">        <span class="keyword">return</span> sum/queue.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-346-Moving-Average-from-Data-Stream-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;346. Moving Average from Data Stream&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/moving-average-from-data-stream/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MovingAverage m = new MovingAverage(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.next(1) = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.next(10) = (1 + 10) / 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.next(3) = (1 + 10 + 3) / 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.next(5) = (10 + 3 + 5) / 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Design" scheme="WangHngLeee.github.io/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Review | Easy | 350. Intersection of Two Arrays II</title>
    <link href="WangHngLeee.github.io/2020/07/20/350.%20Intersection%20of%20Two%20Arrays%20II/"/>
    <id>WangHngLeee.github.io/2020/07/20/350. Intersection of Two Arrays II/</id>
    <published>2020-07-20T22:30:29.000Z</published>
    <updated>2020-07-21T02:31:22.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-351-Android-Unlock-Patterns-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">351. Android Unlock Patterns</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/intersection-of-two-arrays-ii/"><font size="4">🔗Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given two arrays, write a function to compute their intersection.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">Output: [2,2]</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">Output: [4,9]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>We can using one hashmap to store each number’s frequency in the nums1 array. Then make a loop in nums2. If the num in nums2 exist in map and it’s frequency is bigger than 0 then add it to res.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums1)&#123;</span><br><span class="line">            map.put(num,map.getOrDefault(num,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(num) &amp;&amp; map.get(num)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                res.add(num);</span><br><span class="line">                map.put(num,map.get(num)-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;res.size(); i++)&#123;</span><br><span class="line">            ans[index++]=res.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-351-Android-Unlock-Patterns-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;351. Android Unlock Patterns&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/intersection-of-two-arrays-ii/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: nums1 = [1,2,2,1], nums2 = [2,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [2,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [4,9]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 802. Find Eventual Safe States</title>
    <link href="WangHngLeee.github.io/2020/07/20/802.%20Find%20Eventual%20Safe%20States/"/>
    <id>WangHngLeee.github.io/2020/07/20/802. Find Eventual Safe States/</id>
    <published>2020-07-20T22:30:29.000Z</published>
    <updated>2020-07-21T02:31:41.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-802-Find-Eventual-Safe-States-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">802. Find Eventual Safe States</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/find-eventual-safe-states/"><font size="4">🔗Question Link </font></a></p><h3 id="Examples">Examples</h3><p>In a directed graph, we start at some node and every turn, walk along a directed edge of the graph.  If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.</p><p>Now, say our starting node is eventually safe if and only if we must eventually walk to a terminal node.  More specifically, there exists a natural number K so that for any choice of where to walk, we must have stopped at a terminal node in less than K steps.</p><p>Which nodes are eventually safe?  Return them as an array in sorted order.</p><p>The directed graph has N nodes with labels 0, 1, …, N-1, where N is the length of graph.  The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]</span><br><span class="line">Output: [2,4,5,6]</span><br><span class="line">Here is a diagram of the above graph.</span><br></pre></td></tr></table></figure><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png" alt="leetcode 802"><a id="more"></a><h3 id="Solution">Solution</h3><h4 id="1-Topological-DFS">1. Topological + DFS</h4><p>We can use Topological sort and DFS to get the circle. Using seen[] to keep record of each node’s state in the looping.</p><p>Three different states:</p><ul><li>0 means <code>unvisited</code> unsafe</li><li>1 means <code>visiting</code>  unsafe</li><li>2 means <code>visited</code>   safe<br>We only need to add the node that has state == 2, which is the safe state.</li></ul><h4 id="2-Topologial-BFS-degree-solution">2. Topologial + BFS degree solution</h4><p>Originally we using BFS to find a circle in an indegree array. In this question we have to loop from the end point, so we need to reverse the whole graph to a indegree array. Then we just add the node with degree of 0 into the res array.</p><h3 id="Code">Code</h3><ul><li>Topological + DFS</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">eventualSafeNodes</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(graph == <span class="keyword">null</span> || graph.length == <span class="number">0</span>)<span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span>[] state = <span class="keyword">new</span> <span class="keyword">int</span>[graph.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graph.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dfs(graph,i,state))&#123;</span><br><span class="line">                res.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span> node, <span class="keyword">int</span>[] state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(state[node] !=<span class="number">0</span> )<span class="keyword">return</span> state[node] == <span class="number">2</span>;</span><br><span class="line">        state[node] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : graph[node])&#123;</span><br><span class="line">            <span class="keyword">if</span>(!dfs(graph,num,state))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        state[node] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(V+E) S:O(V)</p><ul><li>Topological + BFS + Reverse Graph</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">eventualSafeNodes</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = graph.length;</span><br><span class="line">        List&lt;Integer&gt;[] map = <span class="keyword">new</span> List[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            map[i] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] indegree = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num : graph[i])&#123;</span><br><span class="line">                map[num].add(i);</span><br><span class="line">                indegree[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(indegree[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                queue.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> node = queue.poll();</span><br><span class="line">            res.add(node);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num : map[node])&#123;</span><br><span class="line">                indegree[num]--;</span><br><span class="line">                <span class="keyword">if</span>(indegree[num] == <span class="number">0</span>)&#123;</span><br><span class="line">                    queue.add(num);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(V+E) S:O(V)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-802-Find-Eventual-Safe-States-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;802. Find Eventual Safe States&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/find-eventual-safe-states/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;In a directed graph, we start at some node and every turn, walk along a directed edge of the graph.  If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.&lt;/p&gt;
&lt;p&gt;Now, say our starting node is eventually safe if and only if we must eventually walk to a terminal node.  More specifically, there exists a natural number K so that for any choice of where to walk, we must have stopped at a terminal node in less than K steps.&lt;/p&gt;
&lt;p&gt;Which nodes are eventually safe?  Return them as an array in sorted order.&lt;/p&gt;
&lt;p&gt;The directed graph has N nodes with labels 0, 1, …, N-1, where N is the length of graph.  The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [2,4,5,6]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Here is a diagram of the above graph.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png&quot; alt=&quot;leetcode 802&quot;&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 351. Android Unlock Patterns</title>
    <link href="WangHngLeee.github.io/2020/07/17/351.%20Android%20Unlock%20Patterns/"/>
    <id>WangHngLeee.github.io/2020/07/17/351. Android Unlock Patterns/</id>
    <published>2020-07-17T22:30:29.000Z</published>
    <updated>2020-07-21T01:09:49.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-351-Android-Unlock-Patterns-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">351. Android Unlock Patterns</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/android-unlock-patterns/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given an Android 3x3 key lock screen and two integers m and n, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of m keys and maximum n keys.</p><p><strong>Rules for a valid pattern:</strong></p><ul><li>Each pattern must connect at least m keys and at most n keys.</li><li>All the keys must be distinct.</li><li>If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern.</li><li>No jumps through non selected key is allowed.</li><li>The order of keys used matters.</li></ul><img src="https://assets.leetcode.com/uploads/2018/10/12/android-unlock.png"><p>Explanation:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 1 | 2 | 3 |</span><br><span class="line">| 4 | 5 | 6 |</span><br><span class="line">| 7 | 8 | 9 |</span><br><span class="line"></span><br><span class="line">Invalid move: 4 - 1 - 3 - 6</span><br><span class="line">Line 1 - 3 passes through key 2 which had not been selected in the pattern.</span><br><span class="line"></span><br><span class="line">Invalid move: 4 - 1 - 9 - 2</span><br><span class="line">Line 1 - 9 passes through key 5 which had not been selected in the pattern.</span><br><span class="line"></span><br><span class="line">Valid move: 2 - 4 - 1 - 3 - 6</span><br><span class="line">Line 1 - 3 is valid because it passes through key 2, which had been selected in the pattern</span><br><span class="line"></span><br><span class="line">Valid move: 6 - 5 - 4 - 1 - 9 - 2</span><br><span class="line">Line 1 - 9 is valid because it passes through key 5, which had been selected in the pattern.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>First thought is using DFS to find all the possible path and count it’s total count. But it can be optimized by using a skip array.</p><p>The optimization idea is that 1,3,7,9 are symmetric, 2,4,6,8 are also symmetric. Hence we only calculate one among each group and multiply by 4.</p><p>Skip array store the number that between two numbers with only one interval.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cur: the current position</span></span><br><span class="line">    <span class="comment">// remain: the steps remaining</span></span><br><span class="line">    <span class="keyword">int</span>[][] skip = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">boolean</span> seen[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> remain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(remain &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(remain == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        seen[cur] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="comment">// If vis[i] is not visited and (two numbers are adjacent or skip number is already visited)</span></span><br><span class="line">            <span class="keyword">if</span>(!seen[i] &amp;&amp; (skip[cur][i] == <span class="number">0</span> || seen[skip[cur][i]])) &#123;</span><br><span class="line">                res+= DFS(i, remain - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        seen[cur] = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfPatterns</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        skip[<span class="number">1</span>][<span class="number">3</span>] = skip[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        skip[<span class="number">1</span>][<span class="number">7</span>] = skip[<span class="number">7</span>][<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">        skip[<span class="number">3</span>][<span class="number">9</span>] = skip[<span class="number">9</span>][<span class="number">3</span>] = <span class="number">6</span>;</span><br><span class="line">        skip[<span class="number">7</span>][<span class="number">9</span>] = skip[<span class="number">9</span>][<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">        skip[<span class="number">1</span>][<span class="number">9</span>] = skip[<span class="number">9</span>][<span class="number">1</span>] = skip[<span class="number">2</span>][<span class="number">8</span>] = skip[<span class="number">8</span>][<span class="number">2</span>] = skip[<span class="number">3</span>][<span class="number">7</span>] = skip[<span class="number">7</span>][<span class="number">3</span>] = skip[<span class="number">4</span>][<span class="number">6</span>] = skip[<span class="number">6</span>][<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// DFS search each length from m to n</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m; i &lt;= n; ++i) &#123;</span><br><span class="line">            res+= DFS(<span class="number">1</span>, i - <span class="number">1</span>) * <span class="number">4</span>; <span class="comment">// start with 1(same as 3, 7, 9 ), so we multiply 4 here.</span></span><br><span class="line">            res+= DFS(<span class="number">2</span>, i - <span class="number">1</span>) * <span class="number">4</span>; <span class="comment">// start with 2(same as 4,6,8), so we multiply 4 here.</span></span><br><span class="line">            res+= DFS(<span class="number">5</span>, i - <span class="number">1</span>); <span class="comment">// start with 5</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(V^2) S:O(V)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-351-Android-Unlock-Patterns-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;351. Android Unlock Patterns&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/android-unlock-patterns/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given an Android 3x3 key lock screen and two integers m and n, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of m keys and maximum n keys.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rules for a valid pattern:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each pattern must connect at least m keys and at most n keys.&lt;/li&gt;
&lt;li&gt;All the keys must be distinct.&lt;/li&gt;
&lt;li&gt;If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern.&lt;/li&gt;
&lt;li&gt;No jumps through non selected key is allowed.&lt;/li&gt;
&lt;li&gt;The order of keys used matters.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://assets.leetcode.com/uploads/2018/10/12/android-unlock.png&quot;&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;| 1 | 2 | 3 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 4 | 5 | 6 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 7 | 8 | 9 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Invalid move: 4 - 1 - 3 - 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Line 1 - 3 passes through key 2 which had not been selected in the pattern.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Invalid move: 4 - 1 - 9 - 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Line 1 - 9 passes through key 5 which had not been selected in the pattern.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Valid move: 2 - 4 - 1 - 3 - 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Line 1 - 3 is valid because it passes through key 2, which had been selected in the pattern&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Valid move: 6 - 5 - 4 - 1 - 9 - 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Line 1 - 9 is valid because it passes through key 5, which had been selected in the pattern.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Hard | 329. Longest Increasing Path in a Matrix</title>
    <link href="WangHngLeee.github.io/2020/07/17/329.%20Longest%20Increasing%20Path%20in%20a%20Matrix/"/>
    <id>WangHngLeee.github.io/2020/07/17/329. Longest Increasing Path in a Matrix/</id>
    <published>2020-07-17T22:27:29.000Z</published>
    <updated>2020-07-21T01:09:42.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-329-Longest-Increasing-Path-in-a-Matrix-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">329. Longest Increasing Path in a Matrix</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/longest-increasing-path-in-a-matrix/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><h3 id="Example">Example</h3><p>Given an integer matrix, find the length of the longest increasing path.</p><p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: nums = </span><br><span class="line">[</span><br><span class="line">  [9,9,4],</span><br><span class="line">  [6,6,8],</span><br><span class="line">  [2,1,1]</span><br><span class="line">] </span><br><span class="line">Output: 4 </span><br><span class="line">Explanation: The longest increasing path is [1, 2, 6, 9].</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: nums = </span><br><span class="line">[</span><br><span class="line">  [3,4,5],</span><br><span class="line">  [3,2,6],</span><br><span class="line">  [2,2,1]</span><br><span class="line">] </span><br><span class="line">Output: 4 </span><br><span class="line">Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>It is a typical <code>recursive + memo</code> question. We might think using db at first, but it is unnecessary. We can just DFS every number and keep a memo of it’s max length of increasing path in <code>memo[i][j]</code>.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span>[][] memo;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        m = matrix.length;</span><br><span class="line">        n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] memo = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> len = dfs(matrix, i, j, memo);</span><br><span class="line">                max = Math.max(max, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span>[][] memo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(memo[i][j] != <span class="number">0</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] dir: dirs) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i + dir[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y = j + dir[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n || matrix[x][y] &lt;= matrix[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">            max = Math.max(max,  <span class="number">1</span> + dfs(matrix, x, y, memo));</span><br><span class="line">        &#125;</span><br><span class="line">        memo[i][j] = max;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T: O(n^2) S: O(n^2)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-329-Longest-Increasing-Path-in-a-Matrix-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;329. Longest Increasing Path in a Matrix&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-increasing-path-in-a-matrix/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given an integer matrix, find the length of the longest increasing path.&lt;/p&gt;
&lt;p&gt;From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: nums = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [9,9,4],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [6,6,8],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [2,1,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 4 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The longest increasing path is [1, 2, 6, 9].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: nums = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [3,4,5],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [3,2,6],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [2,2,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 4 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 348. Design Tic-Tac-Toe</title>
    <link href="WangHngLeee.github.io/2020/07/17/348.%20Design%20Tic-Tac-Toe/"/>
    <id>WangHngLeee.github.io/2020/07/17/348. Design Tic-Tac-Toe/</id>
    <published>2020-07-17T22:27:29.000Z</published>
    <updated>2020-07-21T01:09:43.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-348-Design-Tic-Tac-Toe-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">348. Design Tic-Tac-Toe</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/design-tic-tac-toe/"><font size="4">🔗Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Design a Tic-tac-toe game that is played between two players on a n x n grid.</p><p>You may assume the following rules:</p><p>A move is guaranteed to be valid and is placed on an empty block.<br>Once a winning condition is reached, no more moves is allowed.<br>A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Given n = 3, assume that player 1 is &quot;X&quot; and player 2 is &quot;O&quot; in the board.</span><br><span class="line"></span><br><span class="line">TicTacToe toe = new TicTacToe(3);</span><br><span class="line"></span><br><span class="line">toe.move(0, 0, 1); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| | |</span><br><span class="line">| | | |    // Player 1 makes a move at (0, 0).</span><br><span class="line">| | | |</span><br><span class="line"></span><br><span class="line">toe.move(0, 2, 2); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">| | | |    // Player 2 makes a move at (0, 2).</span><br><span class="line">| | | |</span><br><span class="line"></span><br><span class="line">toe.move(2, 2, 1); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">| | | |    // Player 1 makes a move at (2, 2).</span><br><span class="line">| | |X|</span><br><span class="line"></span><br><span class="line">toe.move(1, 1, 2); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">| |O| |    // Player 2 makes a move at (1, 1).</span><br><span class="line">| | |X|</span><br><span class="line"></span><br><span class="line">toe.move(2, 0, 1); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">| |O| |    // Player 1 makes a move at (2, 0).</span><br><span class="line">|X| |X|</span><br><span class="line"></span><br><span class="line">toe.move(1, 0, 2); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">|O|O| |    // Player 2 makes a move at (1, 0).</span><br><span class="line">|X| |X|</span><br><span class="line"></span><br><span class="line">toe.move(2, 1, 1); -&gt; Returns 1 (player 1 wins)</span><br><span class="line">|X| |O|</span><br><span class="line">|O|O| |    // Player 1 makes a move at (2, 1).</span><br><span class="line">|X|X|X|</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>It’s a simple question. We can use two array to store the score in rows and cols. And keep two record for diag and antidiag directions. If anyone of them reach to the size, then return current player. Otherwise just return 0.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicTacToe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] rows;</span><br><span class="line">    <span class="keyword">int</span>[] cols;</span><br><span class="line">    <span class="keyword">int</span> diag;</span><br><span class="line">    <span class="keyword">int</span> antidiag;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TicTacToe</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        rows = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        cols = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        diag = <span class="number">0</span>;</span><br><span class="line">        antidiag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Player &#123;player&#125; makes a move at (&#123;row&#125;, &#123;col&#125;).</span></span><br><span class="line"><span class="comment">        <span class="doctag">@param</span> row The row of the board.</span></span><br><span class="line"><span class="comment">        <span class="doctag">@param</span> col The column of the board.</span></span><br><span class="line"><span class="comment">        <span class="doctag">@param</span> player The player, can be either 1 or 2.</span></span><br><span class="line"><span class="comment">        <span class="doctag">@return</span> The current winning condition, can be either:</span></span><br><span class="line"><span class="comment">                0: No one wins.</span></span><br><span class="line"><span class="comment">                1: Player 1 wins.</span></span><br><span class="line"><span class="comment">                2: Player 2 wins. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> step = player == <span class="number">1</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        rows[row] += step;</span><br><span class="line">        cols[col] += step;</span><br><span class="line">        <span class="keyword">if</span>(row == col)&#123;</span><br><span class="line">            diag+=step;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(col == cols.length - row - <span class="number">1</span>)&#123;</span><br><span class="line">            antidiag+=step;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = rows.length;</span><br><span class="line">        <span class="keyword">if</span>(Math.abs(rows[row]) == size || Math.abs(cols[col]) == size || Math.abs(diag) == size || Math.abs(antidiag) == size)<span class="keyword">return</span> player;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-348-Design-Tic-Tac-Toe-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;348. Design Tic-Tac-Toe&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/design-tic-tac-toe/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Design a Tic-tac-toe game that is played between two players on a n x n grid.&lt;/p&gt;
&lt;p&gt;You may assume the following rules:&lt;/p&gt;
&lt;p&gt;A move is guaranteed to be valid and is placed on an empty block.&lt;br&gt;
Once a winning condition is reached, no more moves is allowed.&lt;br&gt;
A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Given n = 3, assume that player 1 is &amp;quot;X&amp;quot; and player 2 is &amp;quot;O&amp;quot; in the board.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TicTacToe toe = new TicTacToe(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(0, 0, 1); -&amp;gt; Returns 0 (no one wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| | |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | | |    // Player 1 makes a move at (0, 0).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | | |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(0, 2, 2); -&amp;gt; Returns 0 (no one wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |O|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | | |    // Player 2 makes a move at (0, 2).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | | |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(2, 2, 1); -&amp;gt; Returns 0 (no one wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |O|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | | |    // Player 1 makes a move at (2, 2).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | |X|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(1, 1, 2); -&amp;gt; Returns 0 (no one wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |O|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| |O| |    // Player 2 makes a move at (1, 1).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | |X|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(2, 0, 1); -&amp;gt; Returns 0 (no one wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |O|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| |O| |    // Player 1 makes a move at (2, 0).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |X|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(1, 0, 2); -&amp;gt; Returns 0 (no one wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |O|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|O|O| |    // Player 2 makes a move at (1, 0).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |X|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(2, 1, 1); -&amp;gt; Returns 1 (player 1 wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |O|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|O|O| |    // Player 1 makes a move at (2, 1).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X|X|X|&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Design" scheme="WangHngLeee.github.io/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 106 / Review 01</title>
    <link href="WangHngLeee.github.io/2020/07/10/review1/"/>
    <id>WangHngLeee.github.io/2020/07/10/review1/</id>
    <published>2020-07-10T16:27:29.000Z</published>
    <updated>2020-07-18T01:09:15.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-398-Random-Pick-Index-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">398. Random Pick Index</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/random-pick-index/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.</p><p>Note:<br>The array size can be very large. Solution that uses too much extra space will not pass the judge.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">int[] nums = new int[] &#123;1,2,3,3,3&#125;;</span><br><span class="line">Solution solution = new Solution(nums);</span><br><span class="line"></span><br><span class="line">// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.</span><br><span class="line">solution.pick(3);</span><br><span class="line"></span><br><span class="line">// pick(1) should return 0. Since in the array only nums[0] is equal to 1.</span><br><span class="line">solution.pick(1);</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nums;</span><br><span class="line">    Random rand;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">        <span class="keyword">this</span>.rand = <span class="keyword">new</span> Random();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pick</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != target)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">// current num is the target</span></span><br><span class="line">                total++; <span class="comment">// caculate the total</span></span><br><span class="line">                <span class="keyword">if</span>(rand.nextInt(total) == <span class="number">0</span>)&#123;</span><br><span class="line">                res = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Consider the example like</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3,3,3&#125; with target 3</span><br></pre></td></tr></table></figure><p>We want to select 2,3,4 with a probability of <code>1/3</code> each.</p><p>2 : It’s probability of selection is 1 * (1/2) * (2/3) = 1/3<br>3 : It’s probability of selection is (1/2) * (2/3) = 1/3<br>4 : It’s probability of selection is just 1/3</p><p>So they are each randomly selected.</p><a id="more"></a><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-394-Decode-String-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">394. Decode String</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/decode-string/"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples-v2">Examples</h3><p>Given an encoded string, return its decoded string.</p><p>The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p><p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p><p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like 3a or 2[4].</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: s = &quot;3[a]2[bc]&quot;</span><br><span class="line">Output: &quot;aaabcbc&quot;</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: s = &quot;3[a2[c]]&quot;</span><br><span class="line">Output: &quot;accaccacc&quot;</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="string">""</span>; <span class="comment">//corner case</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Stack&lt;StringBuilder&gt; sbstack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; intstack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> tempcount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(Character.isDigit(c))&#123;</span><br><span class="line">                tempcount = tempcount*<span class="number">10</span> + c -<span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'['</span>)&#123; <span class="comment">// start</span></span><br><span class="line">                intstack.push(tempcount);</span><br><span class="line">                sbstack.push(sb);</span><br><span class="line">                tempcount = <span class="number">0</span>; <span class="comment">// reset count</span></span><br><span class="line">                sb = <span class="keyword">new</span> StringBuilder(); <span class="comment">//reset stringbuilder</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">']'</span>)&#123;</span><br><span class="line">                StringBuilder swap = sb;</span><br><span class="line">                sb = sbstack.pop();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=intstack.pop(); i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">                    sb.append(swap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Keep two stack of both index and stringbuilder. When we meet <code>[</code> then we add previous stringbuilder and count to the stack, and reset both stringbuider and count. When we meet <code>]</code> we have to add current stringbuilder to the previous stringbuilder in the stack.</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-385-Mini-Parser-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">385. Mini Parser</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/mini-parser/"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples-v3">Examples</h3><p>Given a nested list of integers represented as a string, implement a parser to deserialize it.</p><p>Each element is either an integer, or a list – whose elements may also be integers or other lists.</p><p>Note: You may assume that the string is well-formed:</p><p>String is non-empty.<br>String does not contain white spaces.<br>String contains only digits 0-9, [, - , ].</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Given s = &quot;324&quot;,</span><br><span class="line"></span><br><span class="line">You should return a NestedInteger object which contains a single integer 324.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Given s = &quot;[123,[456,[789]]]&quot;,</span><br><span class="line"></span><br><span class="line">Return a NestedInteger object containing a nested list with 2 elements:</span><br><span class="line"></span><br><span class="line">1. An integer containing value 123.</span><br><span class="line">2. A nested list containing two elements:</span><br><span class="line">    i.  An integer containing value 456.</span><br><span class="line">    ii. A nested list with one element:</span><br><span class="line">         a. An integer containing value 789.</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> NestedInteger <span class="title">deserialize</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!s.startsWith(<span class="string">"["</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NestedInteger(Integer.valueOf(s));</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;NestedInteger&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        NestedInteger res = <span class="keyword">new</span> NestedInteger();</span><br><span class="line">        stack.push(res);</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'['</span>)&#123;</span><br><span class="line">                NestedInteger cur = <span class="keyword">new</span> NestedInteger();</span><br><span class="line">                stack.peek().add(cur);</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                start =i+ <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">']'</span> || c ==<span class="string">','</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; start)&#123;</span><br><span class="line">                    Integer val = Integer.valueOf(s.substring(start,i));</span><br><span class="line">                    stack.peek().add(<span class="keyword">new</span> NestedInteger(val));</span><br><span class="line">                &#125;</span><br><span class="line">                start=i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>( c == <span class="string">']'</span>)&#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we meet <code>[</code> it means we have to add new nestedinteger into the peek one in stack.And then add current into the stack to prepare for the upcoming nestedinteger list. When we meet <code>]</code> it means we get the end of current nestedinteger. So we just pop up the current peek of stack.</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-384-Shuffle-an-Array-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">384. Shuffle an Array</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/shuffle-an-array/"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples-v4">Examples</h3><p>Shuffle a set of numbers without duplicates.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">// Init an array with set 1, 2, and 3.</span><br><span class="line">int[] nums = &#123;1,2,3&#125;;</span><br><span class="line">Solution solution = new Solution(nums);</span><br><span class="line"></span><br><span class="line">// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.</span><br><span class="line">solution.shuffle();</span><br><span class="line"></span><br><span class="line">// Resets the array back to its original configuration [1,2,3].</span><br><span class="line">solution.reset();</span><br><span class="line"></span><br><span class="line">// Returns the random shuffling of array [1,2,3].</span><br><span class="line">solution.shuffle();</span><br></pre></td></tr></table></figure><h3 id="Solution-v4">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nums;</span><br><span class="line">    Random rand;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">        rand = <span class="keyword">new</span> Random();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Resets the array to its original configuration and return it. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reset() &#123;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns a random shuffling of the array. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] shuffle() &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span>[] clone = nums.clone();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = rand.nextInt(i+<span class="number">1</span>);</span><br><span class="line">            swap(clone, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] clone, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = clone[i];</span><br><span class="line">        clone[i] = clone[j];</span><br><span class="line">        clone[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s a bit like question 398, both need to use Random to generate a random index in order to make sure the posibility is equal to each num. In this question, when loop each num in the array, we have to get a random index.</p><p>Proof: Suppose this algorithm works, i.e. for each position j (starting from 0), the probability of any number in the range[0,j] to be at position j is 1/(1+j).</p><p><code>int i = random.nextInt(j + 1):</code></p><p>(1) If i == j, <code>nums[j]</code> does not need to change its position, which has probability 1/(1+j).</p><p>(2) if i !=j, <code>nums[j]</code> needs to be swapped with nums[i]. The probability of any number x in the range <code>[0,j-1]</code> to be at position <code>j = nums[j]</code> changes its position * x is at position i<br>= <code>(1-1/(1+j)) * (1/j) = 1/(1+j)</code></p><p>Each number has equal probability to be at any position.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-398-Random-Pick-Index-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;398. Random Pick Index&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/random-pick-index/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;
The array size can be very large. Solution that uses too much extra space will not pass the judge.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int[] nums = new int[] &amp;#123;1,2,3,3,3&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Solution solution = new Solution(nums);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;solution.pick(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// pick(1) should return 0. Since in the array only nums[0] is equal to 1.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;solution.pick(1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Random rand;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.nums = nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.rand = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res = -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;nums.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nums[i] != target)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// current num is the target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                total++; &lt;span class=&quot;comment&quot;&gt;// caculate the total&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(rand.nextInt(total) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                res = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Consider the example like&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;1,2,3,3,3&amp;#125; with target 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We want to select 2,3,4 with a probability of &lt;code&gt;1/3&lt;/code&gt; each.&lt;/p&gt;
&lt;p&gt;2 : It’s probability of selection is 1 * (1/2) * (2/3) = 1/3&lt;br&gt;
3 : It’s probability of selection is (1/2) * (2/3) = 1/3&lt;br&gt;
4 : It’s probability of selection is just 1/3&lt;/p&gt;
&lt;p&gt;So they are each randomly selected.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Second-Round" scheme="WangHngLeee.github.io/tags/Second-Round/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 105 / String(3) 💪</title>
    <link href="WangHngLeee.github.io/2020/07/04/string03/"/>
    <id>WangHngLeee.github.io/2020/07/04/string03/</id>
    <published>2020-07-04T17:53:35.000Z</published>
    <updated>2020-07-04T20:59:43.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1268-Search-Suggestions-Systeme-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1268. Search Suggestions Systeme</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/search-suggestions-system/"><font size="4">🔗Question Link </font></a></p><h3 id="Example">Example</h3><p>Given an array of strings <code>products</code> and a string <code>searchWord</code>. We want to design a system that suggests at most three product names from <code>products</code> after each character of <code>searchWord</code> is typed. Suggested <code>products</code> should have common prefix with the <code>searchWord</code>. If there are more than three products with a common prefix return the three lexicographically minimums <code>products</code>.</p><p>Return list of lists of the suggested <code>products</code> after each character of <code>searchWord</code> is typed.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: products = [&quot;mobile&quot;,&quot;mouse&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mousepad&quot;], searchWord = &quot;mouse&quot;</span><br><span class="line">Output: [</span><br><span class="line">[&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],</span><br><span class="line">[&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],</span><br><span class="line">[&quot;mouse&quot;,&quot;mousepad&quot;],</span><br><span class="line">[&quot;mouse&quot;,&quot;mousepad&quot;],</span><br><span class="line">[&quot;mouse&quot;,&quot;mousepad&quot;]</span><br><span class="line">]</span><br><span class="line">Explanation: products sorted lexicographically = [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mouse&quot;,&quot;mousepad&quot;]</span><br><span class="line">After typing m and mo all products match and we show user [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;]</span><br><span class="line">After typing mou, mous and mouse the system suggests [&quot;mouse&quot;,&quot;mousepad&quot;]</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><h4 id="1-Trie">1. Trie</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span>&#123;</span><br><span class="line">        Trie[] children = <span class="keyword">new</span> Trie[<span class="number">26</span>];</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; suggestedProducts(String[] products, String searchWord) &#123;</span><br><span class="line">        Arrays.sort(products);</span><br><span class="line">        Trie root = <span class="keyword">new</span> Trie();</span><br><span class="line">        <span class="keyword">for</span>(String p : products)&#123;</span><br><span class="line">            insert(p,root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> search(searchWord,root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String p, Trie root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : p.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.children[c-<span class="string">'a'</span>] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                root.children[c-<span class="string">'a'</span>] = <span class="keyword">new</span> Trie();</span><br><span class="line">            &#125;</span><br><span class="line">            root = root.children[c-<span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">if</span>(root.list.size()&lt;<span class="number">3</span>)&#123;</span><br><span class="line">                root.list.add(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; search(String str, Trie root)&#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : str.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                root = root.children[c-<span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(root == <span class="keyword">null</span> ? Arrays.asList() : root.list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s clearly that it’s trie problem at first. So we can define a new class called Trie and initialize a new Trie structure. First we sort the products list. Then we insert 3 produsts to each character node. Then we search from the start of  <code>searchWord</code> . If no trie exist then we just add a blank array to res.</p><img src="https://i.ibb.co/PZYKX4d/Capture.jpg"><p>T: O(m * n + L)</p><p>Sorting cost time O(m * n), due to involving comparing String, which cost time O(m) for each comparison, building Trie cost O(m * n).</p><p>S: O(m * n + L * m)</p><p>Including return list ans, where m = average length of products, n = products.length, L = searchWord.length().</p><h4 id="2-Binary-Search">2. Binary Search</h4><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; suggestedProducts(String[] products, String searchWord) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(products);</span><br><span class="line">        List&lt;String&gt; productsList = Arrays.asList(products);</span><br><span class="line">        TreeMap&lt;String,Integer&gt; treemap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// adding products into treemap</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;products.length; i++)&#123;</span><br><span class="line">            treemap.put(products[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// start binary search</span></span><br><span class="line">        String key = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : searchWord.toCharArray())&#123;</span><br><span class="line">            key+=c;</span><br><span class="line">            String lowerbound = treemap.ceilingKey(key);</span><br><span class="line">            String upperbound = treemap.floorKey(key+<span class="string">"~"</span>);</span><br><span class="line">            <span class="keyword">if</span>(lowerbound == <span class="keyword">null</span> || upperbound == <span class="keyword">null</span>)<span class="keyword">break</span>;</span><br><span class="line">            res.add(productsList.subList( treemap.get(lowerbound), Math.min(treemap.get(lowerbound)+<span class="number">3</span>, treemap.get(upperbound)+<span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(res.size() &lt; searchWord.length())&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For example, if A[i] is a prefix of A[j],<br>A[i] must be the prefix of A[i + 1], A[i + 2], …, A[j].</p><p>We can utilize the advantage of TreeMap like auto-sorting and cellingKey / floorKey functions. After the strings are sorted in treemap, then we can using ceilingKey to find the max one that is less than current string and floorKey to find the min one that is larget than current string.</p><p>Then we can add the strings that between the upperbound and lowerbound to the res.</p><p>T:O(NlogN) for sorting</p><p>S:O(logN) for quick sort.</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-539-Minimum-Time-Difference-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">539. Minimum Time Difference</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/minimum-time-difference/"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v2">Example</h3><p>Given a list of 24-hour clock time points in “Hour:Minutes” format, find the minimum minutes difference between any two time points in the list.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [&quot;23:59&quot;,&quot;00:00&quot;]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note:</span><br><span class="line">The number of time points in the given list is at least 2 and won&apos;t exceed 20000.</span><br><span class="line">The input time is legal and ranges from 00:00 to 23:59.</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMinDifference</span><span class="params">(List&lt;String&gt; timePoints)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timePoints == <span class="keyword">null</span> || timePoints.size() == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">24</span>*<span class="number">60</span>];</span><br><span class="line">        <span class="keyword">for</span>(String str: timePoints)&#123;</span><br><span class="line">            String[] temp = str.split(<span class="string">":"</span>);</span><br><span class="line">            <span class="keyword">int</span> hour = Integer.valueOf(temp[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> minute = Integer.valueOf(temp[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(bucket[hour*<span class="number">60</span>+minute] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            min = Math.min(min,hour*<span class="number">60</span>+minute);</span><br><span class="line">            max = Math.max(max,hour*<span class="number">60</span>+minute);</span><br><span class="line">            bucket[hour*<span class="number">60</span>+minute] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> min_diff = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> prev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=min; i&lt;=max; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bucket[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>( i == min)&#123;</span><br><span class="line">                    min_diff = Math.min(min_diff, Math.min(max-min, <span class="number">1440</span>-max+min));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    min_diff = Math.min(min_diff,i-prev);</span><br><span class="line">                &#125;</span><br><span class="line">                prev = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min_diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The idea is simple. There is 24*60=1440 minutes per day, so we can create an array with size of 1440 to store the each timepoint to check whether they have appeared before. If so then we just return 0 beause the difference is 0 between two same time points. Otherwise we need to find the min and max points in the given list. And using prev to store the previous timepoints.</p><p>The graph of the timeline is like this:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 - - - min - - - max - - -1440 -</span><br><span class="line">⬆️ - - - - - - - - - - - - - - - ⬇️ // actually 1440 and 0 are the same point</span><br></pre></td></tr></table></figure><p>And there is two situations:</p><ul><li>Current timepoint is min:</li></ul><p>So we only have two part to compare:<br><code>max - min</code>, <code>1440-(max-min)</code>, which is the parts that the timepoints of <code>0 -&gt; min</code> and <code>max -&gt;1440</code></p><ul><li>Current timepoint is not min :</li></ul><p>Just using <code>curr-prev</code> to get the temp time difference and compare it with <code>min_diff</code>.</p><p>T:O(N) S:O(1)</p><hr><h2 id="table-tr-td-bgcolor-28B463-font-color-white-443-String-Compression-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">443. String Compression</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/string-compression/"><font size="4">🔗 Question Link </font></a></p><h3 id="Example-v3">Example</h3><p>Given an array of characters, compress it in-place.</p><p>The length after compression must always be smaller than or equal to the original array.</p><p>Every element of the array should be a character (not int) of length 1.</p><p>After you are done modifying the input array in-place, return the new length of the array.</p><p>Follow up:</p><p>Could you solve it using only O(1) extra space?</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">&quot;aa&quot; is replaced by &quot;a2&quot;. &quot;bb&quot; is replaced by &quot;b2&quot;. &quot;ccc&quot; is replaced by &quot;c3&quot;.</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><p>At first we can easily come up with the <code>HashMap</code> solution. But it doesn’t meet the O(1) space requirement.</p><p>So here is the standard solution.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compress</span><span class="params">(<span class="keyword">char</span>[] chars)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(chars == <span class="keyword">null</span> || chars.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> resindex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; chars.length)&#123;</span><br><span class="line">            <span class="keyword">char</span> currchar = chars[index];</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; chars.length &amp;&amp; currchar == chars[index] )&#123;</span><br><span class="line">                index++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            chars[resindex] = currchar;</span><br><span class="line">            resindex++;</span><br><span class="line">            <span class="keyword">if</span>(count!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c : Integer.toString(count).toCharArray())&#123;</span><br><span class="line">                    chars[resindex] = c;</span><br><span class="line">                    resindex++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resindex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kind of brute force. Keep track of current index and the final index. Then add the count of each char to array after itself. Finally return the final <code>resindex</code> which is the length of new array.</p><p>T:O(N) S:O(1)</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-1268-Search-Suggestions-Systeme-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;1268. Search Suggestions Systeme&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/search-suggestions-system/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given an array of strings &lt;code&gt;products&lt;/code&gt; and a string &lt;code&gt;searchWord&lt;/code&gt;. We want to design a system that suggests at most three product names from &lt;code&gt;products&lt;/code&gt; after each character of &lt;code&gt;searchWord&lt;/code&gt; is typed. Suggested &lt;code&gt;products&lt;/code&gt; should have common prefix with the &lt;code&gt;searchWord&lt;/code&gt;. If there are more than three products with a common prefix return the three lexicographically minimums &lt;code&gt;products&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Return list of lists of the suggested &lt;code&gt;products&lt;/code&gt; after each character of &lt;code&gt;searchWord&lt;/code&gt; is typed.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: products = [&amp;quot;mobile&amp;quot;,&amp;quot;mouse&amp;quot;,&amp;quot;moneypot&amp;quot;,&amp;quot;monitor&amp;quot;,&amp;quot;mousepad&amp;quot;], searchWord = &amp;quot;mouse&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;mobile&amp;quot;,&amp;quot;moneypot&amp;quot;,&amp;quot;monitor&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;mobile&amp;quot;,&amp;quot;moneypot&amp;quot;,&amp;quot;monitor&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;mouse&amp;quot;,&amp;quot;mousepad&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;mouse&amp;quot;,&amp;quot;mousepad&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;mouse&amp;quot;,&amp;quot;mousepad&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: products sorted lexicographically = [&amp;quot;mobile&amp;quot;,&amp;quot;moneypot&amp;quot;,&amp;quot;monitor&amp;quot;,&amp;quot;mouse&amp;quot;,&amp;quot;mousepad&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After typing m and mo all products match and we show user [&amp;quot;mobile&amp;quot;,&amp;quot;moneypot&amp;quot;,&amp;quot;monitor&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After typing mou, mous and mouse the system suggests [&amp;quot;mouse&amp;quot;,&amp;quot;mousepad&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;h4 id=&quot;1-Trie&quot;&gt;1. Trie&lt;/h4&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Trie&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Trie[] children = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Trie[&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;String&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; suggestedProducts(String[] products, String searchWord) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Arrays.sort(products);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Trie root = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Trie();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(String p : products)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            insert(p,root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; search(searchWord,root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String p, Trie root)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c : p.toCharArray())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root.children[c-&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;] == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                root.children[c-&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Trie();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            root = root.children[c-&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root.list.size()&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                root.list.add(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; search(String str, Trie root)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c : str.toCharArray())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                root = root.children[c-&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res.add(root == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ? Arrays.asList() : root.list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It’s clearly that it’s trie problem at first. So we can define a new class called Trie and initialize a new Trie structure. First we sort the products list. Then we insert 3 produsts to each character node. Then we search from the start of  &lt;code&gt;searchWord&lt;/code&gt; . If no trie exist then we just add a blank array to res.&lt;/p&gt;
&lt;img src=&quot;https://i.ibb.co/PZYKX4d/Capture.jpg&quot;&gt;
&lt;p&gt;T: O(m * n + L)&lt;/p&gt;
&lt;p&gt;Sorting cost time O(m * n), due to involving comparing String, which cost time O(m) for each comparison, building Trie cost O(m * n).&lt;/p&gt;
&lt;p&gt;S: O(m * n + L * m)&lt;/p&gt;
&lt;p&gt;Including return list ans, where m = average length of products, n = products.length, L = searchWord.length().&lt;/p&gt;
&lt;h4 id=&quot;2-Binary-Search&quot;&gt;2. Binary Search&lt;/h4&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="String" scheme="WangHngLeee.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 104 / DP(1) 💪</title>
    <link href="WangHngLeee.github.io/2020/07/03/DP01/"/>
    <id>WangHngLeee.github.io/2020/07/03/DP01/</id>
    <published>2020-07-03T17:53:35.000Z</published>
    <updated>2020-07-03T22:24:50.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-256-Paint-House-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">256. Paint House</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/paint-house/"><font size="4">🔗 Question Link </font></a></p><h3 id="Example">Example</h3><p>There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p><p>The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on… Find the minimum cost to paint all houses.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note:</span><br><span class="line">All costs are positive integers.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: [[17,2,17],[16,16,5],[14,3,19]]</span><br><span class="line">Output: 10</span><br><span class="line">Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. </span><br><span class="line">             Minimum cost: 2 + 5 + 3 = 10.</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(costs == <span class="keyword">null</span> || costs.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//corner case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;costs.length; i++)&#123;</span><br><span class="line">            costs[i][<span class="number">0</span>] += Math.min(costs[i-<span class="number">1</span>][<span class="number">1</span>],costs[i-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            costs[i][<span class="number">1</span>] += Math.min(costs[i-<span class="number">1</span>][<span class="number">0</span>],costs[i-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            costs[i][<span class="number">2</span>] += Math.min(costs[i-<span class="number">1</span>][<span class="number">1</span>],costs[i-<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = costs.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.min(Math.min(costs[n][<span class="number">0</span>],costs[n][<span class="number">1</span>]),costs[n][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because there is only 3 colors, so we can easily updating different colors. The 1st row is the prices for the 1st house, we can change the matrix to present sum of prices from the 2nd row. i.e, the costs[1][0] represent minimum price to paint the second house red plus the 1st house. Choosing min value between the different color of the above line.</p><p>T:O(N) S:O(1)</p><a id="more"></a><hr><h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-265-Paint-House-II-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">265. Paint House II</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/paint-house-ii/"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v2">Example</h3><p>There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p><p>The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on… Find the minimum cost to paint all houses.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note:</span><br><span class="line">All costs are positive integers.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: [[1,5,3],[2,9,4]]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; </span><br><span class="line">             Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5.</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><p>Different from the previous painting problem, this question need k different colors.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostII</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (costs == <span class="keyword">null</span> || costs.length == <span class="number">0</span> || costs[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = costs.length;</span><br><span class="line">        <span class="keyword">int</span> n = costs[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (k == j) <span class="keyword">continue</span>;</span><br><span class="line">                    min = Math.min(min, dp[i - <span class="number">1</span>][k]);</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] = (min == Integer.MAX_VALUE ? <span class="number">0</span> : min) + costs[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res = Math.min(res, dp[m][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DP</p><p>dp[i][k] means paint ith house using k color.</p><p>To compute dp[i][j], we need to find out the minimum cost of previous house using different color.</p><p>Iterate all possible color of previous house except the color of current house to find min cost.</p><p>T:O(N * k^2) S:O(N*k)</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1277-Count-Square-Submatrices-with-All-Ones-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1277. Count Square Submatrices with All Ones</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/count-square-submatrices-with-all-ones/"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v3">Example</h3><p>Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: matrix =</span><br><span class="line">[</span><br><span class="line">  [0,1,1,1],</span><br><span class="line">  [1,1,1,1],</span><br><span class="line">  [0,1,1,1]</span><br><span class="line">]</span><br><span class="line">Output: 15</span><br><span class="line">Explanation: </span><br><span class="line">There are 10 squares of side 1.</span><br><span class="line">There are 4 squares of side 2.</span><br><span class="line">There is  1 square of side 3.</span><br><span class="line">Total number of squares = 10 + 4 + 1 = 15.</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSquares</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        matrix[i][j] = Math.min(Math.min(matrix[i][j-<span class="number">1</span>],matrix[i-<span class="number">1</span>][j]),matrix[i-<span class="number">1</span>][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res+=matrix[i][j];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Key point is that we take the right-bottom most point to find the side of square. In DP process, we choose the min side from the previous position ( left, up and left-up). Then we change the current dp[i][j] to be that value. And add it to the res.</p><p>T:O(MN) S:O(N)</p><hr><h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-1220-Count-Vowels-Permutation-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">1220. Count Vowels Permutation</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/count-vowels-permutation/"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v4">Example</h3><p>Given an integer n, your task is to count how many strings of length n can be formed under the following rules:</p><p>Each character is a lower case vowel (‘a’, ‘e’, ‘i’, ‘o’, ‘u’)</p><p>Each vowel ‘a’ may only be followed by an ‘e’.</p><p>Each vowel ‘e’ may only be followed by an ‘a’ or an ‘i’.</p><p>Each vowel ‘i’ may not be followed by another ‘i’.</p><p>Each vowel ‘o’ may only be followed by an ‘i’ or a ‘u’.</p><p>Each vowel ‘u’ may only be followed by an ‘a’.</p><p>Since the answer may be too large, return it modulo 10^9 + 7.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: n = 1</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: All possible strings are: &quot;a&quot;, &quot;e&quot;, &quot;i&quot; , &quot;o&quot; and &quot;u&quot;.</span><br></pre></td></tr></table></figure><h3 id="Solution-v4">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countVowelPermutation</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> MOD = (<span class="keyword">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">long</span>[][] dp = <span class="keyword">new</span> <span class="keyword">long</span>[n + <span class="number">1</span>][<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            0: a</span></span><br><span class="line"><span class="comment">            1: e</span></span><br><span class="line"><span class="comment">            2: i</span></span><br><span class="line"><span class="comment">            3: o</span></span><br><span class="line"><span class="comment">            4: u</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">0</span>] = (dp[i][<span class="number">4</span>] + dp[i][<span class="number">1</span>] + dp[i][<span class="number">2</span>]) % MOD;</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">1</span>] = (dp[i][<span class="number">0</span>] + dp[i][<span class="number">2</span>]) % MOD;</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">2</span>] = (dp[i][<span class="number">3</span>] + dp[i][<span class="number">1</span>]) % MOD;</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">3</span>] = (dp[i][<span class="number">2</span>]) % MOD;</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">4</span>] = (dp[i][<span class="number">2</span>] + dp[i][<span class="number">3</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            ans = (ans + dp[n][i]) % MOD;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using long instead of int in dp[] array. We also need to mod intermediate result. Transition function is easily to get. Which is updating the current sum by adding all possible words after the current character.</p><p>T:O(N) S:O(N)</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-256-Paint-House-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;256. Paint House&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/paint-house/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.&lt;/p&gt;
&lt;p&gt;The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on… Find the minimum cost to paint all houses.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Note:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;All costs are positive integers.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [[17,2,17],[16,16,5],[14,3,19]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             Minimum cost: 2 + 5 + 3 = 10.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minCost&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] costs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(costs == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || costs.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//corner case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;costs.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            costs[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] += Math.min(costs[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],costs[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            costs[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] += Math.min(costs[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],costs[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            costs[i][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] += Math.min(costs[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],costs[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = costs.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Math.min(Math.min(costs[n][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],costs[n][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]),costs[n][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Because there is only 3 colors, so we can easily updating different colors. The 1st row is the prices for the 1st house, we can change the matrix to present sum of prices from the 2nd row. i.e, the costs[1][0] represent minimum price to paint the second house red plus the 1st house. Choosing min value between the different color of the above line.&lt;/p&gt;
&lt;p&gt;T:O(N) S:O(1)&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="DP" scheme="WangHngLeee.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 103 / Array(3) 💪</title>
    <link href="WangHngLeee.github.io/2020/07/02/array03/"/>
    <id>WangHngLeee.github.io/2020/07/02/array03/</id>
    <published>2020-07-02T17:53:35.000Z</published>
    <updated>2020-07-02T21:26:13.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-643-Maximum-Average-Subarray-I-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">643. Maximum Average Subarray I</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/maximum-average-subarray-i/"><font size="4">🔗 Question Link </font></a></p><h3 id="Example">Example</h3><p>Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [1,12,-5,-6,50,3], k = 4</span><br><span class="line">Output: 12.75</span><br><span class="line">Explanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note:</span><br><span class="line">1 &lt;= k &lt;= n &lt;= 30,000.</span><br><span class="line">Elements of the given array will be in the range [-10,000, 10,000].</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMaxAverage</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> max = sum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k; i&lt;nums.length; i++)&#123;</span><br><span class="line">            sum+=nums[i] - nums[i-k];</span><br><span class="line">            max = Math.max(max,sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max/<span class="number">1.0</span>/k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using sliding window to caculate each k continous array’s average. Remember to change max to double first using /1.0.</p><p>T:O(N) S:O(1)</p><a id="more"></a><hr><h2 id="table-tr-td-bgcolor-28B463-font-color-white-299-Bulls-and-Cows-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">299. Bulls and Cows</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/bulls-and-cows/"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples">Examples</h3><p>You are playing the following <a href="https://en.wikipedia.org/wiki/Bulls_and_Cows" target="_blank"> <code>Bulls and Cows</code> </a>game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.</p><p>Write a function to return a hint according to the secret number and friend’s guess, use A to indicate the bulls and B to indicate the cows.</p><p>Please note that both secret number and friend’s guess may contain duplicate digits.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: secret = &quot;1807&quot;, guess = &quot;7810&quot;</span><br><span class="line">Output: &quot;1A3B&quot;</span><br><span class="line">Explanation: 1 bull and 3 cows. The bull is 8, the cows are 0, 1 and 7.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: secret = &quot;1123&quot;, guess = &quot;0111&quot;</span><br><span class="line">Output: &quot;1A1B&quot;</span><br><span class="line">Explanation: The 1st 1 in friend&apos;s guess is a bull, the 2nd or 3rd 1 is a cow.</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(secret == <span class="keyword">null</span> || guess == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> cows = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> bulls = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] secarr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span>[] guessarr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; secret.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(guess.charAt(i) == secret.charAt(i))&#123;</span><br><span class="line">                bulls++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                secarr[secret.charAt(i)-<span class="string">'0'</span>]++;</span><br><span class="line">                guessarr[guess.charAt(i)-<span class="string">'0'</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">9</span>; i++)&#123;</span><br><span class="line">            cows+=Math.min(secarr[i],guessarr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span> + bulls +<span class="string">"A"</span>+ cows +<span class="string">"B"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using bucket to store each number’s frequency. When the same position of secret and guess are same then we increase bulls. Ohterwise we increase both positions in two arrays by 1.</p><p>After the first loop of the array, we then loop the number from 0 - 9. We only add min frequency one to the cows.</p><p>Finally we return the constructed string.</p><p>T:O(N) S:O(N)</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-658-Find-K-Closest-Elements-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">658. Find K Closest Elements</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/find-k-closest-elements/"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v2">Example</h3><p>Given a sorted array arr, two integers k and x, find the k closest elements to x in the array. The result should also be sorted in ascending order. If there is a tie, the smaller elements are always preferred.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: arr = [1,2,3,4,5], k = 4, x = 3</span><br><span class="line">Output: [1,2,3,4]</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: arr = [1,2,3,4,5], k = 4, x = -1</span><br><span class="line">Output: [1,2,3,4]</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findClosestElements</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(right-left&gt;=k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Math.abs(arr[left]-x) &gt; Math.abs(arr[right]-x))&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=left; i&lt;=right; i++)&#123;</span><br><span class="line">            res.add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using two pointers to keep track of the left and right position. Cacualting the abs value of difference between current num and x. We increase by 1 on the large side. Finally we just loop from the left to right and add each number in this range to the res.</p><p>T:O(N) S:O(N)</p><hr><h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-719-Find-K-th-Smallest-Pair-Distance-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">719. Find K-th Smallest Pair Distance</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/find-k-th-smallest-pair-distance/"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v3">Example</h3><p>Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input:</span><br><span class="line">nums = [1,3,1]</span><br><span class="line">k = 1</span><br><span class="line">Output: 0 </span><br><span class="line">Explanation:</span><br><span class="line">Here are all the pairs:</span><br><span class="line">(1,3) -&gt; 2</span><br><span class="line">(1,1) -&gt; 0</span><br><span class="line">(3,1) -&gt; 2</span><br><span class="line">Then the 1st smallest distance pair is (1,1), and its distance is 0.</span><br></pre></td></tr></table></figure><h3 id="Solution-v4">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">smallestDistancePair</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.length;</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = a[n - <span class="number">1</span>] - a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (count(a, mid) &lt; k)</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                high = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; nums[j] - nums[i] &lt;= max) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += j - i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First idea we can come up with is generating all the possible pairs and the using customed Max/Min PriorityQueue /sort function to get the top k smallest pairs, but it will cause TLE error.</p><p>So we only have to using binary searching to reduce the time complexity.</p><p>If we sort the array, then we can easily count the numbers of pairs whose distance is smaller than a number. (Only takes O(n))</p><p>The number of valid pairs and max distance hava a monotonic relationship.</p><p>If distance max is small, the valid pairs will be small. If distance max is large, all pairs will be valid.</p><p>Then we could use binary search!</p><p>For a given max, count the number of valid pairs.</p><p>If num &gt;= k, we could decrease max value. If num &lt; k , we must increase max value.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-643-Maximum-Average-Subarray-I-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;643. Maximum Average Subarray I&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/maximum-average-subarray-i/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [1,12,-5,-6,50,3], k = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 12.75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Note:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 &amp;lt;= k &amp;lt;= n &amp;lt;= 30,000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Elements of the given array will be in the range [-10,000, 10,000].&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMaxAverage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;k; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum+=nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; max = sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=k; i&amp;lt;nums.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum+=nums[i] - nums[i-k];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            max = Math.max(max,sum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; max/&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;/k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Using sliding window to caculate each k continous array’s average. Remember to change max to double first using /1.0.&lt;/p&gt;
&lt;p&gt;T:O(N) S:O(1)&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Interview Note 9 💪</title>
    <link href="WangHngLeee.github.io/2020/06/28/frontend-interview-09/"/>
    <id>WangHngLeee.github.io/2020/06/28/frontend-interview-09/</id>
    <published>2020-06-28T12:05:35.000Z</published>
    <updated>2020-06-28T03:16:17.684Z</updated>
    
    <content type="html"><![CDATA[<h1>Vue</h1><h3 id="生命周期钩子函数">生命周期钩子函数</h3><ul><li>在 <code>beforeCreate</code> 钩子函数调用的时候，是获取不到 <code>props</code> 或者 <code>data</code> 中的数据的，因为这些数据的初始化都在 <code>initState</code> 中。</li><li>然后会执行 <code>created</code> 钩子函数，在这一步的时候已经可以访问到之前不能访问到的数据，但是这时候组件还没被挂载，所以看不到。</li><li>接下来会先执行 <code>beforeMount</code> 钩子函数，开始创建 <code>VDOM</code>，最后执行 <code>mounted</code> 钩子，并将 <code>VDOM</code>渲染为真实 <code>DOM</code> 并且渲染数据。组件中如果有子组件的话，会递归挂载子组件，只有当所有子组件全部挂载完毕，才会执行根组件的挂载钩子。</li><li>接下来是数据更新时会调用的钩子函数 <code>beforeUpdate</code> 和 <code>updated</code>，分别在数据更新前和更新后会调用。</li><li>另外还有 <code>keep-alive</code> 独有的生命周期，分别为 <code>activated</code> 和 <code>deactivated </code>。用 <code>keep-alive</code> 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 <code>deactivated</code> 钩子函数，命中缓存渲染后会执行 <code>actived</code> 钩子函数。</li><li>最后就是销毁组件的钩子函数 <code>beforeDestroy</code> 和 <code>destroyed</code>。前者适合移除事件、定时器等等，否则可能会引起内存泄露的问题。然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的 <code>destroyed</code> 钩子函数</li></ul><h3 id="组件通信">组件通信</h3><blockquote><p>组件通信一般分为以下几种情况：</p></blockquote><a id="more"></a><ul><li>父子组件通信</li><li>兄弟组件通信</li><li>跨多层级组件通信</li></ul><p><strong>1. 父子通信(important)</strong></p><ul><li>父组件通过 <code>props</code> 传递数据给子组件，子组件通过 <code>emit</code> 发送事件传递数据给父组件，这两种方式是最常用的父子通信实现办法。</li><li>这种父子通信方式也就是典型的<code>单向数据流</code>，父组件通过 <code>props</code> 传递数据，子组件不能直接修改 <code>props</code>，而是必须通过发送事件的方式告知父组件修改数据。(这里和react很像)</li><li>另外这两种方式还可以使用语法糖 <code>v-model</code> 来直接实现，因为 <code>v-model</code> 默认会解析成名为 <code>value</code> 的 <code>prop</code> 和名为 <code>input</code> 的事件。这种语法糖的方式是典型的双向绑定，常用于 <code>UI</code> 控件上，本质上还是通过事件的方法让父组件修改数据。</li><li>可以通过访问 <code>$parent</code> 或者 <code>$children</code> 对象来访问组件实例中的方法和数据。</li><li>Vue 2.3 及以上版本的话可以使用 <code>$listeners</code> 和 <code>.sync</code> 这两个属性。</li><li><code>$listeners</code> 属性会将父组件中的 (不含 <code>.native</code> 修饰器的) <code>v-on</code> 事件监听器传递给子组件，子组件可以通过访问 <code>$listeners</code> 来自定义监听器。</li><li><code>.sync</code> 属性是个语法糖，可以很简单的实现子组件与父组件通信</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value.sync</span>=<span class="string">"value"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以上写法等同于--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">"value"</span> @<span class="attr">update:value</span>=<span class="string">"v =&gt; value = v"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  this.$emit('update:value', 1)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 兄弟组件通信</strong></p><blockquote><p>对于这种情况可以通过查找父组件中的子组件实现，也就是 <code>this.$parent.$children</code>，在 <code>$children</code> 中可以通过组件 <code>name</code> 查询到需要的组件实例，然后进行通信。</p></blockquote><p><strong>3. 跨多层次组件通信</strong></p><blockquote><p>对于这种情况可以使用 <code>Vue 2.2</code> 新增的 <code>API provide / inject</code>。</p></blockquote><p>假设有父组件 <code>A</code>，然后有一个跨多层级的子组件 <code>B</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件 A</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    data: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件 B</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  inject: [<span class="string">'data'</span>],</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// 无论跨几层都能获得父组件的 data 属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.data) <span class="comment">// =&gt; 1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>万能办法解决一切通信问题</strong></p><blockquote><p>使用 <code>Vuex</code> 或者 <code>Event Bus</code> 解决上述所有的通信情况。</p></blockquote><h3 id="extend-api-作用">extend api 作用</h3><blockquote><p>这个 <code>API</code> 很少用到，作用是扩展组件生成一个构造器，通常会与 <code>$mount</code> 一起使用。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建组件构造器</span></span><br><span class="line"><span class="keyword">let</span> Component = Vue.extend(&#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;test&lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 挂载到 #app 上</span></span><br><span class="line"><span class="keyword">new</span> Component().$mount(<span class="string">'#app'</span>)</span><br><span class="line"><span class="comment">// 除了上面的方式，还可以用来扩展已有的组件</span></span><br><span class="line"><span class="keyword">let</span> SuperComponent = Vue.extend(Component)</span><br><span class="line"><span class="keyword">new</span> SuperComponent(&#123;</span><br><span class="line">    created() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> SuperComponent().$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h3 id="computed-和-watch-区别">computed 和 watch 区别</h3><ul><li><code>computed</code> 是计算属性，依赖其他属性计算值，并且 <code>computed</code> 的值有缓存，只有当计算值变化才会返回内容。</li><li><code>watch</code> 监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。</li><li>一般来说需要依赖别的属性来动态获得值的时候可以使用 <code>computed</code>，对于监听到值的变化需要做一些复杂业务逻辑的情况可以使用 <code>watch</code>。</li><li>另外 <code>computer</code> 和 <code>watch</code> 都支持对象的写法。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.$watch(<span class="string">'obj'</span>, &#123;</span><br><span class="line">    <span class="comment">// 深度遍历</span></span><br><span class="line">    deep: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 立即触发</span></span><br><span class="line">    immediate: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 执行的函数</span></span><br><span class="line">    handler: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldVal</span>) </span>&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    aPlus: &#123;</span><br><span class="line">      <span class="comment">// this.aPlus 时触发</span></span><br><span class="line">      <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// this.aPlus = 1 时触发</span></span><br><span class="line">      <span class="keyword">set</span>: function (v) &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = v - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="keep-alive-组件作用">keep-alive 组件作用</h3><ul><li>在需要组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 <code>keep-alive</code> 组件包裹需要保存的组件。</li><li>对于 <code>keep-alive</code> 组件来说，它拥有两个独有的生命周期钩子函数，分别为 <code>activated</code> 和 <code>deactivated</code> 。用 <code>keep-alive</code> 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 <code>deactivated</code> 钩子函数，命中缓存渲染后会执行 <code>actived</code> 钩子函数。</li></ul><h3 id="v-show-与-v-if-区别">v-show 与 v-if 区别</h3><ul><li><code>v-show</code> 只是在 <code>display: none</code> 和 <code>display: block</code> 之间切换。无论初始条件是什么都会被渲染出来，后面只需要切换 <code>CSS</code>，<code>DOM</code> 还是一直保留着的。所以总的来说 <code>v-show</code> 在初始渲染时有更高的开销，但是切换开销很小，更适合于频繁切换的场景。</li><li><code>v-if</code> 的话就得说到 <code>Vue</code> 底层的编译了。当属性初始为 <code>false</code> 时，组件就不会被渲染，直到条件为 <code>true</code>，并且切换条件时会触发销毁/挂载组件，在切换时开销更高，更适合不经常切换的场景。</li><li>并且基于 <code>v-if</code> 的这种惰性渲染机制，可以在必要的时候才去渲染组件，减少整个页面的初始渲染开销。</li></ul><h3 id="组件中-data-什么时候可以使用对象">组件中 data 什么时候可以使用对象</h3><ul><li>组件复用时所有组件实例都会共享 <code>data</code>，如果 <code>data</code> 是对象的话，就会造成一个组件修改 <code>data</code> 以后会影响到其他所有组件，所以需要将 <code>data</code> 写成函数，每次用到就调用一次函数获得新的数据。</li><li>当我们使用 <code>new Vue()</code> 的方式的时候，无论我们将 <code>data</code> 设置为对象还是函数都是可以的，因为 <code>new Vue()</code> 的方式是生成一个根组件，该组件不会复用，也就不存在共享 <code>data</code> 的情况。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Vue&lt;/h1&gt;
&lt;h3 id=&quot;生命周期钩子函数&quot;&gt;生命周期钩子函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;beforeCreate&lt;/code&gt; 钩子函数调用的时候，是获取不到 &lt;code&gt;props&lt;/code&gt; 或者 &lt;code&gt;data&lt;/code&gt; 中的数据的，因为这些数据的初始化都在 &lt;code&gt;initState&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;然后会执行 &lt;code&gt;created&lt;/code&gt; 钩子函数，在这一步的时候已经可以访问到之前不能访问到的数据，但是这时候组件还没被挂载，所以看不到。&lt;/li&gt;
&lt;li&gt;接下来会先执行 &lt;code&gt;beforeMount&lt;/code&gt; 钩子函数，开始创建 &lt;code&gt;VDOM&lt;/code&gt;，最后执行 &lt;code&gt;mounted&lt;/code&gt; 钩子，并将 &lt;code&gt;VDOM&lt;/code&gt;渲染为真实 &lt;code&gt;DOM&lt;/code&gt; 并且渲染数据。组件中如果有子组件的话，会递归挂载子组件，只有当所有子组件全部挂载完毕，才会执行根组件的挂载钩子。&lt;/li&gt;
&lt;li&gt;接下来是数据更新时会调用的钩子函数 &lt;code&gt;beforeUpdate&lt;/code&gt; 和 &lt;code&gt;updated&lt;/code&gt;，分别在数据更新前和更新后会调用。&lt;/li&gt;
&lt;li&gt;另外还有 &lt;code&gt;keep-alive&lt;/code&gt; 独有的生命周期，分别为 &lt;code&gt;activated&lt;/code&gt; 和 &lt;code&gt;deactivated &lt;/code&gt;。用 &lt;code&gt;keep-alive&lt;/code&gt; 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 &lt;code&gt;deactivated&lt;/code&gt; 钩子函数，命中缓存渲染后会执行 &lt;code&gt;actived&lt;/code&gt; 钩子函数。&lt;/li&gt;
&lt;li&gt;最后就是销毁组件的钩子函数 &lt;code&gt;beforeDestroy&lt;/code&gt; 和 &lt;code&gt;destroyed&lt;/code&gt;。前者适合移除事件、定时器等等，否则可能会引起内存泄露的问题。然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的 &lt;code&gt;destroyed&lt;/code&gt; 钩子函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;组件通信&quot;&gt;组件通信&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;组件通信一般分为以下几种情况：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/Interview/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
  </entry>
  
</feed>
