<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leee&#39;s World</title>
  
  <subtitle>Talk is Cheap. Show me the code.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="WangHngLeee.github.io/"/>
  <updated>2020-03-07T05:52:04.738Z</updated>
  <id>WangHngLeee.github.io/</id>
  
  <author>
    <name>HongLeee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Review Problems List 📌</title>
    <link href="WangHngLeee.github.io/9999/12/31/problemslist/"/>
    <id>WangHngLeee.github.io/9999/12/31/problemslist/</id>
    <published>9999-12-31T16:13:23.000Z</published>
    <updated>2020-03-07T05:52:04.738Z</updated>
    
    <content type="html"><![CDATA[<br><font size="3"> 记录Problems list的完成情况 每日更新。<br><a href="https://docs.google.com/spreadsheets/d/1SwcfcnOXL_7lbdqZm8dia_WU20aQ-ZTjGf4G0oJ6qpA/edit#gid=972946549" target="_blank" rel="noopener"><font size="4">🔗 Problems List  Link </font></a><br>Github Leetcode Summary 同步更新。<br><a href="https://github.com/WangHngLeee/LeetcodeSummary" target="_blank" rel="noopener"><font size="4">🔗 Github Summary Link </font></a><br>2020/03/02 —— 500题成就达成 💪</font><br><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;
&lt;font size=&quot;3&quot;&gt; 记录Problems list的完成情况 每日更新。&lt;br&gt;
&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1SwcfcnOXL_7lbdqZm8dia_WU20aQ-ZTjGf4G0oJ
      
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Problems List" scheme="WangHngLeee.github.io/tags/Problems-List/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 341. Flatten Nested List Iterator</title>
    <link href="WangHngLeee.github.io/2020/07/20/341.%20Flatten%20Nested%20List%20Iterator/"/>
    <id>WangHngLeee.github.io/2020/07/20/341. Flatten Nested List Iterator/</id>
    <published>2020-07-20T22:30:29.000Z</published>
    <updated>2020-07-21T02:27:50.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-341-Flatten-Nested-List-Iterator-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">341. Flatten Nested List Iterator</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/flatten-nested-list-iterator/"><font size="4">🔗Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given a nested list of integers, implement an iterator to flatten it.</p><p>Each element is either an integer, or a list – whose elements may also be integers or other lists.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [[1,1],2,[1,1]]</span><br><span class="line">Output: [1,1,2,1,1]</span><br><span class="line">Explanation: By calling next repeatedly until hasNext returns false, </span><br><span class="line">             the order of elements returned by next should be: [1,1,2,1,1].</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: [1,[4,[6]]]</span><br><span class="line">Output: [1,4,6]</span><br><span class="line">Explanation: By calling next repeatedly until hasNext returns false, </span><br><span class="line">             the order of elements returned by next should be: [1,4,6].</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Typical flatten array question. We can using stack to add each part from right to left, in order to keep the <code>leftmost</code> at the top of stack.</p><p>In <code>hasNext()</code> we have to check the peek, if the peek is integer then we just return true. If not it means it’a <code>nestedList</code> so we have to flatten it and push back to the stack.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    Stack&lt;NestedInteger&gt; stack;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NestedIterator</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        help(nestedList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasNext() ? stack.pop().getInteger() : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.peek().isInteger())<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            help(stack.pop().getList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">(List&lt;NestedInteger&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=list.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            stack.push(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-341-Flatten-Nested-List-Iterator-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;341. Flatten Nested List Iterator&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/flatten-nested-list-iterator/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given a nested list of integers, implement an iterator to flatten it.&lt;/p&gt;
&lt;p&gt;Each element is either an integer, or a list – whose elements may also be integers or other lists.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [[1,1],2,[1,1]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [1,1,2,1,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: By calling next repeatedly until hasNext returns false, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             the order of elements returned by next should be: [1,1,2,1,1].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [1,[4,[6]]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [1,4,6]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: By calling next repeatedly until hasNext returns false, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             the order of elements returned by next should be: [1,4,6].&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Design" scheme="WangHngLeee.github.io/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Review | Easy | 346. Moving Average from Data Stream</title>
    <link href="WangHngLeee.github.io/2020/07/20/346.%20Moving%20Average%20from%20Data%20Stream/"/>
    <id>WangHngLeee.github.io/2020/07/20/346. Moving Average from Data Stream/</id>
    <published>2020-07-20T22:30:29.000Z</published>
    <updated>2020-07-21T02:31:32.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-346-Moving-Average-from-Data-Stream-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">346. Moving Average from Data Stream</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/moving-average-from-data-stream/"><font size="4">🔗Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">MovingAverage m = new MovingAverage(3);</span><br><span class="line">m.next(1) = 1</span><br><span class="line">m.next(10) = (1 + 10) / 2</span><br><span class="line">m.next(3) = (1 + 10 + 3) / 3</span><br><span class="line">m.next(5) = (10 + 3 + 5) / 3</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>Simple question that we can using circular queue to solve it. When the queue reach size then we poll one element and substract it from the sum.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovingAverage</span> </span>&#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue;</span><br><span class="line">    <span class="keyword">double</span> sum;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovingAverage</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        s = size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(queue.size() == s)&#123;</span><br><span class="line">            sum-=queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(val);</span><br><span class="line">        sum+=val;</span><br><span class="line">        <span class="keyword">return</span> sum/queue.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-346-Moving-Average-from-Data-Stream-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;346. Moving Average from Data Stream&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/moving-average-from-data-stream/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MovingAverage m = new MovingAverage(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.next(1) = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.next(10) = (1 + 10) / 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.next(3) = (1 + 10 + 3) / 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.next(5) = (10 + 3 + 5) / 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Design" scheme="WangHngLeee.github.io/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Review | Easy | 350. Intersection of Two Arrays II</title>
    <link href="WangHngLeee.github.io/2020/07/20/350.%20Intersection%20of%20Two%20Arrays%20II/"/>
    <id>WangHngLeee.github.io/2020/07/20/350. Intersection of Two Arrays II/</id>
    <published>2020-07-20T22:30:29.000Z</published>
    <updated>2020-07-21T02:31:22.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-351-Android-Unlock-Patterns-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">351. Android Unlock Patterns</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/intersection-of-two-arrays-ii/"><font size="4">🔗Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given two arrays, write a function to compute their intersection.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">Output: [2,2]</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">Output: [4,9]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>We can using one hashmap to store each number’s frequency in the nums1 array. Then make a loop in nums2. If the num in nums2 exist in map and it’s frequency is bigger than 0 then add it to res.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums1)&#123;</span><br><span class="line">            map.put(num,map.getOrDefault(num,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(num) &amp;&amp; map.get(num)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                res.add(num);</span><br><span class="line">                map.put(num,map.get(num)-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;res.size(); i++)&#123;</span><br><span class="line">            ans[index++]=res.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-351-Android-Unlock-Patterns-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;351. Android Unlock Patterns&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/intersection-of-two-arrays-ii/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: nums1 = [1,2,2,1], nums2 = [2,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [2,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [4,9]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 802. Find Eventual Safe States</title>
    <link href="WangHngLeee.github.io/2020/07/20/802.%20Find%20Eventual%20Safe%20States/"/>
    <id>WangHngLeee.github.io/2020/07/20/802. Find Eventual Safe States/</id>
    <published>2020-07-20T22:30:29.000Z</published>
    <updated>2020-07-21T02:31:41.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-802-Find-Eventual-Safe-States-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">802. Find Eventual Safe States</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/find-eventual-safe-states/"><font size="4">🔗Question Link </font></a></p><h3 id="Examples">Examples</h3><p>In a directed graph, we start at some node and every turn, walk along a directed edge of the graph.  If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.</p><p>Now, say our starting node is eventually safe if and only if we must eventually walk to a terminal node.  More specifically, there exists a natural number K so that for any choice of where to walk, we must have stopped at a terminal node in less than K steps.</p><p>Which nodes are eventually safe?  Return them as an array in sorted order.</p><p>The directed graph has N nodes with labels 0, 1, …, N-1, where N is the length of graph.  The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]</span><br><span class="line">Output: [2,4,5,6]</span><br><span class="line">Here is a diagram of the above graph.</span><br></pre></td></tr></table></figure><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png" alt="leetcode 802"><a id="more"></a><h3 id="Solution">Solution</h3><h4 id="1-Topological-DFS">1. Topological + DFS</h4><p>We can use Topological sort and DFS to get the circle. Using seen[] to keep record of each node’s state in the looping.</p><p>Three different states:</p><ul><li>0 means <code>unvisited</code> unsafe</li><li>1 means <code>visiting</code>  unsafe</li><li>2 means <code>visited</code>   safe<br>We only need to add the node that has state == 2, which is the safe state.</li></ul><h4 id="2-Topologial-BFS-degree-solution">2. Topologial + BFS degree solution</h4><p>Originally we using BFS to find a circle in an indegree array. In this question we have to loop from the end point, so we need to reverse the whole graph to a indegree array. Then we just add the node with degree of 0 into the res array.</p><h3 id="Code">Code</h3><ul><li>Topological + DFS</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">eventualSafeNodes</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(graph == <span class="keyword">null</span> || graph.length == <span class="number">0</span>)<span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span>[] state = <span class="keyword">new</span> <span class="keyword">int</span>[graph.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graph.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dfs(graph,i,state))&#123;</span><br><span class="line">                res.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span> node, <span class="keyword">int</span>[] state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(state[node] !=<span class="number">0</span> )<span class="keyword">return</span> state[node] == <span class="number">2</span>;</span><br><span class="line">        state[node] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : graph[node])&#123;</span><br><span class="line">            <span class="keyword">if</span>(!dfs(graph,num,state))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        state[node] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(V+E) S:O(V)</p><ul><li>Topological + BFS + Reverse Graph</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">eventualSafeNodes</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = graph.length;</span><br><span class="line">        List&lt;Integer&gt;[] map = <span class="keyword">new</span> List[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            map[i] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] indegree = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num : graph[i])&#123;</span><br><span class="line">                map[num].add(i);</span><br><span class="line">                indegree[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(indegree[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                queue.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> node = queue.poll();</span><br><span class="line">            res.add(node);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num : map[node])&#123;</span><br><span class="line">                indegree[num]--;</span><br><span class="line">                <span class="keyword">if</span>(indegree[num] == <span class="number">0</span>)&#123;</span><br><span class="line">                    queue.add(num);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(V+E) S:O(V)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-802-Find-Eventual-Safe-States-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;802. Find Eventual Safe States&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/find-eventual-safe-states/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;In a directed graph, we start at some node and every turn, walk along a directed edge of the graph.  If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.&lt;/p&gt;
&lt;p&gt;Now, say our starting node is eventually safe if and only if we must eventually walk to a terminal node.  More specifically, there exists a natural number K so that for any choice of where to walk, we must have stopped at a terminal node in less than K steps.&lt;/p&gt;
&lt;p&gt;Which nodes are eventually safe?  Return them as an array in sorted order.&lt;/p&gt;
&lt;p&gt;The directed graph has N nodes with labels 0, 1, …, N-1, where N is the length of graph.  The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [2,4,5,6]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Here is a diagram of the above graph.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png&quot; alt=&quot;leetcode 802&quot;&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 351. Android Unlock Patterns</title>
    <link href="WangHngLeee.github.io/2020/07/17/351.%20Android%20Unlock%20Patterns/"/>
    <id>WangHngLeee.github.io/2020/07/17/351. Android Unlock Patterns/</id>
    <published>2020-07-17T22:30:29.000Z</published>
    <updated>2020-07-21T01:09:49.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-351-Android-Unlock-Patterns-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">351. Android Unlock Patterns</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/android-unlock-patterns/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given an Android 3x3 key lock screen and two integers m and n, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of m keys and maximum n keys.</p><p><strong>Rules for a valid pattern:</strong></p><ul><li>Each pattern must connect at least m keys and at most n keys.</li><li>All the keys must be distinct.</li><li>If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern.</li><li>No jumps through non selected key is allowed.</li><li>The order of keys used matters.</li></ul><img src="https://assets.leetcode.com/uploads/2018/10/12/android-unlock.png"><p>Explanation:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 1 | 2 | 3 |</span><br><span class="line">| 4 | 5 | 6 |</span><br><span class="line">| 7 | 8 | 9 |</span><br><span class="line"></span><br><span class="line">Invalid move: 4 - 1 - 3 - 6</span><br><span class="line">Line 1 - 3 passes through key 2 which had not been selected in the pattern.</span><br><span class="line"></span><br><span class="line">Invalid move: 4 - 1 - 9 - 2</span><br><span class="line">Line 1 - 9 passes through key 5 which had not been selected in the pattern.</span><br><span class="line"></span><br><span class="line">Valid move: 2 - 4 - 1 - 3 - 6</span><br><span class="line">Line 1 - 3 is valid because it passes through key 2, which had been selected in the pattern</span><br><span class="line"></span><br><span class="line">Valid move: 6 - 5 - 4 - 1 - 9 - 2</span><br><span class="line">Line 1 - 9 is valid because it passes through key 5, which had been selected in the pattern.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>First thought is using DFS to find all the possible path and count it’s total count. But it can be optimized by using a skip array.</p><p>The optimization idea is that 1,3,7,9 are symmetric, 2,4,6,8 are also symmetric. Hence we only calculate one among each group and multiply by 4.</p><p>Skip array store the number that between two numbers with only one interval.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cur: the current position</span></span><br><span class="line">    <span class="comment">// remain: the steps remaining</span></span><br><span class="line">    <span class="keyword">int</span>[][] skip = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">boolean</span> seen[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> remain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(remain &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(remain == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        seen[cur] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="comment">// If vis[i] is not visited and (two numbers are adjacent or skip number is already visited)</span></span><br><span class="line">            <span class="keyword">if</span>(!seen[i] &amp;&amp; (skip[cur][i] == <span class="number">0</span> || seen[skip[cur][i]])) &#123;</span><br><span class="line">                res+= DFS(i, remain - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        seen[cur] = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfPatterns</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        skip[<span class="number">1</span>][<span class="number">3</span>] = skip[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        skip[<span class="number">1</span>][<span class="number">7</span>] = skip[<span class="number">7</span>][<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">        skip[<span class="number">3</span>][<span class="number">9</span>] = skip[<span class="number">9</span>][<span class="number">3</span>] = <span class="number">6</span>;</span><br><span class="line">        skip[<span class="number">7</span>][<span class="number">9</span>] = skip[<span class="number">9</span>][<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">        skip[<span class="number">1</span>][<span class="number">9</span>] = skip[<span class="number">9</span>][<span class="number">1</span>] = skip[<span class="number">2</span>][<span class="number">8</span>] = skip[<span class="number">8</span>][<span class="number">2</span>] = skip[<span class="number">3</span>][<span class="number">7</span>] = skip[<span class="number">7</span>][<span class="number">3</span>] = skip[<span class="number">4</span>][<span class="number">6</span>] = skip[<span class="number">6</span>][<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// DFS search each length from m to n</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m; i &lt;= n; ++i) &#123;</span><br><span class="line">            res+= DFS(<span class="number">1</span>, i - <span class="number">1</span>) * <span class="number">4</span>; <span class="comment">// start with 1(same as 3, 7, 9 ), so we multiply 4 here.</span></span><br><span class="line">            res+= DFS(<span class="number">2</span>, i - <span class="number">1</span>) * <span class="number">4</span>; <span class="comment">// start with 2(same as 4,6,8), so we multiply 4 here.</span></span><br><span class="line">            res+= DFS(<span class="number">5</span>, i - <span class="number">1</span>); <span class="comment">// start with 5</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(V^2) S:O(V)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-351-Android-Unlock-Patterns-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;351. Android Unlock Patterns&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/android-unlock-patterns/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given an Android 3x3 key lock screen and two integers m and n, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of m keys and maximum n keys.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rules for a valid pattern:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each pattern must connect at least m keys and at most n keys.&lt;/li&gt;
&lt;li&gt;All the keys must be distinct.&lt;/li&gt;
&lt;li&gt;If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern.&lt;/li&gt;
&lt;li&gt;No jumps through non selected key is allowed.&lt;/li&gt;
&lt;li&gt;The order of keys used matters.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://assets.leetcode.com/uploads/2018/10/12/android-unlock.png&quot;&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;| 1 | 2 | 3 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 4 | 5 | 6 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 7 | 8 | 9 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Invalid move: 4 - 1 - 3 - 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Line 1 - 3 passes through key 2 which had not been selected in the pattern.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Invalid move: 4 - 1 - 9 - 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Line 1 - 9 passes through key 5 which had not been selected in the pattern.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Valid move: 2 - 4 - 1 - 3 - 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Line 1 - 3 is valid because it passes through key 2, which had been selected in the pattern&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Valid move: 6 - 5 - 4 - 1 - 9 - 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Line 1 - 9 is valid because it passes through key 5, which had been selected in the pattern.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Hard | 329. Longest Increasing Path in a Matrix</title>
    <link href="WangHngLeee.github.io/2020/07/17/329.%20Longest%20Increasing%20Path%20in%20a%20Matrix/"/>
    <id>WangHngLeee.github.io/2020/07/17/329. Longest Increasing Path in a Matrix/</id>
    <published>2020-07-17T22:27:29.000Z</published>
    <updated>2020-07-21T01:09:42.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-329-Longest-Increasing-Path-in-a-Matrix-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">329. Longest Increasing Path in a Matrix</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/longest-increasing-path-in-a-matrix/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><h3 id="Example">Example</h3><p>Given an integer matrix, find the length of the longest increasing path.</p><p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: nums = </span><br><span class="line">[</span><br><span class="line">  [9,9,4],</span><br><span class="line">  [6,6,8],</span><br><span class="line">  [2,1,1]</span><br><span class="line">] </span><br><span class="line">Output: 4 </span><br><span class="line">Explanation: The longest increasing path is [1, 2, 6, 9].</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: nums = </span><br><span class="line">[</span><br><span class="line">  [3,4,5],</span><br><span class="line">  [3,2,6],</span><br><span class="line">  [2,2,1]</span><br><span class="line">] </span><br><span class="line">Output: 4 </span><br><span class="line">Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>It is a typical <code>recursive + memo</code> question. We might think using db at first, but it is unnecessary. We can just DFS every number and keep a memo of it’s max length of increasing path in <code>memo[i][j]</code>.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span>[][] memo;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        m = matrix.length;</span><br><span class="line">        n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] memo = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> len = dfs(matrix, i, j, memo);</span><br><span class="line">                max = Math.max(max, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span>[][] memo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(memo[i][j] != <span class="number">0</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] dir: dirs) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i + dir[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y = j + dir[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n || matrix[x][y] &lt;= matrix[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">            max = Math.max(max,  <span class="number">1</span> + dfs(matrix, x, y, memo));</span><br><span class="line">        &#125;</span><br><span class="line">        memo[i][j] = max;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T: O(n^2) S: O(n^2)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-329-Longest-Increasing-Path-in-a-Matrix-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;329. Longest Increasing Path in a Matrix&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-increasing-path-in-a-matrix/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given an integer matrix, find the length of the longest increasing path.&lt;/p&gt;
&lt;p&gt;From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: nums = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [9,9,4],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [6,6,8],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [2,1,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 4 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The longest increasing path is [1, 2, 6, 9].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: nums = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [3,4,5],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [3,2,6],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [2,2,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 4 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Review | Medium | 348. Design Tic-Tac-Toe</title>
    <link href="WangHngLeee.github.io/2020/07/17/348.%20Design%20Tic-Tac-Toe/"/>
    <id>WangHngLeee.github.io/2020/07/17/348. Design Tic-Tac-Toe/</id>
    <published>2020-07-17T22:27:29.000Z</published>
    <updated>2020-07-21T01:09:43.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-348-Design-Tic-Tac-Toe-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">348. Design Tic-Tac-Toe</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/design-tic-tac-toe/"><font size="4">🔗Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Design a Tic-tac-toe game that is played between two players on a n x n grid.</p><p>You may assume the following rules:</p><p>A move is guaranteed to be valid and is placed on an empty block.<br>Once a winning condition is reached, no more moves is allowed.<br>A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Given n = 3, assume that player 1 is &quot;X&quot; and player 2 is &quot;O&quot; in the board.</span><br><span class="line"></span><br><span class="line">TicTacToe toe = new TicTacToe(3);</span><br><span class="line"></span><br><span class="line">toe.move(0, 0, 1); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| | |</span><br><span class="line">| | | |    // Player 1 makes a move at (0, 0).</span><br><span class="line">| | | |</span><br><span class="line"></span><br><span class="line">toe.move(0, 2, 2); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">| | | |    // Player 2 makes a move at (0, 2).</span><br><span class="line">| | | |</span><br><span class="line"></span><br><span class="line">toe.move(2, 2, 1); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">| | | |    // Player 1 makes a move at (2, 2).</span><br><span class="line">| | |X|</span><br><span class="line"></span><br><span class="line">toe.move(1, 1, 2); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">| |O| |    // Player 2 makes a move at (1, 1).</span><br><span class="line">| | |X|</span><br><span class="line"></span><br><span class="line">toe.move(2, 0, 1); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">| |O| |    // Player 1 makes a move at (2, 0).</span><br><span class="line">|X| |X|</span><br><span class="line"></span><br><span class="line">toe.move(1, 0, 2); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">|O|O| |    // Player 2 makes a move at (1, 0).</span><br><span class="line">|X| |X|</span><br><span class="line"></span><br><span class="line">toe.move(2, 1, 1); -&gt; Returns 1 (player 1 wins)</span><br><span class="line">|X| |O|</span><br><span class="line">|O|O| |    // Player 1 makes a move at (2, 1).</span><br><span class="line">|X|X|X|</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Solution">Solution</h3><p>It’s a simple question. We can use two array to store the score in rows and cols. And keep two record for diag and antidiag directions. If anyone of them reach to the size, then return current player. Otherwise just return 0.</p><h3 id="Code">Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicTacToe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] rows;</span><br><span class="line">    <span class="keyword">int</span>[] cols;</span><br><span class="line">    <span class="keyword">int</span> diag;</span><br><span class="line">    <span class="keyword">int</span> antidiag;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TicTacToe</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        rows = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        cols = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        diag = <span class="number">0</span>;</span><br><span class="line">        antidiag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Player &#123;player&#125; makes a move at (&#123;row&#125;, &#123;col&#125;).</span></span><br><span class="line"><span class="comment">        <span class="doctag">@param</span> row The row of the board.</span></span><br><span class="line"><span class="comment">        <span class="doctag">@param</span> col The column of the board.</span></span><br><span class="line"><span class="comment">        <span class="doctag">@param</span> player The player, can be either 1 or 2.</span></span><br><span class="line"><span class="comment">        <span class="doctag">@return</span> The current winning condition, can be either:</span></span><br><span class="line"><span class="comment">                0: No one wins.</span></span><br><span class="line"><span class="comment">                1: Player 1 wins.</span></span><br><span class="line"><span class="comment">                2: Player 2 wins. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> player)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> step = player == <span class="number">1</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        rows[row] += step;</span><br><span class="line">        cols[col] += step;</span><br><span class="line">        <span class="keyword">if</span>(row == col)&#123;</span><br><span class="line">            diag+=step;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(col == cols.length - row - <span class="number">1</span>)&#123;</span><br><span class="line">            antidiag+=step;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = rows.length;</span><br><span class="line">        <span class="keyword">if</span>(Math.abs(rows[row]) == size || Math.abs(cols[col]) == size || Math.abs(diag) == size || Math.abs(antidiag) == size)<span class="keyword">return</span> player;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-348-Design-Tic-Tac-Toe-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;348. Design Tic-Tac-Toe&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/design-tic-tac-toe/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Design a Tic-tac-toe game that is played between two players on a n x n grid.&lt;/p&gt;
&lt;p&gt;You may assume the following rules:&lt;/p&gt;
&lt;p&gt;A move is guaranteed to be valid and is placed on an empty block.&lt;br&gt;
Once a winning condition is reached, no more moves is allowed.&lt;br&gt;
A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Given n = 3, assume that player 1 is &amp;quot;X&amp;quot; and player 2 is &amp;quot;O&amp;quot; in the board.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TicTacToe toe = new TicTacToe(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(0, 0, 1); -&amp;gt; Returns 0 (no one wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| | |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | | |    // Player 1 makes a move at (0, 0).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | | |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(0, 2, 2); -&amp;gt; Returns 0 (no one wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |O|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | | |    // Player 2 makes a move at (0, 2).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | | |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(2, 2, 1); -&amp;gt; Returns 0 (no one wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |O|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | | |    // Player 1 makes a move at (2, 2).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | |X|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(1, 1, 2); -&amp;gt; Returns 0 (no one wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |O|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| |O| |    // Player 2 makes a move at (1, 1).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| | |X|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(2, 0, 1); -&amp;gt; Returns 0 (no one wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |O|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| |O| |    // Player 1 makes a move at (2, 0).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |X|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(1, 0, 2); -&amp;gt; Returns 0 (no one wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |O|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|O|O| |    // Player 2 makes a move at (1, 0).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |X|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;toe.move(2, 1, 1); -&amp;gt; Returns 1 (player 1 wins)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X| |O|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|O|O| |    // Player 1 makes a move at (2, 1).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|X|X|X|&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Code-Review" scheme="WangHngLeee.github.io/tags/Code-Review/"/>
    
      <category term="Design" scheme="WangHngLeee.github.io/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 106 / Review 01</title>
    <link href="WangHngLeee.github.io/2020/07/10/review1/"/>
    <id>WangHngLeee.github.io/2020/07/10/review1/</id>
    <published>2020-07-10T16:27:29.000Z</published>
    <updated>2020-07-18T01:09:15.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-398-Random-Pick-Index-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">398. Random Pick Index</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/random-pick-index/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.</p><p>Note:<br>The array size can be very large. Solution that uses too much extra space will not pass the judge.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">int[] nums = new int[] &#123;1,2,3,3,3&#125;;</span><br><span class="line">Solution solution = new Solution(nums);</span><br><span class="line"></span><br><span class="line">// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.</span><br><span class="line">solution.pick(3);</span><br><span class="line"></span><br><span class="line">// pick(1) should return 0. Since in the array only nums[0] is equal to 1.</span><br><span class="line">solution.pick(1);</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nums;</span><br><span class="line">    Random rand;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">        <span class="keyword">this</span>.rand = <span class="keyword">new</span> Random();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pick</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != target)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">// current num is the target</span></span><br><span class="line">                total++; <span class="comment">// caculate the total</span></span><br><span class="line">                <span class="keyword">if</span>(rand.nextInt(total) == <span class="number">0</span>)&#123;</span><br><span class="line">                res = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Consider the example like</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1,2,3,3,3&#125; with target 3</span><br></pre></td></tr></table></figure><p>We want to select 2,3,4 with a probability of <code>1/3</code> each.</p><p>2 : It’s probability of selection is 1 * (1/2) * (2/3) = 1/3<br>3 : It’s probability of selection is (1/2) * (2/3) = 1/3<br>4 : It’s probability of selection is just 1/3</p><p>So they are each randomly selected.</p><a id="more"></a><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-394-Decode-String-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">394. Decode String</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/decode-string/"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples-v2">Examples</h3><p>Given an encoded string, return its decoded string.</p><p>The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p><p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p><p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like 3a or 2[4].</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: s = &quot;3[a]2[bc]&quot;</span><br><span class="line">Output: &quot;aaabcbc&quot;</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input: s = &quot;3[a2[c]]&quot;</span><br><span class="line">Output: &quot;accaccacc&quot;</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="string">""</span>; <span class="comment">//corner case</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Stack&lt;StringBuilder&gt; sbstack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; intstack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> tempcount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(Character.isDigit(c))&#123;</span><br><span class="line">                tempcount = tempcount*<span class="number">10</span> + c -<span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'['</span>)&#123; <span class="comment">// start</span></span><br><span class="line">                intstack.push(tempcount);</span><br><span class="line">                sbstack.push(sb);</span><br><span class="line">                tempcount = <span class="number">0</span>; <span class="comment">// reset count</span></span><br><span class="line">                sb = <span class="keyword">new</span> StringBuilder(); <span class="comment">//reset stringbuilder</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">']'</span>)&#123;</span><br><span class="line">                StringBuilder swap = sb;</span><br><span class="line">                sb = sbstack.pop();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=intstack.pop(); i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">                    sb.append(swap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Keep two stack of both index and stringbuilder. When we meet <code>[</code> then we add previous stringbuilder and count to the stack, and reset both stringbuider and count. When we meet <code>]</code> we have to add current stringbuilder to the previous stringbuilder in the stack.</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-385-Mini-Parser-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">385. Mini Parser</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/mini-parser/"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples-v3">Examples</h3><p>Given a nested list of integers represented as a string, implement a parser to deserialize it.</p><p>Each element is either an integer, or a list – whose elements may also be integers or other lists.</p><p>Note: You may assume that the string is well-formed:</p><p>String is non-empty.<br>String does not contain white spaces.<br>String contains only digits 0-9, [, - , ].</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Given s = &quot;324&quot;,</span><br><span class="line"></span><br><span class="line">You should return a NestedInteger object which contains a single integer 324.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Given s = &quot;[123,[456,[789]]]&quot;,</span><br><span class="line"></span><br><span class="line">Return a NestedInteger object containing a nested list with 2 elements:</span><br><span class="line"></span><br><span class="line">1. An integer containing value 123.</span><br><span class="line">2. A nested list containing two elements:</span><br><span class="line">    i.  An integer containing value 456.</span><br><span class="line">    ii. A nested list with one element:</span><br><span class="line">         a. An integer containing value 789.</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> NestedInteger <span class="title">deserialize</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!s.startsWith(<span class="string">"["</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NestedInteger(Integer.valueOf(s));</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;NestedInteger&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        NestedInteger res = <span class="keyword">new</span> NestedInteger();</span><br><span class="line">        stack.push(res);</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'['</span>)&#123;</span><br><span class="line">                NestedInteger cur = <span class="keyword">new</span> NestedInteger();</span><br><span class="line">                stack.peek().add(cur);</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                start =i+ <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">']'</span> || c ==<span class="string">','</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; start)&#123;</span><br><span class="line">                    Integer val = Integer.valueOf(s.substring(start,i));</span><br><span class="line">                    stack.peek().add(<span class="keyword">new</span> NestedInteger(val));</span><br><span class="line">                &#125;</span><br><span class="line">                start=i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>( c == <span class="string">']'</span>)&#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we meet <code>[</code> it means we have to add new nestedinteger into the peek one in stack.And then add current into the stack to prepare for the upcoming nestedinteger list. When we meet <code>]</code> it means we get the end of current nestedinteger. So we just pop up the current peek of stack.</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-384-Shuffle-an-Array-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">384. Shuffle an Array</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/shuffle-an-array/"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples-v4">Examples</h3><p>Shuffle a set of numbers without duplicates.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">// Init an array with set 1, 2, and 3.</span><br><span class="line">int[] nums = &#123;1,2,3&#125;;</span><br><span class="line">Solution solution = new Solution(nums);</span><br><span class="line"></span><br><span class="line">// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.</span><br><span class="line">solution.shuffle();</span><br><span class="line"></span><br><span class="line">// Resets the array back to its original configuration [1,2,3].</span><br><span class="line">solution.reset();</span><br><span class="line"></span><br><span class="line">// Returns the random shuffling of array [1,2,3].</span><br><span class="line">solution.shuffle();</span><br></pre></td></tr></table></figure><h3 id="Solution-v4">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nums;</span><br><span class="line">    Random rand;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">        rand = <span class="keyword">new</span> Random();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Resets the array to its original configuration and return it. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reset() &#123;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns a random shuffling of the array. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] shuffle() &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span>[] clone = nums.clone();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = rand.nextInt(i+<span class="number">1</span>);</span><br><span class="line">            swap(clone, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] clone, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = clone[i];</span><br><span class="line">        clone[i] = clone[j];</span><br><span class="line">        clone[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s a bit like question 398, both need to use Random to generate a random index in order to make sure the posibility is equal to each num. In this question, when loop each num in the array, we have to get a random index.</p><p>Proof: Suppose this algorithm works, i.e. for each position j (starting from 0), the probability of any number in the range[0,j] to be at position j is 1/(1+j).</p><p><code>int i = random.nextInt(j + 1):</code></p><p>(1) If i == j, <code>nums[j]</code> does not need to change its position, which has probability 1/(1+j).</p><p>(2) if i !=j, <code>nums[j]</code> needs to be swapped with nums[i]. The probability of any number x in the range <code>[0,j-1]</code> to be at position <code>j = nums[j]</code> changes its position * x is at position i<br>= <code>(1-1/(1+j)) * (1/j) = 1/(1+j)</code></p><p>Each number has equal probability to be at any position.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-398-Random-Pick-Index-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;398. Random Pick Index&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/random-pick-index/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;
The array size can be very large. Solution that uses too much extra space will not pass the judge.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int[] nums = new int[] &amp;#123;1,2,3,3,3&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Solution solution = new Solution(nums);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;solution.pick(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// pick(1) should return 0. Since in the array only nums[0] is equal to 1.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;solution.pick(1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Random rand;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.nums = nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.rand = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Random();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res = -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;nums.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nums[i] != target)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;// current num is the target&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                total++; &lt;span class=&quot;comment&quot;&gt;// caculate the total&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(rand.nextInt(total) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                res = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Consider the example like&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;1,2,3,3,3&amp;#125; with target 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;We want to select 2,3,4 with a probability of &lt;code&gt;1/3&lt;/code&gt; each.&lt;/p&gt;
&lt;p&gt;2 : It’s probability of selection is 1 * (1/2) * (2/3) = 1/3&lt;br&gt;
3 : It’s probability of selection is (1/2) * (2/3) = 1/3&lt;br&gt;
4 : It’s probability of selection is just 1/3&lt;/p&gt;
&lt;p&gt;So they are each randomly selected.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Second-Round" scheme="WangHngLeee.github.io/tags/Second-Round/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 105 / String(3) 💪</title>
    <link href="WangHngLeee.github.io/2020/07/04/string03/"/>
    <id>WangHngLeee.github.io/2020/07/04/string03/</id>
    <published>2020-07-04T17:53:35.000Z</published>
    <updated>2020-07-04T20:59:43.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1268-Search-Suggestions-Systeme-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1268. Search Suggestions Systeme</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/search-suggestions-system/"><font size="4">🔗Question Link </font></a></p><h3 id="Example">Example</h3><p>Given an array of strings <code>products</code> and a string <code>searchWord</code>. We want to design a system that suggests at most three product names from <code>products</code> after each character of <code>searchWord</code> is typed. Suggested <code>products</code> should have common prefix with the <code>searchWord</code>. If there are more than three products with a common prefix return the three lexicographically minimums <code>products</code>.</p><p>Return list of lists of the suggested <code>products</code> after each character of <code>searchWord</code> is typed.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: products = [&quot;mobile&quot;,&quot;mouse&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mousepad&quot;], searchWord = &quot;mouse&quot;</span><br><span class="line">Output: [</span><br><span class="line">[&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],</span><br><span class="line">[&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],</span><br><span class="line">[&quot;mouse&quot;,&quot;mousepad&quot;],</span><br><span class="line">[&quot;mouse&quot;,&quot;mousepad&quot;],</span><br><span class="line">[&quot;mouse&quot;,&quot;mousepad&quot;]</span><br><span class="line">]</span><br><span class="line">Explanation: products sorted lexicographically = [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mouse&quot;,&quot;mousepad&quot;]</span><br><span class="line">After typing m and mo all products match and we show user [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;]</span><br><span class="line">After typing mou, mous and mouse the system suggests [&quot;mouse&quot;,&quot;mousepad&quot;]</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><h4 id="1-Trie">1. Trie</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span>&#123;</span><br><span class="line">        Trie[] children = <span class="keyword">new</span> Trie[<span class="number">26</span>];</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; suggestedProducts(String[] products, String searchWord) &#123;</span><br><span class="line">        Arrays.sort(products);</span><br><span class="line">        Trie root = <span class="keyword">new</span> Trie();</span><br><span class="line">        <span class="keyword">for</span>(String p : products)&#123;</span><br><span class="line">            insert(p,root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> search(searchWord,root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String p, Trie root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : p.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.children[c-<span class="string">'a'</span>] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                root.children[c-<span class="string">'a'</span>] = <span class="keyword">new</span> Trie();</span><br><span class="line">            &#125;</span><br><span class="line">            root = root.children[c-<span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">if</span>(root.list.size()&lt;<span class="number">3</span>)&#123;</span><br><span class="line">                root.list.add(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; search(String str, Trie root)&#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : str.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                root = root.children[c-<span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(root == <span class="keyword">null</span> ? Arrays.asList() : root.list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s clearly that it’s trie problem at first. So we can define a new class called Trie and initialize a new Trie structure. First we sort the products list. Then we insert 3 produsts to each character node. Then we search from the start of  <code>searchWord</code> . If no trie exist then we just add a blank array to res.</p><img src="https://i.ibb.co/PZYKX4d/Capture.jpg"><p>T: O(m * n + L)</p><p>Sorting cost time O(m * n), due to involving comparing String, which cost time O(m) for each comparison, building Trie cost O(m * n).</p><p>S: O(m * n + L * m)</p><p>Including return list ans, where m = average length of products, n = products.length, L = searchWord.length().</p><h4 id="2-Binary-Search">2. Binary Search</h4><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; suggestedProducts(String[] products, String searchWord) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(products);</span><br><span class="line">        List&lt;String&gt; productsList = Arrays.asList(products);</span><br><span class="line">        TreeMap&lt;String,Integer&gt; treemap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// adding products into treemap</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;products.length; i++)&#123;</span><br><span class="line">            treemap.put(products[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// start binary search</span></span><br><span class="line">        String key = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : searchWord.toCharArray())&#123;</span><br><span class="line">            key+=c;</span><br><span class="line">            String lowerbound = treemap.ceilingKey(key);</span><br><span class="line">            String upperbound = treemap.floorKey(key+<span class="string">"~"</span>);</span><br><span class="line">            <span class="keyword">if</span>(lowerbound == <span class="keyword">null</span> || upperbound == <span class="keyword">null</span>)<span class="keyword">break</span>;</span><br><span class="line">            res.add(productsList.subList( treemap.get(lowerbound), Math.min(treemap.get(lowerbound)+<span class="number">3</span>, treemap.get(upperbound)+<span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(res.size() &lt; searchWord.length())&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For example, if A[i] is a prefix of A[j],<br>A[i] must be the prefix of A[i + 1], A[i + 2], …, A[j].</p><p>We can utilize the advantage of TreeMap like auto-sorting and cellingKey / floorKey functions. After the strings are sorted in treemap, then we can using ceilingKey to find the max one that is less than current string and floorKey to find the min one that is larget than current string.</p><p>Then we can add the strings that between the upperbound and lowerbound to the res.</p><p>T:O(NlogN) for sorting</p><p>S:O(logN) for quick sort.</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-539-Minimum-Time-Difference-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">539. Minimum Time Difference</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/minimum-time-difference/"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v2">Example</h3><p>Given a list of 24-hour clock time points in “Hour:Minutes” format, find the minimum minutes difference between any two time points in the list.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [&quot;23:59&quot;,&quot;00:00&quot;]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note:</span><br><span class="line">The number of time points in the given list is at least 2 and won&apos;t exceed 20000.</span><br><span class="line">The input time is legal and ranges from 00:00 to 23:59.</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMinDifference</span><span class="params">(List&lt;String&gt; timePoints)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timePoints == <span class="keyword">null</span> || timePoints.size() == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">24</span>*<span class="number">60</span>];</span><br><span class="line">        <span class="keyword">for</span>(String str: timePoints)&#123;</span><br><span class="line">            String[] temp = str.split(<span class="string">":"</span>);</span><br><span class="line">            <span class="keyword">int</span> hour = Integer.valueOf(temp[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> minute = Integer.valueOf(temp[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(bucket[hour*<span class="number">60</span>+minute] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            min = Math.min(min,hour*<span class="number">60</span>+minute);</span><br><span class="line">            max = Math.max(max,hour*<span class="number">60</span>+minute);</span><br><span class="line">            bucket[hour*<span class="number">60</span>+minute] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> min_diff = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> prev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=min; i&lt;=max; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bucket[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>( i == min)&#123;</span><br><span class="line">                    min_diff = Math.min(min_diff, Math.min(max-min, <span class="number">1440</span>-max+min));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    min_diff = Math.min(min_diff,i-prev);</span><br><span class="line">                &#125;</span><br><span class="line">                prev = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min_diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The idea is simple. There is 24*60=1440 minutes per day, so we can create an array with size of 1440 to store the each timepoint to check whether they have appeared before. If so then we just return 0 beause the difference is 0 between two same time points. Otherwise we need to find the min and max points in the given list. And using prev to store the previous timepoints.</p><p>The graph of the timeline is like this:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 - - - min - - - max - - -1440 -</span><br><span class="line">⬆️ - - - - - - - - - - - - - - - ⬇️ // actually 1440 and 0 are the same point</span><br></pre></td></tr></table></figure><p>And there is two situations:</p><ul><li>Current timepoint is min:</li></ul><p>So we only have two part to compare:<br><code>max - min</code>, <code>1440-(max-min)</code>, which is the parts that the timepoints of <code>0 -&gt; min</code> and <code>max -&gt;1440</code></p><ul><li>Current timepoint is not min :</li></ul><p>Just using <code>curr-prev</code> to get the temp time difference and compare it with <code>min_diff</code>.</p><p>T:O(N) S:O(1)</p><hr><h2 id="table-tr-td-bgcolor-28B463-font-color-white-443-String-Compression-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">443. String Compression</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/string-compression/"><font size="4">🔗 Question Link </font></a></p><h3 id="Example-v3">Example</h3><p>Given an array of characters, compress it in-place.</p><p>The length after compression must always be smaller than or equal to the original array.</p><p>Every element of the array should be a character (not int) of length 1.</p><p>After you are done modifying the input array in-place, return the new length of the array.</p><p>Follow up:</p><p>Could you solve it using only O(1) extra space?</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">&quot;aa&quot; is replaced by &quot;a2&quot;. &quot;bb&quot; is replaced by &quot;b2&quot;. &quot;ccc&quot; is replaced by &quot;c3&quot;.</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><p>At first we can easily come up with the <code>HashMap</code> solution. But it doesn’t meet the O(1) space requirement.</p><p>So here is the standard solution.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compress</span><span class="params">(<span class="keyword">char</span>[] chars)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(chars == <span class="keyword">null</span> || chars.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> resindex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; chars.length)&#123;</span><br><span class="line">            <span class="keyword">char</span> currchar = chars[index];</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; chars.length &amp;&amp; currchar == chars[index] )&#123;</span><br><span class="line">                index++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            chars[resindex] = currchar;</span><br><span class="line">            resindex++;</span><br><span class="line">            <span class="keyword">if</span>(count!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c : Integer.toString(count).toCharArray())&#123;</span><br><span class="line">                    chars[resindex] = c;</span><br><span class="line">                    resindex++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resindex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kind of brute force. Keep track of current index and the final index. Then add the count of each char to array after itself. Finally return the final <code>resindex</code> which is the length of new array.</p><p>T:O(N) S:O(1)</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-1268-Search-Suggestions-Systeme-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;1268. Search Suggestions Systeme&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/search-suggestions-system/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given an array of strings &lt;code&gt;products&lt;/code&gt; and a string &lt;code&gt;searchWord&lt;/code&gt;. We want to design a system that suggests at most three product names from &lt;code&gt;products&lt;/code&gt; after each character of &lt;code&gt;searchWord&lt;/code&gt; is typed. Suggested &lt;code&gt;products&lt;/code&gt; should have common prefix with the &lt;code&gt;searchWord&lt;/code&gt;. If there are more than three products with a common prefix return the three lexicographically minimums &lt;code&gt;products&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Return list of lists of the suggested &lt;code&gt;products&lt;/code&gt; after each character of &lt;code&gt;searchWord&lt;/code&gt; is typed.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: products = [&amp;quot;mobile&amp;quot;,&amp;quot;mouse&amp;quot;,&amp;quot;moneypot&amp;quot;,&amp;quot;monitor&amp;quot;,&amp;quot;mousepad&amp;quot;], searchWord = &amp;quot;mouse&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;mobile&amp;quot;,&amp;quot;moneypot&amp;quot;,&amp;quot;monitor&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;mobile&amp;quot;,&amp;quot;moneypot&amp;quot;,&amp;quot;monitor&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;mouse&amp;quot;,&amp;quot;mousepad&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;mouse&amp;quot;,&amp;quot;mousepad&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;mouse&amp;quot;,&amp;quot;mousepad&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: products sorted lexicographically = [&amp;quot;mobile&amp;quot;,&amp;quot;moneypot&amp;quot;,&amp;quot;monitor&amp;quot;,&amp;quot;mouse&amp;quot;,&amp;quot;mousepad&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After typing m and mo all products match and we show user [&amp;quot;mobile&amp;quot;,&amp;quot;moneypot&amp;quot;,&amp;quot;monitor&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After typing mou, mous and mouse the system suggests [&amp;quot;mouse&amp;quot;,&amp;quot;mousepad&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;h4 id=&quot;1-Trie&quot;&gt;1. Trie&lt;/h4&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Trie&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Trie[] children = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Trie[&lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;String&amp;gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; suggestedProducts(String[] products, String searchWord) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Arrays.sort(products);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Trie root = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Trie();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(String p : products)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            insert(p,root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; search(searchWord,root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String p, Trie root)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c : p.toCharArray())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root.children[c-&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;] == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                root.children[c-&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Trie();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            root = root.children[c-&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root.list.size()&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                root.list.add(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; search(String str, Trie root)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c : str.toCharArray())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                root = root.children[c-&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res.add(root == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ? Arrays.asList() : root.list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It’s clearly that it’s trie problem at first. So we can define a new class called Trie and initialize a new Trie structure. First we sort the products list. Then we insert 3 produsts to each character node. Then we search from the start of  &lt;code&gt;searchWord&lt;/code&gt; . If no trie exist then we just add a blank array to res.&lt;/p&gt;
&lt;img src=&quot;https://i.ibb.co/PZYKX4d/Capture.jpg&quot;&gt;
&lt;p&gt;T: O(m * n + L)&lt;/p&gt;
&lt;p&gt;Sorting cost time O(m * n), due to involving comparing String, which cost time O(m) for each comparison, building Trie cost O(m * n).&lt;/p&gt;
&lt;p&gt;S: O(m * n + L * m)&lt;/p&gt;
&lt;p&gt;Including return list ans, where m = average length of products, n = products.length, L = searchWord.length().&lt;/p&gt;
&lt;h4 id=&quot;2-Binary-Search&quot;&gt;2. Binary Search&lt;/h4&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="String" scheme="WangHngLeee.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 104 / DP(1) 💪</title>
    <link href="WangHngLeee.github.io/2020/07/03/DP01/"/>
    <id>WangHngLeee.github.io/2020/07/03/DP01/</id>
    <published>2020-07-03T17:53:35.000Z</published>
    <updated>2020-07-03T22:24:50.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-256-Paint-House-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">256. Paint House</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/paint-house/"><font size="4">🔗 Question Link </font></a></p><h3 id="Example">Example</h3><p>There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p><p>The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on… Find the minimum cost to paint all houses.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note:</span><br><span class="line">All costs are positive integers.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: [[17,2,17],[16,16,5],[14,3,19]]</span><br><span class="line">Output: 10</span><br><span class="line">Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. </span><br><span class="line">             Minimum cost: 2 + 5 + 3 = 10.</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(costs == <span class="keyword">null</span> || costs.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//corner case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;costs.length; i++)&#123;</span><br><span class="line">            costs[i][<span class="number">0</span>] += Math.min(costs[i-<span class="number">1</span>][<span class="number">1</span>],costs[i-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            costs[i][<span class="number">1</span>] += Math.min(costs[i-<span class="number">1</span>][<span class="number">0</span>],costs[i-<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">            costs[i][<span class="number">2</span>] += Math.min(costs[i-<span class="number">1</span>][<span class="number">1</span>],costs[i-<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = costs.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.min(Math.min(costs[n][<span class="number">0</span>],costs[n][<span class="number">1</span>]),costs[n][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because there is only 3 colors, so we can easily updating different colors. The 1st row is the prices for the 1st house, we can change the matrix to present sum of prices from the 2nd row. i.e, the costs[1][0] represent minimum price to paint the second house red plus the 1st house. Choosing min value between the different color of the above line.</p><p>T:O(N) S:O(1)</p><a id="more"></a><hr><h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-265-Paint-House-II-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">265. Paint House II</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/paint-house-ii/"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v2">Example</h3><p>There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p><p>The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on… Find the minimum cost to paint all houses.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note:</span><br><span class="line">All costs are positive integers.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: [[1,5,3],[2,9,4]]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; </span><br><span class="line">             Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5.</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><p>Different from the previous painting problem, this question need k different colors.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostII</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (costs == <span class="keyword">null</span> || costs.length == <span class="number">0</span> || costs[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = costs.length;</span><br><span class="line">        <span class="keyword">int</span> n = costs[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (k == j) <span class="keyword">continue</span>;</span><br><span class="line">                    min = Math.min(min, dp[i - <span class="number">1</span>][k]);</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][j] = (min == Integer.MAX_VALUE ? <span class="number">0</span> : min) + costs[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res = Math.min(res, dp[m][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DP</p><p>dp[i][k] means paint ith house using k color.</p><p>To compute dp[i][j], we need to find out the minimum cost of previous house using different color.</p><p>Iterate all possible color of previous house except the color of current house to find min cost.</p><p>T:O(N * k^2) S:O(N*k)</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1277-Count-Square-Submatrices-with-All-Ones-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1277. Count Square Submatrices with All Ones</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/count-square-submatrices-with-all-ones/"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v3">Example</h3><p>Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: matrix =</span><br><span class="line">[</span><br><span class="line">  [0,1,1,1],</span><br><span class="line">  [1,1,1,1],</span><br><span class="line">  [0,1,1,1]</span><br><span class="line">]</span><br><span class="line">Output: 15</span><br><span class="line">Explanation: </span><br><span class="line">There are 10 squares of side 1.</span><br><span class="line">There are 4 squares of side 2.</span><br><span class="line">There is  1 square of side 3.</span><br><span class="line">Total number of squares = 10 + 4 + 1 = 15.</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSquares</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; j&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        matrix[i][j] = Math.min(Math.min(matrix[i][j-<span class="number">1</span>],matrix[i-<span class="number">1</span>][j]),matrix[i-<span class="number">1</span>][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res+=matrix[i][j];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Key point is that we take the right-bottom most point to find the side of square. In DP process, we choose the min side from the previous position ( left, up and left-up). Then we change the current dp[i][j] to be that value. And add it to the res.</p><p>T:O(MN) S:O(N)</p><hr><h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-1220-Count-Vowels-Permutation-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">1220. Count Vowels Permutation</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/count-vowels-permutation/"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v4">Example</h3><p>Given an integer n, your task is to count how many strings of length n can be formed under the following rules:</p><p>Each character is a lower case vowel (‘a’, ‘e’, ‘i’, ‘o’, ‘u’)</p><p>Each vowel ‘a’ may only be followed by an ‘e’.</p><p>Each vowel ‘e’ may only be followed by an ‘a’ or an ‘i’.</p><p>Each vowel ‘i’ may not be followed by another ‘i’.</p><p>Each vowel ‘o’ may only be followed by an ‘i’ or a ‘u’.</p><p>Each vowel ‘u’ may only be followed by an ‘a’.</p><p>Since the answer may be too large, return it modulo 10^9 + 7.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: n = 1</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: All possible strings are: &quot;a&quot;, &quot;e&quot;, &quot;i&quot; , &quot;o&quot; and &quot;u&quot;.</span><br></pre></td></tr></table></figure><h3 id="Solution-v4">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countVowelPermutation</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> MOD = (<span class="keyword">int</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">long</span>[][] dp = <span class="keyword">new</span> <span class="keyword">long</span>[n + <span class="number">1</span>][<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            0: a</span></span><br><span class="line"><span class="comment">            1: e</span></span><br><span class="line"><span class="comment">            2: i</span></span><br><span class="line"><span class="comment">            3: o</span></span><br><span class="line"><span class="comment">            4: u</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">0</span>] = (dp[i][<span class="number">4</span>] + dp[i][<span class="number">1</span>] + dp[i][<span class="number">2</span>]) % MOD;</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">1</span>] = (dp[i][<span class="number">0</span>] + dp[i][<span class="number">2</span>]) % MOD;</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">2</span>] = (dp[i][<span class="number">3</span>] + dp[i][<span class="number">1</span>]) % MOD;</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">3</span>] = (dp[i][<span class="number">2</span>]) % MOD;</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">4</span>] = (dp[i][<span class="number">2</span>] + dp[i][<span class="number">3</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            ans = (ans + dp[n][i]) % MOD;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using long instead of int in dp[] array. We also need to mod intermediate result. Transition function is easily to get. Which is updating the current sum by adding all possible words after the current character.</p><p>T:O(N) S:O(N)</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-256-Paint-House-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;256. Paint House&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/paint-house/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.&lt;/p&gt;
&lt;p&gt;The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on… Find the minimum cost to paint all houses.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Note:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;All costs are positive integers.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [[17,2,17],[16,16,5],[14,3,19]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             Minimum cost: 2 + 5 + 3 = 10.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minCost&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] costs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(costs == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || costs.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//corner case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;costs.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            costs[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] += Math.min(costs[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],costs[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            costs[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] += Math.min(costs[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],costs[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            costs[i][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] += Math.min(costs[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],costs[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = costs.length-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Math.min(Math.min(costs[n][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],costs[n][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]),costs[n][&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Because there is only 3 colors, so we can easily updating different colors. The 1st row is the prices for the 1st house, we can change the matrix to present sum of prices from the 2nd row. i.e, the costs[1][0] represent minimum price to paint the second house red plus the 1st house. Choosing min value between the different color of the above line.&lt;/p&gt;
&lt;p&gt;T:O(N) S:O(1)&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="DP" scheme="WangHngLeee.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 103 / Array(3) 💪</title>
    <link href="WangHngLeee.github.io/2020/07/02/array03/"/>
    <id>WangHngLeee.github.io/2020/07/02/array03/</id>
    <published>2020-07-02T17:53:35.000Z</published>
    <updated>2020-07-02T21:26:13.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-643-Maximum-Average-Subarray-I-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">643. Maximum Average Subarray I</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/maximum-average-subarray-i/"><font size="4">🔗 Question Link </font></a></p><h3 id="Example">Example</h3><p>Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [1,12,-5,-6,50,3], k = 4</span><br><span class="line">Output: 12.75</span><br><span class="line">Explanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note:</span><br><span class="line">1 &lt;= k &lt;= n &lt;= 30,000.</span><br><span class="line">Elements of the given array will be in the range [-10,000, 10,000].</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMaxAverage</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">            sum+=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> max = sum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k; i&lt;nums.length; i++)&#123;</span><br><span class="line">            sum+=nums[i] - nums[i-k];</span><br><span class="line">            max = Math.max(max,sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max/<span class="number">1.0</span>/k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using sliding window to caculate each k continous array’s average. Remember to change max to double first using /1.0.</p><p>T:O(N) S:O(1)</p><a id="more"></a><hr><h2 id="table-tr-td-bgcolor-28B463-font-color-white-299-Bulls-and-Cows-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">299. Bulls and Cows</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/bulls-and-cows/"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples">Examples</h3><p>You are playing the following <a href="https://en.wikipedia.org/wiki/Bulls_and_Cows" target="_blank"> <code>Bulls and Cows</code> </a>game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.</p><p>Write a function to return a hint according to the secret number and friend’s guess, use A to indicate the bulls and B to indicate the cows.</p><p>Please note that both secret number and friend’s guess may contain duplicate digits.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: secret = &quot;1807&quot;, guess = &quot;7810&quot;</span><br><span class="line">Output: &quot;1A3B&quot;</span><br><span class="line">Explanation: 1 bull and 3 cows. The bull is 8, the cows are 0, 1 and 7.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: secret = &quot;1123&quot;, guess = &quot;0111&quot;</span><br><span class="line">Output: &quot;1A1B&quot;</span><br><span class="line">Explanation: The 1st 1 in friend&apos;s guess is a bull, the 2nd or 3rd 1 is a cow.</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(secret == <span class="keyword">null</span> || guess == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> cows = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> bulls = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] secarr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span>[] guessarr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; secret.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(guess.charAt(i) == secret.charAt(i))&#123;</span><br><span class="line">                bulls++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                secarr[secret.charAt(i)-<span class="string">'0'</span>]++;</span><br><span class="line">                guessarr[guess.charAt(i)-<span class="string">'0'</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">9</span>; i++)&#123;</span><br><span class="line">            cows+=Math.min(secarr[i],guessarr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span> + bulls +<span class="string">"A"</span>+ cows +<span class="string">"B"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using bucket to store each number’s frequency. When the same position of secret and guess are same then we increase bulls. Ohterwise we increase both positions in two arrays by 1.</p><p>After the first loop of the array, we then loop the number from 0 - 9. We only add min frequency one to the cows.</p><p>Finally we return the constructed string.</p><p>T:O(N) S:O(N)</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-658-Find-K-Closest-Elements-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">658. Find K Closest Elements</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/find-k-closest-elements/"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v2">Example</h3><p>Given a sorted array arr, two integers k and x, find the k closest elements to x in the array. The result should also be sorted in ascending order. If there is a tie, the smaller elements are always preferred.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: arr = [1,2,3,4,5], k = 4, x = 3</span><br><span class="line">Output: [1,2,3,4]</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: arr = [1,2,3,4,5], k = 4, x = -1</span><br><span class="line">Output: [1,2,3,4]</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findClosestElements</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(right-left&gt;=k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Math.abs(arr[left]-x) &gt; Math.abs(arr[right]-x))&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=left; i&lt;=right; i++)&#123;</span><br><span class="line">            res.add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using two pointers to keep track of the left and right position. Cacualting the abs value of difference between current num and x. We increase by 1 on the large side. Finally we just loop from the left to right and add each number in this range to the res.</p><p>T:O(N) S:O(N)</p><hr><h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-719-Find-K-th-Smallest-Pair-Distance-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">719. Find K-th Smallest Pair Distance</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/find-k-th-smallest-pair-distance/"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v3">Example</h3><p>Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input:</span><br><span class="line">nums = [1,3,1]</span><br><span class="line">k = 1</span><br><span class="line">Output: 0 </span><br><span class="line">Explanation:</span><br><span class="line">Here are all the pairs:</span><br><span class="line">(1,3) -&gt; 2</span><br><span class="line">(1,1) -&gt; 0</span><br><span class="line">(3,1) -&gt; 2</span><br><span class="line">Then the 1st smallest distance pair is (1,1), and its distance is 0.</span><br></pre></td></tr></table></figure><h3 id="Solution-v4">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">smallestDistancePair</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.length;</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = a[n - <span class="number">1</span>] - a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (count(a, mid) &lt; k)</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                high = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; nums[j] - nums[i] &lt;= max) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += j - i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First idea we can come up with is generating all the possible pairs and the using customed Max/Min PriorityQueue /sort function to get the top k smallest pairs, but it will cause TLE error.</p><p>So we only have to using binary searching to reduce the time complexity.</p><p>If we sort the array, then we can easily count the numbers of pairs whose distance is smaller than a number. (Only takes O(n))</p><p>The number of valid pairs and max distance hava a monotonic relationship.</p><p>If distance max is small, the valid pairs will be small. If distance max is large, all pairs will be valid.</p><p>Then we could use binary search!</p><p>For a given max, count the number of valid pairs.</p><p>If num &gt;= k, we could decrease max value. If num &lt; k , we must increase max value.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-643-Maximum-Average-Subarray-I-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;643. Maximum Average Subarray I&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/maximum-average-subarray-i/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [1,12,-5,-6,50,3], k = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 12.75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Note:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 &amp;lt;= k &amp;lt;= n &amp;lt;= 30,000.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Elements of the given array will be in the range [-10,000, 10,000].&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMaxAverage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;k; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum+=nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; max = sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=k; i&amp;lt;nums.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum+=nums[i] - nums[i-k];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            max = Math.max(max,sum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; max/&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;/k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Using sliding window to caculate each k continous array’s average. Remember to change max to double first using /1.0.&lt;/p&gt;
&lt;p&gt;T:O(N) S:O(1)&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Array" scheme="WangHngLeee.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Interview Note 9 💪</title>
    <link href="WangHngLeee.github.io/2020/06/28/frontend-interview-09/"/>
    <id>WangHngLeee.github.io/2020/06/28/frontend-interview-09/</id>
    <published>2020-06-28T12:05:35.000Z</published>
    <updated>2020-06-28T03:16:17.684Z</updated>
    
    <content type="html"><![CDATA[<h1>Vue</h1><h3 id="生命周期钩子函数">生命周期钩子函数</h3><ul><li>在 <code>beforeCreate</code> 钩子函数调用的时候，是获取不到 <code>props</code> 或者 <code>data</code> 中的数据的，因为这些数据的初始化都在 <code>initState</code> 中。</li><li>然后会执行 <code>created</code> 钩子函数，在这一步的时候已经可以访问到之前不能访问到的数据，但是这时候组件还没被挂载，所以看不到。</li><li>接下来会先执行 <code>beforeMount</code> 钩子函数，开始创建 <code>VDOM</code>，最后执行 <code>mounted</code> 钩子，并将 <code>VDOM</code>渲染为真实 <code>DOM</code> 并且渲染数据。组件中如果有子组件的话，会递归挂载子组件，只有当所有子组件全部挂载完毕，才会执行根组件的挂载钩子。</li><li>接下来是数据更新时会调用的钩子函数 <code>beforeUpdate</code> 和 <code>updated</code>，分别在数据更新前和更新后会调用。</li><li>另外还有 <code>keep-alive</code> 独有的生命周期，分别为 <code>activated</code> 和 <code>deactivated </code>。用 <code>keep-alive</code> 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 <code>deactivated</code> 钩子函数，命中缓存渲染后会执行 <code>actived</code> 钩子函数。</li><li>最后就是销毁组件的钩子函数 <code>beforeDestroy</code> 和 <code>destroyed</code>。前者适合移除事件、定时器等等，否则可能会引起内存泄露的问题。然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的 <code>destroyed</code> 钩子函数</li></ul><h3 id="组件通信">组件通信</h3><blockquote><p>组件通信一般分为以下几种情况：</p></blockquote><a id="more"></a><ul><li>父子组件通信</li><li>兄弟组件通信</li><li>跨多层级组件通信</li></ul><p><strong>1. 父子通信(important)</strong></p><ul><li>父组件通过 <code>props</code> 传递数据给子组件，子组件通过 <code>emit</code> 发送事件传递数据给父组件，这两种方式是最常用的父子通信实现办法。</li><li>这种父子通信方式也就是典型的<code>单向数据流</code>，父组件通过 <code>props</code> 传递数据，子组件不能直接修改 <code>props</code>，而是必须通过发送事件的方式告知父组件修改数据。(这里和react很像)</li><li>另外这两种方式还可以使用语法糖 <code>v-model</code> 来直接实现，因为 <code>v-model</code> 默认会解析成名为 <code>value</code> 的 <code>prop</code> 和名为 <code>input</code> 的事件。这种语法糖的方式是典型的双向绑定，常用于 <code>UI</code> 控件上，本质上还是通过事件的方法让父组件修改数据。</li><li>可以通过访问 <code>$parent</code> 或者 <code>$children</code> 对象来访问组件实例中的方法和数据。</li><li>Vue 2.3 及以上版本的话可以使用 <code>$listeners</code> 和 <code>.sync</code> 这两个属性。</li><li><code>$listeners</code> 属性会将父组件中的 (不含 <code>.native</code> 修饰器的) <code>v-on</code> 事件监听器传递给子组件，子组件可以通过访问 <code>$listeners</code> 来自定义监听器。</li><li><code>.sync</code> 属性是个语法糖，可以很简单的实现子组件与父组件通信</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value.sync</span>=<span class="string">"value"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以上写法等同于--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">"value"</span> @<span class="attr">update:value</span>=<span class="string">"v =&gt; value = v"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--子组件中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  this.$emit('update:value', 1)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 兄弟组件通信</strong></p><blockquote><p>对于这种情况可以通过查找父组件中的子组件实现，也就是 <code>this.$parent.$children</code>，在 <code>$children</code> 中可以通过组件 <code>name</code> 查询到需要的组件实例，然后进行通信。</p></blockquote><p><strong>3. 跨多层次组件通信</strong></p><blockquote><p>对于这种情况可以使用 <code>Vue 2.2</code> 新增的 <code>API provide / inject</code>。</p></blockquote><p>假设有父组件 <code>A</code>，然后有一个跨多层级的子组件 <code>B</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件 A</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    data: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件 B</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  inject: [<span class="string">'data'</span>],</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// 无论跨几层都能获得父组件的 data 属性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.data) <span class="comment">// =&gt; 1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>万能办法解决一切通信问题</strong></p><blockquote><p>使用 <code>Vuex</code> 或者 <code>Event Bus</code> 解决上述所有的通信情况。</p></blockquote><h3 id="extend-api-作用">extend api 作用</h3><blockquote><p>这个 <code>API</code> 很少用到，作用是扩展组件生成一个构造器，通常会与 <code>$mount</code> 一起使用。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建组件构造器</span></span><br><span class="line"><span class="keyword">let</span> Component = Vue.extend(&#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;test&lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 挂载到 #app 上</span></span><br><span class="line"><span class="keyword">new</span> Component().$mount(<span class="string">'#app'</span>)</span><br><span class="line"><span class="comment">// 除了上面的方式，还可以用来扩展已有的组件</span></span><br><span class="line"><span class="keyword">let</span> SuperComponent = Vue.extend(Component)</span><br><span class="line"><span class="keyword">new</span> SuperComponent(&#123;</span><br><span class="line">    created() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> SuperComponent().$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h3 id="computed-和-watch-区别">computed 和 watch 区别</h3><ul><li><code>computed</code> 是计算属性，依赖其他属性计算值，并且 <code>computed</code> 的值有缓存，只有当计算值变化才会返回内容。</li><li><code>watch</code> 监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。</li><li>一般来说需要依赖别的属性来动态获得值的时候可以使用 <code>computed</code>，对于监听到值的变化需要做一些复杂业务逻辑的情况可以使用 <code>watch</code>。</li><li>另外 <code>computer</code> 和 <code>watch</code> 都支持对象的写法。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.$watch(<span class="string">'obj'</span>, &#123;</span><br><span class="line">    <span class="comment">// 深度遍历</span></span><br><span class="line">    deep: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 立即触发</span></span><br><span class="line">    immediate: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 执行的函数</span></span><br><span class="line">    handler: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldVal</span>) </span>&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    aPlus: &#123;</span><br><span class="line">      <span class="comment">// this.aPlus 时触发</span></span><br><span class="line">      <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// this.aPlus = 1 时触发</span></span><br><span class="line">      <span class="keyword">set</span>: function (v) &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = v - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="keep-alive-组件作用">keep-alive 组件作用</h3><ul><li>在需要组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 <code>keep-alive</code> 组件包裹需要保存的组件。</li><li>对于 <code>keep-alive</code> 组件来说，它拥有两个独有的生命周期钩子函数，分别为 <code>activated</code> 和 <code>deactivated</code> 。用 <code>keep-alive</code> 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 <code>deactivated</code> 钩子函数，命中缓存渲染后会执行 <code>actived</code> 钩子函数。</li></ul><h3 id="v-show-与-v-if-区别">v-show 与 v-if 区别</h3><ul><li><code>v-show</code> 只是在 <code>display: none</code> 和 <code>display: block</code> 之间切换。无论初始条件是什么都会被渲染出来，后面只需要切换 <code>CSS</code>，<code>DOM</code> 还是一直保留着的。所以总的来说 <code>v-show</code> 在初始渲染时有更高的开销，但是切换开销很小，更适合于频繁切换的场景。</li><li><code>v-if</code> 的话就得说到 <code>Vue</code> 底层的编译了。当属性初始为 <code>false</code> 时，组件就不会被渲染，直到条件为 <code>true</code>，并且切换条件时会触发销毁/挂载组件，在切换时开销更高，更适合不经常切换的场景。</li><li>并且基于 <code>v-if</code> 的这种惰性渲染机制，可以在必要的时候才去渲染组件，减少整个页面的初始渲染开销。</li></ul><h3 id="组件中-data-什么时候可以使用对象">组件中 data 什么时候可以使用对象</h3><ul><li>组件复用时所有组件实例都会共享 <code>data</code>，如果 <code>data</code> 是对象的话，就会造成一个组件修改 <code>data</code> 以后会影响到其他所有组件，所以需要将 <code>data</code> 写成函数，每次用到就调用一次函数获得新的数据。</li><li>当我们使用 <code>new Vue()</code> 的方式的时候，无论我们将 <code>data</code> 设置为对象还是函数都是可以的，因为 <code>new Vue()</code> 的方式是生成一个根组件，该组件不会复用，也就不存在共享 <code>data</code> 的情况。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;Vue&lt;/h1&gt;
&lt;h3 id=&quot;生命周期钩子函数&quot;&gt;生命周期钩子函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;beforeCreate&lt;/code&gt; 钩子函数调用的时候，是获取不到 &lt;code&gt;props&lt;/code&gt; 或者 &lt;code&gt;data&lt;/code&gt; 中的数据的，因为这些数据的初始化都在 &lt;code&gt;initState&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;然后会执行 &lt;code&gt;created&lt;/code&gt; 钩子函数，在这一步的时候已经可以访问到之前不能访问到的数据，但是这时候组件还没被挂载，所以看不到。&lt;/li&gt;
&lt;li&gt;接下来会先执行 &lt;code&gt;beforeMount&lt;/code&gt; 钩子函数，开始创建 &lt;code&gt;VDOM&lt;/code&gt;，最后执行 &lt;code&gt;mounted&lt;/code&gt; 钩子，并将 &lt;code&gt;VDOM&lt;/code&gt;渲染为真实 &lt;code&gt;DOM&lt;/code&gt; 并且渲染数据。组件中如果有子组件的话，会递归挂载子组件，只有当所有子组件全部挂载完毕，才会执行根组件的挂载钩子。&lt;/li&gt;
&lt;li&gt;接下来是数据更新时会调用的钩子函数 &lt;code&gt;beforeUpdate&lt;/code&gt; 和 &lt;code&gt;updated&lt;/code&gt;，分别在数据更新前和更新后会调用。&lt;/li&gt;
&lt;li&gt;另外还有 &lt;code&gt;keep-alive&lt;/code&gt; 独有的生命周期，分别为 &lt;code&gt;activated&lt;/code&gt; 和 &lt;code&gt;deactivated &lt;/code&gt;。用 &lt;code&gt;keep-alive&lt;/code&gt; 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 &lt;code&gt;deactivated&lt;/code&gt; 钩子函数，命中缓存渲染后会执行 &lt;code&gt;actived&lt;/code&gt; 钩子函数。&lt;/li&gt;
&lt;li&gt;最后就是销毁组件的钩子函数 &lt;code&gt;beforeDestroy&lt;/code&gt; 和 &lt;code&gt;destroyed&lt;/code&gt;。前者适合移除事件、定时器等等，否则可能会引起内存泄露的问题。然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的 &lt;code&gt;destroyed&lt;/code&gt; 钩子函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;组件通信&quot;&gt;组件通信&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;组件通信一般分为以下几种情况：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/Interview/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Interview Note 8 💪</title>
    <link href="WangHngLeee.github.io/2020/06/27/frontend-interview-08/"/>
    <id>WangHngLeee.github.io/2020/06/27/frontend-interview-08/</id>
    <published>2020-06-27T12:05:35.000Z</published>
    <updated>2020-06-27T14:15:42.779Z</updated>
    
    <content type="html"><![CDATA[<h1>React</h1><h3 id="React-中-keys-的作用">React 中 keys 的作用</h3><blockquote><p><code>Keys</code>是 <code>React</code> 用于追踪哪些列表中元素被修改、被添加或者被移除的 <code>辅助标识</code></p></blockquote><ul><li>在开发中，需要保证某个元素的 <code>key</code> 在其同级元素中具有唯一性。在 <code>React Diff</code> 算法中，<code> React</code> 会借助元素的 <code>Key</code> 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。此外，React 还需要借助 <code>Key</code> 值来判断元素与本地状态的关联关系。</li></ul><h3 id="传入-setState-函数的第二个参数的作用">传入 setState 函数的第二个参数的作用</h3><blockquote><p>该函数会在<code>setState</code>函数调用完成并且组件开始重渲染的时候被调用，可以用该函数来监听渲染是否完成。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(</span><br><span class="line">  &#123; <span class="attr">username</span>: <span class="string">'tylermcginnis33'</span> &#125;,</span><br><span class="line">  () =&gt; <span class="built_in">console</span>.log(<span class="string">'setState has finished and the component has re-rendered.'</span>)<span class="comment">//渲染完成才会输出log</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    streak: prevState.streak + props.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="React-中-refs-的作用">React 中 refs 的作用</h3><ul><li><code>Refs</code> 是 <code>React</code> 提供给的能够安全访问 <code>DOM </code>元素或者某个组件实例的句柄</li><li>可以为元素添加<code>ref</code>属性，然后在回调函数中接受该元素在 <code>DOM</code> 树中的句柄，该值会作为回调函数的第一个参数返回</li></ul><h3 id="在生命周期中的哪一步应该发起-AJAX-请求">在生命周期中的哪一步应该发起 AJAX 请求</h3><blockquote><p>应将AJAX 请求放到 <code>componentDidMount</code> 函数中执行</p></blockquote><ul><li><p><code>React</code> 下一代调和算法 <code>Fiber</code> 会通过开始或停止渲染的方式优化应用性能，会影响到 <code>componentWillMount</code> 的触发次数，会使得<code>componentWillMount</code> 这个生命周期函数的调用次数变得不确定。<code>React</code> 可能会多次频繁调用 <code>componentWillMount</code>。如果将 <code>AJAX</code> 请求放到 <code>componentWillMount</code> 函数中，那么会被触发多次，不采用。</p></li><li><p>如果我们将<code> AJAX</code> 请求放置在生命周期的其他函数中，我们并不能保证请求仅在组件挂载完毕后才会要求响应。如果我们的数据请求在组件挂载之前就完成，并且调用了<code>setState</code>函数将数据添加到组件状态中，对于未挂载的组件则会报错。而在 <code>componentDidMount</code> 函数中进行 <code>AJAX</code> 请求则能有效避免这个问题。</p></li></ul><hr><h3 id="React-中的事件处理逻辑">React 中的事件处理逻辑</h3><blockquote><p>为了解决跨浏览器兼容性问题，<code>React</code> 将浏览器原生事件（<code>Browser Native Event</code>）封装为合成事件（<code>SyntheticEvent</code>）传入设置的事件处理器中。合成事件提供了与原生事件相同的接口，不过它们屏蔽了底层浏览器的细节差异，保证了行为的一致性；另外，<code>React</code> 并没有直接将事件附着到子元素上，而是以单一事件监听器的方式将所有的事件发送到顶层进行处理。这样 <code>React</code> 在更新 <code>DOM</code> 的时候就不需要考虑如何去处理附着在 <code>DOM</code> 上的事件监听器，最终达到优化性能的目的。</p></blockquote><h3 id="redux中间件">redux中间件</h3><blockquote><p>中间件提供第三方插件的模式，自定义拦截 <code>action</code> -&gt; <code>reducer</code> 的过程。变为 <code>action</code> -&gt; <code>middlewares</code> -&gt; <code>reducer </code>。这种机制可以改变数据流，实现如异步<code> action</code> ，<code>action</code> 过滤，日志输出，异常报告等功能。</p></blockquote><ul><li><code>redux-logger</code>：提供日志输出</li><li><code>redux-thunk</code>：处理异步操作</li><li><code>redux-promise</code>：处理异步操作，<code>actionCreator</code>的返回值是<code>promise</code></li></ul><h3 id="为什么虚拟dom会提高性能">为什么虚拟dom会提高性能</h3><blockquote><p>虚拟<code>dom</code>相当于在<code>js</code>和真实<code>dom</code>中间加了一个缓存，利用<code>dom diff</code>算法避免了没有必要的<code>dom</code>操作，从而提高性能</p></blockquote><p><strong>具体实现步骤如下</strong></p><ul><li>用 <code>JavaScript</code> 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 <code>DOM</code> 树，插到文档当中。</li><li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异。</li><li>把2所记录的差异应用到步骤1所构建的真正的<code>DOM</code>树上，视图就更新。</li></ul><h3 id="diff算法">diff算法</h3><ul><li>把树形结构按照层级分解，只比较同级元素。</li><li>给列表结构的每个单元添加唯一的<code>key</code>属性，方便比较。</li><li><code>React</code> 只会匹配相同 <code>class</code> 的 <code>component</code>（<code>class</code>指的是组件的名字）</li><li>合并操作，调用 <code>component</code> 的 <code>setState</code> 方法的时候, <code>React</code> 将其标记为 - <code>dirty</code>。到每一个事件循环结束, <code>React</code> 会检查所有标记 ，仅将标记为<code>dirty </code>的 <code>component </code>进行重新绘制.</li><li>选择性地进行子树渲染。可以重写<code>shouldComponentUpdate</code>从而提高<code>diff</code>的性能</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;React&lt;/h1&gt;
&lt;h3 id=&quot;React-中-keys-的作用&quot;&gt;React 中 keys 的作用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Keys&lt;/code&gt;是 &lt;code&gt;React&lt;/code&gt; 用于追踪哪些列表中元素被修改、被添加或者被移除的 &lt;code&gt;辅助标识&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在开发中，需要保证某个元素的 &lt;code&gt;key&lt;/code&gt; 在其同级元素中具有唯一性。在 &lt;code&gt;React Diff&lt;/code&gt; 算法中，&lt;code&gt; React&lt;/code&gt; 会借助元素的 &lt;code&gt;Key&lt;/code&gt; 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。此外，React 还需要借助 &lt;code&gt;Key&lt;/code&gt; 值来判断元素与本地状态的关联关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;传入-setState-函数的第二个参数的作用&quot;&gt;传入 setState 函数的第二个参数的作用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;该函数会在&lt;code&gt;setState&lt;/code&gt;函数调用完成并且组件开始重渲染的时候被调用，可以用该函数来监听渲染是否完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;username&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;tylermcginnis33&#39;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;setState has finished and the component has re-rendered.&#39;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;//渲染完成才会输出log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;prevState, props&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    streak: prevState.streak + props.count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/Interview/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Interview Note 7 💪</title>
    <link href="WangHngLeee.github.io/2020/06/26/frontend-interview-07/"/>
    <id>WangHngLeee.github.io/2020/06/26/frontend-interview-07/</id>
    <published>2020-06-26T12:05:35.000Z</published>
    <updated>2020-06-27T13:59:43.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨域">跨域</h2><blockquote><p>因为浏览器出于安全考虑，有同源策略。同源策略要求协议，域名，端口全部相同，若有一个不同就是跨域，则<code>Ajax</code> 请求会失败。</p></blockquote><h3 id="JSONP">JSONP</h3><blockquote><p><code>JSONP</code> 是利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞，通过 <code>&lt;script&gt;</code> 标签，当需要通讯时，指向一个需要访问的地址并提供一个回调函数来接收数据</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><hr><ul><li><code>JSONP</code> 使用简单且兼容性不错，但是只限于 <code>get</code> 请求</li></ul><h3 id="CORS">CORS</h3><ul><li><code>CORS</code>需要浏览器和后端同时支持</li><li>浏览器会自动进行 <code>CORS</code> 通信，实现<code>CORS</code>通信的关键是后端。只要后端实现了 <code>CORS</code>，就实现了跨域。</li><li>服务端设置 <code>Access-Control-Allow-Origin</code> 就可以开启 <code>CORS</code>。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源</li></ul><h3 id="document-domain">document.domain</h3><ul><li>该方式只能用于二级域名相同的情况下，比如 <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式。</li><li>只需要给页面添加 <code>document.domain = 'test.com'</code> 表示二级域名都相同就可以实现跨域</li></ul><h3 id="postMessage">postMessage</h3><blockquote><p>这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送消息端</span></span><br><span class="line"><span class="built_in">window</span>.parent.postMessage(<span class="string">'message'</span>, <span class="string">'http://blog.poetries.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息端</span></span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MessageChannel();</span><br><span class="line">mc.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> origin = event.origin || event.originalEvent.origin;</span><br><span class="line">    <span class="keyword">if</span> (origin === <span class="string">'http://blog.poetries.com'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'验证通过'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="Event-loop">Event loop</h2><h3 id="JS中的event-loop">JS中的event loop</h3><blockquote><p><code>JS</code> 是门非阻塞单线程语言，因为在最初 <code>JS</code> 就是为了和浏览器交互而诞生的。如果 <code>JS</code> 是门多线程的语言话，在多个线程中处理 <code>DOM</code> 就可能会发生问题（一个线程中新加节点，另一个线程中删除节点）</p></blockquote><ul><li><code>JS</code> 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 <code>Task</code>（有多种 <code>task</code>） 队列中。一旦执行栈为空，<code>Event</code> <code>Loop</code> 就会从 <code>Task</code> 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 <code>JS</code> 中的异步还是同步行为</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>不同的任务源会被分配到不同的 <code>Task</code> 队列中，任务源可以分为 微任务（<code>microtask</code>） 和 宏任务（<code>macrotask</code>）。在 <code>ES6</code> 规范中，<code>microtask</code> 称为 jobs，macrotask 称为 task</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Promise'</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br><span class="line"><span class="comment">// script start =&gt; Promise =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; setTimeout</span></span><br></pre></td></tr></table></figure><blockquote><p>以上代码虽然 <code>setTimeout</code> 写在 <code>Promise</code> 之前，但是因为 <code>Promise</code> 属于微任务而 <code>setTimeout</code> 属于宏任务</p></blockquote><h3 id="微任务">微任务</h3><ul><li><code>process.nextTick</code></li><li><code>promise</code></li><li><code>Object.observe</code></li><li><code>MutationObserver</code></li></ul><h3 id="宏任务">宏任务</h3><ul><li><code>script </code></li><li><code>setTimeout</code></li><li><code>setInterval </code></li><li><code>setImmediate </code></li><li><code>I/O </code></li><li><code>UI rendering</code></li></ul><blockquote><p>宏任务中包括了 <code>script</code> ，浏览器会先执行一个宏任务，接下来有异步代码的话就先执行微任务</p></blockquote><h3 id="正确的Event-loop-顺序">正确的Event loop 顺序</h3><ul><li>执行同步代码，这属于宏任务</li><li>执行栈为空，查询是否有微任务需要执行</li><li>执行所有微任务</li><li>必要的话渲染 UI</li><li>然后开始下一轮 <code>Event loop</code>，执行宏任务中的异步代码</li></ul><blockquote><p>如果宏任务中的异步代码有大量的计算并且需要操作 <code>DOM</code> 的话，为了更快的响应界面响应，可以把操作 <code>DOM</code> 放入微任务中</p></blockquote><p><strong>Node 中的 Event loop</strong></p><ul><li><code>Node</code> 中的 <code>Event loop</code> 和浏览器中的不相同。</li><li><code>Node</code> 的 <code>Event loop</code> 分为<code>6</code>个阶段，它们会按照顺序反复运行</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     I/O callbacks     │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     idle, prepare     │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;──connections───     │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">│  │        check          │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">└──┤    close callbacks    │</span><br><span class="line">   └───────────────────────┘</span><br></pre></td></tr></table></figure><p><strong>timer</strong></p><ul><li><code>timers</code> 阶段会执行 <code>setTimeout</code> 和 <code>setInterval</code></li><li>一个 timer 指定的时间并不是准确时间，而是在达到这个时间后尽快执行回调，可能会因为系统正在执行别的事务而延迟</li></ul><p><strong>I/O</strong></p><ul><li><code>I/O</code> 阶段会执行除了 <code>close</code> 事件，定时器和 <code>setImmediate</code> 的回调</li></ul><p><strong>poll</strong></p><ul><li><p><code>poll</code> 阶段很重要，这一阶段中，系统会做两件事情</p><ul><li>执行到点的定时器</li><li>执行 <code>poll</code> 队列中的事件</li></ul></li><li><p>并且当 <code>poll</code> 中没有定时器的情况下，会发现以下两件事情</p><ul><li>如果 <code>poll</code> 队列不为空，会遍历回调队列并同步执行，直到队列为空或者系统限制</li><li>如果 <code>poll</code> 队列为空，会有两件事发生</li><li>如果有 <code>setImmediate</code> 需要执行，<code>poll</code> 阶段会停止并且进入到 <code>check</code> 阶段执行 <code>setImmediate</code></li><li>如果没有 <code>setImmediate</code> 需要执行，会等待回调被加入到队列中并立即执行回调</li><li>如果有别的定时器需要被执行，会回到 <code>timer</code> 阶段执行回调。</li></ul></li></ul><p><strong>check</strong></p><ul><li><code>check</code> 阶段执行 <code>setImmediate</code></li></ul><p><strong>close callbacks</strong></p><ul><li><code>close callbacks</code> 阶段执行 <code>close</code> 事件</li><li>并且在 <code>Node</code> 中，有些情况下的定时器执行顺序是随机的</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setImmediate'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 这里可能会输出 setTimeout，setImmediate</span></span><br><span class="line"><span class="comment">// 可能也会相反的输出，这取决于性能</span></span><br><span class="line"><span class="comment">// 因为可能进入 event loop 用了不到 1 毫秒，这时候会执行 setImmediate</span></span><br><span class="line"><span class="comment">// 否则会执行 setTimeout</span></span><br></pre></td></tr></table></figure><blockquote><p>上面介绍的都是 <code>macrotask</code> 的执行情况，<code>microtask</code> 会在以上每个阶段完成后立即执行</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timer1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timer2'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码在浏览器和 node 中打印情况是不同的</span></span><br><span class="line"><span class="comment">// 浏览器中一定打印 timer1, promise1, timer2, promise2</span></span><br><span class="line"><span class="comment">// node 中可能打印 timer1, timer2, promise1, promise2</span></span><br><span class="line"><span class="comment">// 也可能打印 timer1, promise1, timer2, promise2</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Node</code> 中的 <code>process.nextTick</code> 会先于其他 <code>microtask</code> 执行</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"timer1"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"promise1"</span>);</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"nextTick"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// nextTick, timer1, promise1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;跨域&quot;&gt;跨域&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;因为浏览器出于安全考虑，有同源策略。同源策略要求协议，域名，端口全部相同，若有一个不同就是跨域，则&lt;code&gt;Ajax&lt;/code&gt; 请求会失败。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;JSONP&quot;&gt;JSONP&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;JSONP&lt;/code&gt; 是利用 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签没有跨域限制的漏洞，通过 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签，当需要通讯时，指向一个需要访问的地址并提供一个回调函数来接收数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://domain/api?param1=a&amp;amp;param2=b&amp;amp;callback=jsonp&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;jsonp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/Interview/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Interview Note 6 💪</title>
    <link href="WangHngLeee.github.io/2020/06/24/frontend-interview-06/"/>
    <id>WangHngLeee.github.io/2020/06/24/frontend-interview-06/</id>
    <published>2020-06-24T12:05:35.000Z</published>
    <updated>2020-06-26T18:23:52.348Z</updated>
    
    <content type="html"><![CDATA[<h1>JS</h1><p>这几天复习了一下JS的知识，发现有些知识点变模糊了，于是打算写一篇JS常见问题的总结帖巩固一下。</p><h2 id="JS里的深浅拷贝">JS里的深浅拷贝</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">letet a a = &#123;</span><br><span class="line">    age     : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">a.age = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age) <span class="comment">// 输出为2</span></span><br></pre></td></tr></table></figure><ul><li>上述例子可以发现，如果给一个变量赋值一个对象，那么两者的值会是同一个引用，其中一方改变，另一方也会相应改变。</li><li>通常在开发中并不希望出现这样的问题，于是浅拷贝就可以来解决这个问题</li></ul><h3 id="浅拷贝">浅拷贝</h3><blockquote><p>首先可以通过 <code>Object.assign</code> 来解决这个问题</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.assign(&#123;&#125;, a)</span><br><span class="line">a.age = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><blockquote><p>也可以通过展开运算符<code>（…）</code>来解决</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123;...a&#125;</span><br><span class="line">a.age = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><blockquote><p>通常浅拷贝就能解决大部分问题了，但是当遇到如下情况就需要使用到深拷贝了</p></blockquote><a id="more"></a><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age: <span class="number">1</span>,</span><br><span class="line">    jobs: &#123;</span><br><span class="line">        first: <span class="string">'FE'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = &#123;...a&#125;</span><br><span class="line">a.jobs.first = <span class="string">'native'</span></span><br><span class="line"><span class="built_in">console</span>.log(b.jobs.first) <span class="comment">// native</span></span><br></pre></td></tr></table></figure><blockquote><p>浅拷贝只能解决一层数据的问题，如果接下去的值中还有对象的话，那么就又回到原来的问题了，两者享有相同的引用。要解决这个问题，需要使用深拷贝。</p></blockquote><h3 id="深拷贝">深拷贝</h3><blockquote><p>这个问题通常可以通过 <code>JSON.parse(JSON.stringify(object))</code> 来解决</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age: <span class="number">1</span>,</span><br><span class="line">    jobs: &#123;</span><br><span class="line">        first: <span class="string">'FE'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</span><br><span class="line">a.jobs.first = <span class="string">'native'</span></span><br><span class="line"><span class="built_in">console</span>.log(b.jobs.first) <span class="comment">// FE</span></span><br></pre></td></tr></table></figure><blockquote><p>将对象所有的内容变成JSON格式，再解析JSON出来即可。但是该方法也是有局限性的：</p></blockquote><ul><li>会忽略 <code>undefined</code></li><li>不能序列化函数</li><li>不能解决循环引用的对象</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: &#123;</span><br><span class="line">    c: <span class="number">2</span>,</span><br><span class="line">    d: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.c = obj.b</span><br><span class="line">obj.e = obj.a</span><br><span class="line">obj.b.c = obj.c</span><br><span class="line">obj.b.d = obj.b</span><br><span class="line">obj.b.e = obj.b.c</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"><span class="built_in">console</span>.log(newObj)</span><br></pre></td></tr></table></figure><blockquote><p>如果有一个循环引用对象，会发现并不能通过该方法深拷贝</p></blockquote><ul><li>在遇到函数或者 <code>undefined</code> 的时候，该对象也不能正常的序列化</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    age: <span class="literal">undefined</span>,</span><br><span class="line">    jobs: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    name: <span class="string">'poetries'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// &#123;name: "poetries"&#125;</span></span><br></pre></td></tr></table></figure><ul><li>在上述情况中，该方法会忽略掉<code>函数</code>和<code>undefined</code>。</li><li>但是在通常情况下，复杂数据都是可以序列化的，所以<code>JSON.parse</code>和<code>JSON.stringify</code>函数可以解决大部分问题，并且该函数是内置函数中处理深拷贝性能最快的。如果数据中含有以上三种情况下，可以使用 <code>lodash</code> 的深拷贝函数。</li></ul><h2 id="原型问题">原型问题</h2><p><img src="https://camo.githubusercontent.com/71cab2efcf6fb8401a2f0ef49443dd94bffc1373/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f332f31332f313632316538613962636230383732643f773d34383826683d35393026663d706e6726733d313531373232" alt></p><ul><li>每个函数都有 <code>prototype</code> 属性，除了 <code>Function.prototype.bind()</code>，该属性指向原型。</li><li>每个对象都有 <code>__proto__ </code>属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 <code>[[prototype]]</code>，但是 <code>[[prototype]]</code> 是内部属性，我们并不能访问到，所以使用 <code>_proto_</code> 来访问。</li><li>对象可以通过<code> __proto__</code> 来寻找不属于该对象的属性，<code>__proto__</code> 将对象连接起来组成了原型链</li></ul><h2 id="instanceof-和-typeof-的区别">instanceof 和 typeof 的区别</h2><h3 id="typeof">typeof</h3><blockquote><p><code>typeof</code> 对于基本类型，除了 <code>null</code> 都可以显示正确的类型</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span> <span class="comment">// 'number'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'1'</span> <span class="comment">// 'string'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// 'boolean'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>() <span class="comment">// 'symbol'</span></span><br><span class="line"><span class="keyword">typeof</span> b <span class="comment">// b 没有声明，但是还会显示 undefined</span></span><br></pre></td></tr></table></figure><blockquote><p><code>typeof</code> 对于对象，除了函数都会显示 <code>object</code></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">console</span>.log <span class="comment">// 'function'</span></span><br></pre></td></tr></table></figure><blockquote><p>对于 <code>null </code>来说，虽然它是基本类型，但是会显示 <code>object</code>，这是一个存在很久了的 <code>bug</code></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof null // &apos;object&apos;</span><br></pre></td></tr></table></figure><blockquote><p>原因：因为在 <code>JS </code>的最初版本中，使用的是 <code>32</code> 位系统，为了性能考虑使用低位存储了变量的类型信息，<code>000</code> 开头代表是对象，然而 <code>null </code>表示为全零，所以将它错误的判断为 <code>object</code> 。虽然现在的内部类型判断代码已经改变了，但是对于这个<code>bug</code>却是一直流传下来。</p></blockquote><ul><li>如果想获得一个变量的正确类型，可以通过 <code>Object.prototype.toString.call(xxxx)</code>。这样就可以获得类似 <code>[object Type]</code> 的字符串</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( object.prototype.toString.call( a ) );</span><br><span class="line"><span class="built_in">console</span>.log( object.prototype.toString.call( b ) );</span><br><span class="line"><span class="built_in">console</span>.log( object.prototype.toString.call( c ) );</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">[object <span class="built_in">String</span>];</span><br><span class="line">[object <span class="built_in">Array</span>];</span><br><span class="line">[object <span class="built_in">Function</span>];</span><br><span class="line"></span><br><span class="line">因此,想要得到具体的类型可以字符串截取：</span><br><span class="line"> <span class="built_in">console</span>.log( object.prototype.toString.call( a ).slice( <span class="number">8</span>, <span class="number">-1</span>) );</span><br><span class="line">结果: <span class="built_in">String</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="comment">// 也可以这样判断 undefined</span></span><br><span class="line">a === <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 但是 undefined 不是保留字，能够在低版本浏览器被赋值</span></span><br><span class="line"><span class="keyword">let</span> <span class="literal">undefined</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// 这样判断就会出错</span></span><br><span class="line"><span class="comment">// 所以可以用下面的方式来判断，并且代码量更少</span></span><br><span class="line"><span class="comment">// 因为 void 后面随便跟上一个组成表达式</span></span><br><span class="line"><span class="comment">// 返回就是 undefined</span></span><br><span class="line">a === <span class="keyword">void</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="instanceof">instanceof</h3><blockquote><p><code>instanceof</code> 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 <code>prototype</code></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Bar.prototype = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Bar() <span class="keyword">instanceof</span> Bar; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> Bar() <span class="keyword">instanceof</span> Foo; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果仅仅设置 Bar.prototype 为函数 Foo 本身，而不是 Foo 构造函数的一个实例</span></span><br><span class="line">Bar.prototype = Foo;</span><br><span class="line"><span class="keyword">new</span> Bar() <span class="keyword">instanceof</span> Foo; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="闭包">闭包</h2><blockquote><p>闭包的定义很简单：函数 A 返回了一个函数 B，并且函数 B 中使用了函数 A 的变量，函数 B 就被称为闭包。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> B</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么函数 <code>A </code>已经弹出调用栈了，为什么函数 <code>B</code> 还能引用到函数 <code>A </code>中的变量？ 因为函数 <code>A</code> 中的变量这时候是存储在堆上的。现在的 <code>JS </code>引擎可以通过逃逸分析辨别出哪些变量需要存储在堆上，哪些需要存储在栈上。</p></blockquote><p>经典中的经典面试题，循环中使用闭包解决 var 定义函数的问题</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( i );</span><br><span class="line">&#125;, i*<span class="number">1000</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出会是一堆6</span></span><br></pre></td></tr></table></figure><ul><li>首先因为 <code>setTimeout</code> 是个异步函数，所有会先把循环全部执行完毕，这时候 <code>i</code> 就是 <code>6</code> 了，所以会输出一堆 <code>6</code>。</li><li>解决办法两种，第一种使用闭包和<code>immediately-invoked function expression (IIFE)</code>方法</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;, j * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种就是使用 <code>setTimeout</code> 的第三个参数</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( j );</span><br><span class="line">&#125;, i*<span class="number">1000</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第三种就是使用 <code>let</code> 定义 <code>i</code> 了</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( i );</span><br><span class="line">&#125;, i*<span class="number">1000</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为对于 <code>let</code> 来说，他会创建一个块级作用域，相当于</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="comment">// 形成块级作用域</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> ii = i</span><br><span class="line">    setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( i );</span><br><span class="line">    &#125;, i*<span class="number">1000</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  i++</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> ii = i</span><br><span class="line">  &#125;</span><br><span class="line">  i++</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> ii = i</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;JS&lt;/h1&gt;
&lt;p&gt;这几天复习了一下JS的知识，发现有些知识点变模糊了，于是打算写一篇JS常见问题的总结帖巩固一下。&lt;/p&gt;
&lt;h2 id=&quot;JS里的深浅拷贝&quot;&gt;JS里的深浅拷贝&lt;/h2&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;letet a a = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    age     : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.age = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b.age) &lt;span class=&quot;comment&quot;&gt;// 输出为2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;上述例子可以发现，如果给一个变量赋值一个对象，那么两者的值会是同一个引用，其中一方改变，另一方也会相应改变。&lt;/li&gt;
&lt;li&gt;通常在开发中并不希望出现这样的问题，于是浅拷贝就可以来解决这个问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;浅拷贝&quot;&gt;浅拷贝&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;首先可以通过 &lt;code&gt;Object.assign&lt;/code&gt; 来解决这个问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    age: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.assign(&amp;#123;&amp;#125;, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.age = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b.age) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;也可以通过展开运算符&lt;code&gt;（…）&lt;/code&gt;来解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    age: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &amp;#123;...a&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.age = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b.age) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;通常浅拷贝就能解决大部分问题了，但是当遇到如下情况就需要使用到深拷贝了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/Interview/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 102 / DFS(1) 💪</title>
    <link href="WangHngLeee.github.io/2020/06/14/dfs01/"/>
    <id>WangHngLeee.github.io/2020/06/14/dfs01/</id>
    <published>2020-06-14T17:53:35.000Z</published>
    <updated>2020-06-14T22:22:35.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-332-Reconstruct-Itinerary-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">332. Reconstruct Itinerary</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/reconstruct-itinerary/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Example">Example</h3><p>Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.</p><p>Note:</p><p>If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary [“JFK”, “LGA”] has a smaller lexical order than [“JFK”, “LGB”].<br>All airports are represented by three capital letters (IATA code).<br>You may assume all tickets form at least one valid itinerary.<br>One must use all the tickets once and only once.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [[&quot;MUC&quot;, &quot;LHR&quot;], [&quot;JFK&quot;, &quot;MUC&quot;], [&quot;SFO&quot;, &quot;SJC&quot;], [&quot;LHR&quot;, &quot;SFO&quot;]]</span><br><span class="line">Output: [&quot;JFK&quot;, &quot;MUC&quot;, &quot;LHR&quot;, &quot;SFO&quot;, &quot;SJC&quot;]</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: [[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]</span><br><span class="line">Output: [&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</span><br><span class="line">Explanation: Another possible reconstruction is [&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;].</span><br><span class="line">But it is larger in lexical order.</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();;</span><br><span class="line">    Map&lt;String,PriorityQueue&lt;String&gt;&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findItinerary</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tickets == <span class="keyword">null</span> || tickets.size() == <span class="number">0</span>)<span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span>(List&lt;String&gt; ticket : tickets)&#123;</span><br><span class="line">            map.putIfAbsent(ticket.get(<span class="number">0</span>),<span class="keyword">new</span> PriorityQueue&lt;&gt;());</span><br><span class="line">            map.get(ticket.get(<span class="number">0</span>)).add(ticket.get(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="string">"JFK"</span>);<span class="comment">//类似tree的postorder遍历，</span></span><br><span class="line">        Collections.reverse(res);<span class="comment">//</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String start)</span></span>&#123;</span><br><span class="line">        PriorityQueue&lt;String&gt; ends = map.get(start);</span><br><span class="line">        <span class="keyword">while</span>(ends != <span class="keyword">null</span> &amp;&amp; !ends.isEmpty())&#123;</span><br><span class="line">            dfs(ends.poll());<span class="comment">//不断遍历children，也就是当前map里start对应的ends里lexi最小的那个。</span></span><br><span class="line">        &#125;</span><br><span class="line">        res.add(start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using pq to make sure that every polled element is the smallest leximal one. DFS is just like tree postorder traversal, we need to find the minmum leximal city as start, which is same as traversing children treenode at first. Then we add the root value to the res in the last.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/4udFSOWQpdg?start=278" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><a id="more"></a><hr><h2 id="table-tr-td-bgcolor-28B463-font-color-white-339-Nested-List-Weight-Sum-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">339. Nested List Weight Sum</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/nested-list-weight-sum/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><h3 id="Example-v2">Example</h3><p>Given a nested list of integers, return the sum of all integers in the list weighted by their depth.</p><p>Each element is either an integer, or a list – whose elements may also be integers or other lists.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [[1,1],2,[1,1]]</span><br><span class="line">Output: 10</span><br><span class="line">Explanation: Four 1&apos;s at depth 2, one 2 at depth 1.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: [1,[4,[6]]]</span><br><span class="line">Output: 27</span><br><span class="line">Explanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4*2 + 6*3 = 27.</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><ol><li><p>In dfs we only recursively to call the function in NestedInteger.</p></li><li><p>In bfs we can regard the nums like tree level traversal. The Integer one is root node, and nestedinteger is like the next levels’s nodes.</p></li></ol><p>DFS</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depthSum</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(nestedList, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(List&lt;NestedInteger&gt; nestedList, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(NestedInteger nest : nestedList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nest.isInteger()) &#123;</span><br><span class="line">                sum += depth * nest.getInteger();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += helper(nest.getList(), depth+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BFS</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depthSum</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nestedList == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">1</span>;</span><br><span class="line">        Queue&lt;NestedInteger&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(NestedInteger ni : nestedList)&#123;</span><br><span class="line">            queue.add(ni);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;size ;i++)&#123;</span><br><span class="line">                NestedInteger temp = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(temp.isInteger())sum+=temp.getInteger()*level;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(NestedInteger n : temp.getList())&#123;</span><br><span class="line">                        queue.add(n);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            level++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-364-Nested-List-Weight-Sum-II-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">364. Nested List Weight Sum II</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/nested-list-weight-sum-ii/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Example-v3">Example</h3><p>Given a nested list of integers, return the sum of all integers in the list weighted by their depth.</p><p>Each element is either an integer, or a list – whose elements may also be integers or other lists.</p><p>Different from the previous question where weight is increasing from root to leaf, now the weight is defined from bottom up. i.e., the leaf level integers have weight 1, and the root level integers have the largest weight.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [[1,1],2,[1,1]]</span><br><span class="line">Output: 8 </span><br><span class="line">Explanation: Four 1&apos;s at depth 1, one 2 at depth 2.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: [1,[4,[6]]]</span><br><span class="line">Output: 17 </span><br><span class="line">Explanation: One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 1*3 + 4*2 + 6*1 = 17.</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><p>It is a little different from the 339. In this question the nestedinteger has the lower depth and single integer has higher depth.</p><ol><li><p>DFS: First we find the total depth of the nestedlist,then we loop each element in the nestedlist,if it is integer then we multiply it by the layer, else we recursevely call the getSum function.</p></li><li><p>BFS: We use presum to store the temp sum of each layer.</p></li></ol><p>DFS</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depthSumInverse</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nestedList == <span class="keyword">null</span> || nestedList.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> h = helper(nestedList);</span><br><span class="line">        <span class="keyword">int</span> res = getSum(nestedList, h);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(List&lt;NestedInteger&gt; l, <span class="keyword">int</span> layer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == <span class="keyword">null</span> || l.size() == <span class="number">0</span>) <span class="keyword">return</span> sum;</span><br><span class="line">        <span class="keyword">for</span>(NestedInteger n : l) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n.isInteger()) sum += n.getInteger() * layer;</span><br><span class="line">            <span class="keyword">else</span> sum += getSum(n.getList(), layer - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(List&lt;NestedInteger&gt; l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == <span class="keyword">null</span> || l.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(NestedInteger n : l) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n.isInteger()) max = Math.max(max, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> max = Math.max(max, helper(n.getList()) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BFS</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depthSumInverse</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nestedList == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;NestedInteger&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(NestedInteger ni : nestedList)&#123;</span><br><span class="line">            queue.add(ni);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> prevsum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">int</span> levelsum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; size ;i++)&#123;</span><br><span class="line">                NestedInteger temp = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(temp.isInteger())levelsum+=temp.getInteger();</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(NestedInteger n : temp.getList())&#123;</span><br><span class="line">                        queue.add(n);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            prevsum+=levelsum;</span><br><span class="line">            total+=prevsum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-472-Concatenated-Words-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">472. Concatenated Words</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/concatenated-words/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words.<br>A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: [&quot;cat&quot;,&quot;cats&quot;,&quot;catsdogcats&quot;,&quot;dog&quot;,&quot;dogcatsdog&quot;,&quot;hippopotamuses&quot;,&quot;rat&quot;,&quot;ratcatdogcat&quot;]</span><br><span class="line">Output: [&quot;catsdogcats&quot;,&quot;dogcatsdog&quot;,&quot;ratcatdogcat&quot;]</span><br><span class="line">Explanation: &quot;catsdogcats&quot; can be concatenated by &quot;cats&quot;, &quot;dog&quot; and &quot;cats&quot;; </span><br><span class="line"> &quot;dogcatsdog&quot; can be concatenated by &quot;dog&quot;, &quot;cats&quot; and &quot;dog&quot;; </span><br><span class="line">&quot;ratcatdogcat&quot; can be concatenated by &quot;rat&quot;, &quot;cat&quot;, &quot;dog&quot; and &quot;cat&quot;.</span><br></pre></td></tr></table></figure><h3 id="Solution-v4">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findAllConcatenatedWordsInADict</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(words == <span class="keyword">null</span> || words.length == <span class="number">0</span>)<span class="keyword">return</span> res;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Arrays.sort(words,(a,b)-&gt;a.length() - b.length());<span class="comment">//sort the words with its length</span></span><br><span class="line">        <span class="keyword">for</span>(String str : words)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.length() &gt; <span class="number">0</span> &amp;&amp; check(set,str))&#123;</span><br><span class="line">                res.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(Set&lt;String&gt; set, String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(str))<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> len = str.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            String temp = str.substring(<span class="number">0</span>,i);</span><br><span class="line">            <span class="keyword">if</span>(set.contains(temp))&#123;</span><br><span class="line">                <span class="keyword">if</span>(check(set,str.substring(i)))&#123;</span><br><span class="line">                    set.add(str);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We first sort the str array from min length to max length. Then we add each string to set. Before add it to the set, we check it with the current set to see whether current word can be made up by any words in the set. We loop each part of the string, if one part exist in the set, then we recursively call the check function to see the other part.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-332-Reconstruct-Itinerary-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;332. Reconstruct Itinerary&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reconstruct-itinerary/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary [“JFK”, “LGA”] has a smaller lexical order than [“JFK”, “LGB”].&lt;br&gt;
All airports are represented by three capital letters (IATA code).&lt;br&gt;
You may assume all tickets form at least one valid itinerary.&lt;br&gt;
One must use all the tickets once and only once.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [[&amp;quot;MUC&amp;quot;, &amp;quot;LHR&amp;quot;], [&amp;quot;JFK&amp;quot;, &amp;quot;MUC&amp;quot;], [&amp;quot;SFO&amp;quot;, &amp;quot;SJC&amp;quot;], [&amp;quot;LHR&amp;quot;, &amp;quot;SFO&amp;quot;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [&amp;quot;JFK&amp;quot;, &amp;quot;MUC&amp;quot;, &amp;quot;LHR&amp;quot;, &amp;quot;SFO&amp;quot;, &amp;quot;SJC&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [[&amp;quot;JFK&amp;quot;,&amp;quot;SFO&amp;quot;],[&amp;quot;JFK&amp;quot;,&amp;quot;ATL&amp;quot;],[&amp;quot;SFO&amp;quot;,&amp;quot;ATL&amp;quot;],[&amp;quot;ATL&amp;quot;,&amp;quot;JFK&amp;quot;],[&amp;quot;ATL&amp;quot;,&amp;quot;SFO&amp;quot;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: [&amp;quot;JFK&amp;quot;,&amp;quot;ATL&amp;quot;,&amp;quot;JFK&amp;quot;,&amp;quot;SFO&amp;quot;,&amp;quot;ATL&amp;quot;,&amp;quot;SFO&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: Another possible reconstruction is [&amp;quot;JFK&amp;quot;,&amp;quot;SFO&amp;quot;,&amp;quot;ATL&amp;quot;,&amp;quot;JFK&amp;quot;,&amp;quot;ATL&amp;quot;,&amp;quot;SFO&amp;quot;].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;But it is larger in lexical order.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;String&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Map&amp;lt;String,PriorityQueue&amp;lt;String&amp;gt;&amp;gt; map=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;String&amp;gt; &lt;span class=&quot;title&quot;&gt;findItinerary&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; tickets)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(tickets == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || tickets.size() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(List&amp;lt;String&amp;gt; ticket : tickets)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.putIfAbsent(ticket.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PriorityQueue&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(ticket.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)).add(ticket.get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dfs(&lt;span class=&quot;string&quot;&gt;&quot;JFK&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//类似tree的postorder遍历，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Collections.reverse(res);&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String start)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PriorityQueue&amp;lt;String&amp;gt; ends = map.get(start);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(ends != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !ends.isEmpty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dfs(ends.poll());&lt;span class=&quot;comment&quot;&gt;//不断遍历children，也就是当前map里start对应的ends里lexi最小的那个。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res.add(start);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Using pq to make sure that every polled element is the smallest leximal one. DFS is just like tree postorder traversal, we need to find the minmum leximal city as start, which is same as traversing children treenode at first. Then we add the root value to the res in the last.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4udFSOWQpdg?start=278&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="DFS" scheme="WangHngLeee.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 101 / Graph(2) 💪</title>
    <link href="WangHngLeee.github.io/2020/06/13/graph03/"/>
    <id>WangHngLeee.github.io/2020/06/13/graph03/</id>
    <published>2020-06-13T17:53:35.000Z</published>
    <updated>2020-06-13T16:23:54.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-37-Sudoku-Solver-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">37. Sudoku Solver</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/sudoku-solver/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples">Examples</h3><p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p><p>A sudoku solution must satisfy all of the following rules:</p><p>Each of the digits 1-9 must occur exactly once in each row.<br>Each of the digits 1-9 must occur exactly once in each column.<br>Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.<br>Empty cells are indicated by the character ‘.’.</p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="leetcode 37"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png" alt="leetcode 37"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note:</span><br><span class="line"></span><br><span class="line">The given board contain only digits 1-9 and the character &apos;.&apos;.</span><br><span class="line">You may assume that the given Sudoku puzzle will have a single unique solution.</span><br><span class="line">The given board size is always 9x9.</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solveSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(board == <span class="keyword">null</span> || board.length == <span class="number">0</span>)<span class="keyword">return</span>; <span class="comment">//corner case</span></span><br><span class="line">        solve(board);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;board.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ;j&lt;board[<span class="number">0</span>].length ;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] ==<span class="string">'.'</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">char</span> c = <span class="string">'1'</span> ; c&lt;=<span class="string">'9'</span> ;c++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(valid(board,i,j,c))&#123;</span><br><span class="line">                            board[i][j] = c;</span><br><span class="line">                            <span class="keyword">if</span>(solve(board))<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">else</span>&#123;</span><br><span class="line">                                board[i][j] = <span class="string">'.'</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">char</span> c)</span></span>&#123;<span class="comment">//used to check every row and col;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">9</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(board[i][col] != <span class="string">'.'</span> &amp;&amp; board[i][col] == c)<span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// check each col;</span></span><br><span class="line">            <span class="keyword">if</span>(board[row][i] != <span class="string">'.'</span> &amp;&amp; board[row][i] == c)<span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//check each row;</span></span><br><span class="line">            <span class="keyword">if</span>(board[<span class="number">3</span>*(row /<span class="number">3</span>)+i/<span class="number">3</span>][<span class="number">3</span>*(col/<span class="number">3</span>)+i%<span class="number">3</span>]!=<span class="string">'.'</span>&amp;&amp;board[<span class="number">3</span>*(row/<span class="number">3</span>)+i/<span class="number">3</span>][<span class="number">3</span>*(col/<span class="number">3</span>)+i%<span class="number">3</span>]==c)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recursively call the solve function to check the graph. We try to put number 1-9 in each empty cell and then check its col and row to find whether there exist duplicate numbers. If not then we return true.</p><p>The tricky part is the last case in valid function. We check each 3x3 grid for a single part in each loop to make sure every number is unique in their 3x3 square area.</p><a id="more"></a><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-131-Palindrome-Partitioning-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">131. Palindrome Partitioning</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/palindrome-partitioning/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Example">Example</h3><p>Given a string s, partition s such that every substring of the partition is a palindrome.</p><p>Return all possible palindrome partitioning of s.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: &quot;aab&quot;</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;aa&quot;,&quot;b&quot;],</span><br><span class="line">  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)<span class="keyword">return</span> res;</span><br><span class="line">        help(res,temp,<span class="number">0</span>,s);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">help</span><span class="params">(List&lt;List&lt;String&gt;&gt; res, List&lt;String&gt; temp, <span class="keyword">int</span> start, String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start == s.length())res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(temp));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start; i&lt;s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(valid(s,start,i))&#123;</span><br><span class="line">                temp.add(s.substring(start,i+<span class="number">1</span>));</span><br><span class="line">                help(res,temp,i+<span class="number">1</span>,s);</span><br><span class="line">                temp.remove(temp.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(left) != s.charAt(right))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Common backtracking solution. Only difference is that we use a common method ‘valid’ to check whether a string is palindrome or not.</p><hr><h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-980-Unique-Paths-IIIr-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">980. Unique Paths IIIr</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/unique-paths-iii/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples-v2">Examples</h3><p>On a 2-dimensional grid, there are 4 types of squares:</p><p>1 represents the starting square.  There is exactly one starting square.<br>2 represents the ending square.  There is exactly one ending square.<br>0 represents empty squares we can walk over.<br>-1 represents obstacles that we cannot walk over.<br>Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: We have the following two paths:</span><br><span class="line">1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)</span><br><span class="line">2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, empty = <span class="number">1</span>, startx, starty;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsIII</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">0</span>) empty++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    startx = i;</span><br><span class="line">                    starty = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(grid, startx, starty);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= grid.length || y &lt; <span class="number">0</span> || y &gt;= grid[<span class="number">0</span>].length || grid[x][y] &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (grid[x][y]==<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (empty == <span class="number">0</span>) res++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[x][y] = -<span class="number">2</span>;</span><br><span class="line">        empty--;</span><br><span class="line">        dfs(grid, x + <span class="number">1</span>, y);</span><br><span class="line">        dfs(grid, x - <span class="number">1</span>, y);</span><br><span class="line">        dfs(grid, x, y + <span class="number">1</span>);</span><br><span class="line">        dfs(grid, x, y - <span class="number">1</span>);</span><br><span class="line">        grid[x][y] = <span class="number">0</span>;</span><br><span class="line">        empty++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First we find the start point, then using dfs and backtracking to find the unique path to the end point. Triky point is that the initial empty num is 1 because start point is caculated as empty too.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-37-Sudoku-Solver-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;37. Sudoku Solver&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/sudoku-solver/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Examples&quot;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Write a program to solve a Sudoku puzzle by filling the empty cells.&lt;/p&gt;
&lt;p&gt;A sudoku solution must satisfy all of the following rules:&lt;/p&gt;
&lt;p&gt;Each of the digits 1-9 must occur exactly once in each row.&lt;br&gt;
Each of the digits 1-9 must occur exactly once in each column.&lt;br&gt;
Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.&lt;br&gt;
Empty cells are indicated by the character ‘.’.&lt;/p&gt;
&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png&quot; alt=&quot;leetcode 37&quot;&gt;
&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png&quot; alt=&quot;leetcode 37&quot;&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Note:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The given board contain only digits 1-9 and the character &amp;apos;.&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You may assume that the given Sudoku puzzle will have a single unique solution.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The given board size is always 9x9.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solveSudoku&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[][] board)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || board.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//corner case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        solve(board);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[][] board)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ;i&amp;lt;board.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ;j&amp;lt;board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length ;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j] ==&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c = &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt; ; c&amp;lt;=&lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt; ;c++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(valid(board,i,j,c))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            board[i][j] = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(solve(board))&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                board[i][j] = &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[][] board, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;//used to check every row and col;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ;i&amp;lt;&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][col] != &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt; &amp;amp;&amp;amp; board[i][col] == c)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// check each col;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[row][i] != &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt; &amp;amp;&amp;amp; board[row][i] == c)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//check each row;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*(row /&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)+i/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*(col/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)+i%&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]!=&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;&amp;amp;&amp;amp;board[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*(row/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)+i/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;*(col/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)+i%&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]==c)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Recursively call the solve function to check the graph. We try to put number 1-9 in each empty cell and then check its col and row to find whether there exist duplicate numbers. If not then we return true.&lt;/p&gt;
&lt;p&gt;The tricky part is the last case in valid function. We check each 3x3 grid for a single part in each loop to make sure every number is unique in their 3x3 square area.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="BackTracking" scheme="WangHngLeee.github.io/tags/BackTracking/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 100 / Tree(2) 💪</title>
    <link href="WangHngLeee.github.io/2020/06/11/tree02/"/>
    <id>WangHngLeee.github.io/2020/06/11/tree02/</id>
    <published>2020-06-11T17:53:35.000Z</published>
    <updated>2020-06-11T20:15:54.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-96-Unique-Binary-Search-Trees-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">96. Unique Binary Search Trees</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/unique-binary-search-trees/"><font size="4">🔗 Question Link </font></a></p><h3 id="Example">Example</h3><p>Given n, how many structurally unique BST’s (binary search trees) that store values 1 … n?</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: 3</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line">Given n = 3, there are a total of 5 unique BST&apos;s:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><p>DP + Math</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;=i ; j ++)&#123;</span><br><span class="line">                dp[i] += dp[j-<span class="number">1</span>]*dp[i-j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(n) S:O(n)</p><p>Let say G(n) is the final res. In each subtree, we say F(i,n) is the number of unique BST.</p><p>Take 1,2,3 for example:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                    G(3)</span><br><span class="line">            /         |             \</span><br><span class="line">     F(1,3)    +    F(2,3)   +    F(3,3)</span><br><span class="line">  (1 as root)     (2 as root)    (3 as root)</span><br><span class="line">     /  \            /  \           /  \</span><br><span class="line">  G(0)  G(1)      G(1) G(1)     G(2)  G(1)</span><br><span class="line">According to defination of BST, so different root have different subtrees.</span><br></pre></td></tr></table></figure><iframe width="560" height="315" src="https://www.youtube.com/embed/GgP75HAvrlY?start=438" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><a id="more"></a><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">105. Construct Binary Tree from Preorder and Inorder Traversal</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"><font size="4">🔗 Question Link </font></a></p><h3 id="Example-v2">Example</h3><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p><p>Note:<br>You may assume that duplicates do not exist in the tree.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">For example, given</span><br><span class="line">preorder = [3,9,20,15,7]</span><br><span class="line">inorder = [9,3,15,20,7]</span><br><span class="line">Return the following binary tree:</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder == <span class="keyword">null</span> || inorder == <span class="keyword">null</span> || preorder.length == <span class="number">0</span>|| inorder.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;inorder.length; i++)&#123;</span><br><span class="line">            map.put(inorder[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> build(inorder,<span class="number">0</span>,inorder.length-<span class="number">1</span>,preorder,<span class="number">0</span>,preorder.length-<span class="number">1</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">build</span><span class="params">(<span class="keyword">int</span>[]inorder, <span class="keyword">int</span> is, <span class="keyword">int</span> ie, <span class="keyword">int</span>[] preorder, <span class="keyword">int</span> ps, <span class="keyword">int</span> pe, Map&lt;Integer,Integer&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is &gt; ie || ps &gt; pe)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode node = <span class="keyword">new</span> TreeNode(preorder[ps]);</span><br><span class="line">        <span class="keyword">int</span> inidx = map.get(preorder[ps]); <span class="comment">// 在inorder里得到node的位置</span></span><br><span class="line">        <span class="keyword">int</span> remains = inidx - is; <span class="comment">// 得到左半部分的剩余</span></span><br><span class="line">        node.left = build(inorder,is,inidx-<span class="number">1</span>,preorder,ps+<span class="number">1</span>,ps+remains,map);</span><br><span class="line">        node.right = build(inorder,inidx+<span class="number">1</span>,ie,preorder,ps+remains+<span class="number">1</span>,pe,map);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recursively building a tree from preorder and inorder array. Root is the first element in preorder, and use that element to find the index in inorder to caculate the left and right part’s length. Using map to store the index and element in the map.</p><p>T:O(n) S:O(n)</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-863-All-Nodes-Distance-K-in-Binary-Tree-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">863. All Nodes Distance K in Binary Tree</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/"><font size="4">🔗 Question Link </font></a></p><h3 id="Example-v3">Example</h3><p>We are given a binary tree (with root node root), a target node, and an integer value K.</p><p>Return a list of the values of all nodes that have a distance K from the target node.  The answer can be returned in any order.</p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png" alt="leetcode 863"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2</span><br><span class="line"></span><br><span class="line">Output: [7,4,1]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The nodes that are a distance 2 from the target node (with value 5)</span><br><span class="line">have values 7, 4, and 1.</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Map&lt;TreeNode,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">distanceK</span><span class="params">(TreeNode root, TreeNode target, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)<span class="keyword">return</span> res;</span><br><span class="line">        find(root,target);</span><br><span class="line">        dfs(root,<span class="number">0</span>,K,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(TreeNode root, TreeNode target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(root == target)&#123;</span><br><span class="line">            map.put(root,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = find(root.left,target);</span><br><span class="line">        <span class="keyword">if</span>(left&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            map.put(root,left+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> left+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> right = find(root.right,target);</span><br><span class="line">        <span class="keyword">if</span>(right&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            map.put(root,right+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> right+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> dist, <span class="keyword">int</span> K, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(root))&#123;</span><br><span class="line">            dist = map.get(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dist == K)res.add(root.val);</span><br><span class="line">        dfs(root.left,dist+<span class="number">1</span>,K,res);</span><br><span class="line">        dfs(root.right,dist+<span class="number">1</span>,K,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using map to store different node’s distance to the target node.(Only sublayer node). Then using dfs to scan each node to caculate the distance. If it is not in the map, it means that node is uplayer of the target, so we using default 0 from root to scan, each step we add 1. If we meet a node that stored in the map, the we use the distance stored in the map to justify the distance.</p><p>T:O(n) S:O(n)</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-366-Find-Leaves-of-Binary-Tree-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">366. Find Leaves of Binary Tree</font></td></tr></table></h2><p><a target="_blank" href="https://leetcode.com/problems/find-leaves-of-binary-tree/"><font size="4">🔗 Question Link </font></a></p><h3 id="Example-v4">Example</h3><p>Given a binary tree, collect a tree’s nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">          1</span><br><span class="line">         / \</span><br><span class="line">        2   3</span><br><span class="line">       / \     </span><br><span class="line">      4   5    </span><br><span class="line"></span><br><span class="line">Output: [[4,5,3],[2],[1]]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">1. Removing the leaves [4,5,3] would result in this tree:</span><br><span class="line">          1</span><br><span class="line">         / </span><br><span class="line">        2          </span><br><span class="line">2. Now removing the leaf [2] would result in this tree:</span><br><span class="line">          1          </span><br><span class="line">3. Now removing the leaf [1] would result in the empty tree:</span><br><span class="line">          []</span><br></pre></td></tr></table></figure><h3 id="Solution-v4">Solution</h3><p>Recursive</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; findLeaves(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)<span class="keyword">return</span> res;</span><br><span class="line">        find(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(TreeNode root, List&lt;List&lt;Integer&gt;&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = find(root.left,res);</span><br><span class="line">        <span class="keyword">int</span> right = find(root.right,res);</span><br><span class="line">        <span class="keyword">int</span> level = Math.max(left,right)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(res.size()&lt;level+<span class="number">1</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        res.get(level).add(root.val);</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using every node’s level to determine whether current node is leaf or not. Leaf node’s level return -1+1=0. Then we add the nodes to res by the order of it’s level. -&gt; 0: 4,5,3  -&gt; 1:2 -&gt; 2:1</p><p>T:O(n) S:O(n)</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-96-Unique-Binary-Search-Trees-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;96. Unique Binary Search Trees&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://leetcode.com/problems/unique-binary-search-trees/&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given n, how many structurally unique BST’s (binary search trees) that store values 1 … n?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Given n = 3, there are a total of 5 unique BST&amp;apos;s:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1         3     3      2      1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    \       /     /      / \      \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     3     2     1      1   3      2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /     /       \                 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   2     1         2                 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;p&gt;DP + Math&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;numTrees&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = dp[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;lt;=n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ; j&amp;lt;=i ; j ++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i] += dp[j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]*dp[i-j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;T:O(n) S:O(n)&lt;/p&gt;
&lt;p&gt;Let say G(n) is the final res. In each subtree, we say F(i,n) is the number of unique BST.&lt;/p&gt;
&lt;p&gt;Take 1,2,3 for example:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                    G(3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            /         |             \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     F(1,3)    +    F(2,3)   +    F(3,3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (1 as root)     (2 as root)    (3 as root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     /  \            /  \           /  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  G(0)  G(1)      G(1) G(1)     G(2)  G(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;According to defination of BST, so different root have different subtrees.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/GgP75HAvrlY?start=438&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Tree" scheme="WangHngLeee.github.io/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 99 / Graph(2) 💪</title>
    <link href="WangHngLeee.github.io/2020/06/09/graph02/"/>
    <id>WangHngLeee.github.io/2020/06/09/graph02/</id>
    <published>2020-06-09T17:53:35.000Z</published>
    <updated>2020-06-09T22:11:49.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1102-Path-With-Maximum-Minimum-Value-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1102. Path With Maximum Minimum Value</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/path-with-maximum-minimum-value/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Example">Example</h3><p>Given a matrix of integers A with R rows and C columns, find the maximum score of a path starting at [0,0] and ending at [R-1,C-1].</p><p>The score of a path is the minimum value in that path.  For example, the value of the path 8 →  4 →  5 →  9 is 4.</p><p>A path moves some number of times from one visited cell to any neighbouring unvisited cell in one of the 4 cardinal directions (north, east, west, south).</p><img src="https://assets.leetcode.com/uploads/2019/04/23/1313_ex1.JPG" alt="leetcode 1102"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [[5,4,5],[1,2,6],[7,4,6]]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: </span><br><span class="line">The path with the maximum score is highlighted in yellow.</span><br></pre></td></tr></table></figure><h3 id="Solution">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumMinimumPath</span><span class="params">(<span class="keyword">int</span>[][] A)</span> </span>&#123;</span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a,b)-&gt;Integer.compare(b[<span class="number">0</span>],a[<span class="number">0</span>]));</span><br><span class="line">        pq.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;A[<span class="number">0</span>][<span class="number">0</span>],<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">int</span> minval = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> m = A.length;</span><br><span class="line">        <span class="keyword">int</span> n = A[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">boolean</span>[][] seen = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">        seen[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span>[] temp = pq.poll();</span><br><span class="line">            <span class="keyword">int</span> i = temp[<span class="number">1</span>], j= temp[<span class="number">2</span>],val = temp[<span class="number">0</span>];</span><br><span class="line">            minval = Math.min(minval,val);</span><br><span class="line">            <span class="keyword">if</span>(i==m-<span class="number">1</span> &amp;&amp; j==n-<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>[] dir : dirs)&#123;</span><br><span class="line">                <span class="keyword">int</span> newx = i+dir[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> newy = j+dir[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(newx &gt;=<span class="number">0</span> &amp;&amp; newx&lt;m &amp;&amp; newy&gt;=<span class="number">0</span> &amp;&amp; newy&lt;n &amp;&amp; !seen[newx][newy])&#123;</span><br><span class="line">                    pq.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;A[newx][newy],newx,newy&#125;);</span><br><span class="line">                    seen[newx][newy] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minval;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using BFS to keep searching the max value path. Using priorityqueue to keep the max one on the top. And keep the minval to find the minval in the max path.</p><p>T:O(n) S:O(n)</p><a id="more"></a><hr><h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-765-Couples-Holding-Hands-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">765. Couples Holding Hands</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/couples-holding-hands/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Examples">Examples</h3><p>N couples sit in 2N seats arranged in a row and want to hold hands. We want to know the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.</p><p>The people and seats are represented by an integer from 0 to 2N-1, the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2N-2, 2N-1).</p><p>The couples’ initial seating is given by row[i] being the value of the person who is initially sitting in the i-th seat.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: row = [0, 2, 1, 3]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: We only need to swap the second (row[1]) and third (row[2]) person.</span><br></pre></td></tr></table></figure><h3 id="Solution-v2">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UF</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] parents;</span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UF</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">            parents = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;n ;i++)&#123;</span><br><span class="line">                parents[i] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span> <span class="params">( <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(parents[n] == n)<span class="keyword">return</span> n;</span><br><span class="line">            <span class="keyword">return</span> parents[n] = find(parents[n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> root1 = find(a);</span><br><span class="line">            <span class="keyword">int</span> root2 = find(b);</span><br><span class="line">            <span class="keyword">if</span>(root1 != root2)&#123;</span><br><span class="line">                parents[root1] = root2;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSwapsCouples</span><span class="params">(<span class="keyword">int</span>[] row)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = row.length /<span class="number">2</span>;</span><br><span class="line">        UF unionfind = <span class="keyword">new</span> UF(N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;N ;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a  = row[i*<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">int</span> b  = row[i*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">            unionfind.union(a/<span class="number">2</span>,b/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> unionfind.count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using UF is more efficient. Just regard each couple is a vertex in the graph, what we need to do is to find the number of unconnected components, which is also the times we need to swap.</p><p>T:O(n) S:O(n)</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1267-Count-Servers-that-Communicate-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1267. Count Servers that Communicate</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/count-servers-that-communicate/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Example-v2">Example</h3><p>You are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.</p><p>Return the number of servers that communicate with any other server.<br><img src="https://assets.leetcode.com/uploads/2019/11/14/untitled-diagram-6.jpg" alt="leetcode 1267"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: grid = [[1,0],[0,1]]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: No servers can communicate with others.</span><br></pre></td></tr></table></figure><h3 id="Solution-v3">Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countServers</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] row = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">        <span class="keyword">int</span>[] col = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    row[i]++;</span><br><span class="line">                    col[j]++;</span><br><span class="line">                    total++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(row[i]==<span class="number">1</span> &amp;&amp; col[j] == <span class="number">1</span>)&#123;</span><br><span class="line">                        total--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First we loop each vertex in the graph, if it’s value is 1 we add 1 to total and update the row and col array to count the total computers that are on the same row or col. Then we loop the graph again to remove the single computer, which row and col is only 1.</p><p>T:O(m*n) S:O(n)</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-802-Find-Eventual-Safe-States-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">802. Find Eventual Safe States</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/find-eventual-safe-states/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Example-v3">Example</h3><p>In a directed graph, we start at some node and every turn, walk along a directed edge of the graph.  If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.</p><p>Now, say our starting node is eventually safe if and only if we must eventually walk to a terminal node.  More specifically, there exists a natural number K so that for any choice of where to walk, we must have stopped at a terminal node in less than K steps.</p><p>Which nodes are eventually safe?  Return them as an array in sorted order.</p><p>The directed graph has N nodes with labels 0, 1, …, N-1, where N is the length of graph.  The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph.</p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png" alt="leetcode 802"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]</span><br><span class="line">Output: [2,4,5,6]</span><br><span class="line">Here is a diagram of the above graph.</span><br></pre></td></tr></table></figure><h3 id="Solution-v4">Solution</h3><p>DFS -  Tarjan’s Torpological</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">eventualSafeNodes</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(graph == <span class="keyword">null</span> || graph.length == <span class="number">0</span>)<span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span>[] state = <span class="keyword">new</span> <span class="keyword">int</span>[graph.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;graph.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dfs(graph,i,state))&#123;</span><br><span class="line">                res.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span> node, <span class="keyword">int</span>[] state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(state[node] == <span class="number">1</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(state[node] == <span class="number">2</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        state[node] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : graph[node])&#123;</span><br><span class="line">            <span class="keyword">if</span>(!dfs(graph,num,state))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        state[node] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T: O(V + E) S: O(V)</p><p>Using <a target="_blank" href="https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm#:~:text=Tarjan's%20algorithm%20is%20an%20algorithm,path%2Dbased%20strong%20component%20algorithm.">Tarjan’s algo torpological</a> to find SCC. If there is no SCC then we return true which means we can reach final safe state, then we add current node into res. Otherwise we return false.</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-684-Redundant-Connection-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">684. Redundant Connection</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/redundant-connection/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Example-v4">Example</h3><p>The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, …, N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.</p><p>The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u &lt; v, that represents an undirected edge connecting nodes u and v.</p><p>Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u &lt; v.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [[1,2], [1,3], [2,3]]</span><br><span class="line">Output: [2,3]</span><br><span class="line">Explanation: The given undirected graph will be like this:</span><br><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">2 - 3</span><br></pre></td></tr></table></figure><h3 id="Solution-v5">Solution</h3><p>Union-Find:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findRedundantConnection(<span class="keyword">int</span>[][] edges) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] parents = <span class="keyword">new</span> <span class="keyword">int</span>[edges.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=edges.length; i++)&#123;</span><br><span class="line">            parents[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] edge: edges)&#123;</span><br><span class="line">            <span class="keyword">int</span> root1 = find(parents,edge[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> root2 = find(parents,edge[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(root1 == root2)&#123;</span><br><span class="line">                <span class="keyword">return</span> edge;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                parents[root1] = root2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] parents, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == parents[i])<span class="keyword">return</span> i;</span><br><span class="line">        parents[i] = find(parents,parents[i]);</span><br><span class="line">        <span class="keyword">return</span> parents[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is clearly that we have to find the edge that cause a loop in the graph. So UF is the best way to do that. Once we find one vertex have the same root with other vertex then we return the edge that current vertex exist in.</p><p>T:O(n) S:O(n)</p><hr><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-841-Keys-and-Rooms-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">841. Keys and Rooms</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/keys-and-rooms/" target="_blank" rel="noopener"><font size="4">🔗 Question Link </font></a></p><h3 id="Example-v5">Example</h3><p>There are N rooms and you start in room 0.  Each room has a distinct number in 0, 1, 2, …, N-1, and each room may have some keys to access the next room.</p><p>Formally, each room i has a list of keys rooms[i], and each key rooms[i][j] is an integer in [0, 1, …, N-1] where N = rooms.length.  A key rooms[i][j] = v opens the room with number v.</p><p>Initially, all the rooms start locked (except for room 0).</p><p>You can walk back and forth between rooms freely.</p><p>Return true if and only if you can enter every room.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: [[1],[2],[3],[]]</span><br><span class="line">Output: true</span><br><span class="line">Explanation:  </span><br><span class="line">We start in room 0, and pick up key 1.</span><br><span class="line">We then go to room 1, and pick up key 2.</span><br><span class="line">We then go to room 2, and pick up key 3.</span><br><span class="line">We then go to room 3.  Since we were able to go to every room, we return true.</span><br></pre></td></tr></table></figure><h3 id="Solution-v6">Solution</h3><p>BFS</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canVisitAllRooms</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; rooms)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(rooms == <span class="keyword">null</span> || rooms.size() == <span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        stack.push(<span class="number">0</span>);</span><br><span class="line">        set.add(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = stack.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> key : rooms.get(temp))&#123;</span><br><span class="line">                <span class="keyword">if</span>(!set.contains(key))&#123;</span><br><span class="line">                    set.add(key);</span><br><span class="line">                    stack.push(key);</span><br><span class="line">                    <span class="keyword">if</span>(set.size() == rooms.size())<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set.size() == rooms.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T:O(n) S:O(n)</p><p>Straight forward solution. Using BFS to get each key and store them in set. Using stack to keep track of the rooms that we just opened.<br>We only need to check whether the size of set and size of rooms are same.</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-1102-Path-With-Maximum-Minimum-Value-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;1102. Path With Maximum Minimum Value&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/path-with-maximum-minimum-value/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗 Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Given a matrix of integers A with R rows and C columns, find the maximum score of a path starting at [0,0] and ending at [R-1,C-1].&lt;/p&gt;
&lt;p&gt;The score of a path is the minimum value in that path.  For example, the value of the path 8 →  4 →  5 →  9 is 4.&lt;/p&gt;
&lt;p&gt;A path moves some number of times from one visited cell to any neighbouring unvisited cell in one of the 4 cardinal directions (north, east, west, south).&lt;/p&gt;
&lt;img src=&quot;https://assets.leetcode.com/uploads/2019/04/23/1313_ex1.JPG&quot; alt=&quot;leetcode 1102&quot;&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: [[5,4,5],[1,2,6],[7,4,6]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The path with the maximum score is highlighted in yellow.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Solution&quot;&gt;Solution&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dirs = &amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maximumMinimumPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] A)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PriorityQueue&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[]&amp;gt; pq = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PriorityQueue&amp;lt;&amp;gt;((a,b)-&amp;gt;Integer.compare(b[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],a[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pq.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[]&amp;#123;A[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; minval = Integer.MAX_VALUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m = A.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = A[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;[][] seen = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;[m][n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        seen[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!pq.isEmpty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] temp = pq.poll();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = temp[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], j= temp[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;],val = temp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minval = Math.min(minval,val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(i==m-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; j==n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] dir : dirs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; newx = i+dir[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; newy = j+dir[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(newx &amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; newx&amp;lt;m &amp;amp;&amp;amp; newy&amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; newy&amp;lt;n &amp;amp;&amp;amp; !seen[newx][newy])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    pq.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[]&amp;#123;A[newx][newy],newx,newy&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    seen[newx][newy] = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; minval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Using BFS to keep searching the max value path. Using priorityqueue to keep the max one on the top. And keep the minval to find the minval in the max path.&lt;/p&gt;
&lt;p&gt;T:O(n) S:O(n)&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Graph" scheme="WangHngLeee.github.io/tags/Graph/"/>
    
  </entry>
  
</feed>
