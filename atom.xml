<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leee&#39;s World</title>
  
  <subtitle>Talk is Cheap. Show me the code.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="WangHngLeee.github.io/"/>
  <updated>2020-03-07T05:52:04.738Z</updated>
  <id>WangHngLeee.github.io/</id>
  
  <author>
    <name>HongLeee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Review Problems List 📌</title>
    <link href="WangHngLeee.github.io/9999/12/31/problemslist/"/>
    <id>WangHngLeee.github.io/9999/12/31/problemslist/</id>
    <published>9999-12-31T16:13:23.000Z</published>
    <updated>2020-03-07T05:52:04.738Z</updated>
    
    <content type="html"><![CDATA[<br><font size="3"> 记录Problems list的完成情况 每日更新。<br><a href="https://docs.google.com/spreadsheets/d/1SwcfcnOXL_7lbdqZm8dia_WU20aQ-ZTjGf4G0oJ6qpA/edit#gid=972946549" target="_blank" rel="noopener"><font size="4">🔗 Problems List  Link </font></a><br>Github Leetcode Summary 同步更新。<br><a href="https://github.com/WangHngLeee/LeetcodeSummary" target="_blank" rel="noopener"><font size="4">🔗 Github Summary Link </font></a><br>2020/03/02 —— 500题成就达成 💪</font><br><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;br&gt;
&lt;font size=&quot;3&quot;&gt; 记录Problems list的完成情况 每日更新。&lt;br&gt;
&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1SwcfcnOXL_7lbdqZm8dia_WU20aQ-ZTjGf4G0oJ
      
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Problems List" scheme="WangHngLeee.github.io/tags/Problems-List/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 92 💪</title>
    <link href="WangHngLeee.github.io/2020/05/24/code02/"/>
    <id>WangHngLeee.github.io/2020/05/24/code02/</id>
    <published>2020-05-24T22:15:39.000Z</published>
    <updated>2020-05-24T22:26:31.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-130-Surrounded-Regions-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">130. Surrounded Regions</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/surrounded-regions/" target="_blank" rel="noopener"><font size="4">ðŸ”—Question Link </font></a></p><ul><li>BFS Solution :</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(board.length &lt; <span class="number">3</span> || board[<span class="number">0</span>].length &lt; <span class="number">3</span>)<span class="keyword">return</span>;</span><br><span class="line">        Queue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> row = board.length;</span><br><span class="line">        <span class="keyword">int</span> col = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;row;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j&lt;col;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>( (i==<span class="number">0</span> || i==row-<span class="number">1</span> || j==<span class="number">0</span> || j==col-<span class="number">1</span> ) &amp;&amp; board[i][j] == <span class="string">'O'</span>)&#123;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,j&#125;);</span><br><span class="line">                    board[i][j] = <span class="string">'a'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span>[] temp = queue.poll();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>[] dir : dirs)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = temp[<span class="number">0</span>]+dir[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> y = temp[<span class="number">1</span>]+dir[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; row &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; col &amp;&amp; board[x][y] == <span class="string">'O'</span>) &#123;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;x,y&#125;);</span><br><span class="line">                    board[x][y] = <span class="string">'a'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; row ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j&lt;col ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'a'</span>)board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'O'</span>)board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DFS Solution :</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dirs = &#123;&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(board.length &lt; <span class="number">3</span> || board[<span class="number">0</span>].length &lt; <span class="number">3</span>)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> row = board.length;</span><br><span class="line">        <span class="keyword">int</span> col = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;row;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j&lt;col;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>( (i==<span class="number">0</span> || i==row-<span class="number">1</span> || j==<span class="number">0</span> || j==col-<span class="number">1</span> ) &amp;&amp; board[i][j] == <span class="string">'O'</span>)&#123;</span><br><span class="line">                    helper(i,j,board);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; row ; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j&lt;col ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">'a'</span>)board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(board[i][j] == <span class="string">'O'</span>)board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">char</span>[][]board)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r &gt;= <span class="number">0</span> &amp;&amp; c &gt;= <span class="number">0</span> &amp;&amp; r &lt;= board.length - <span class="number">1</span> &amp;&amp; c &lt;= board[<span class="number">0</span>].length - <span class="number">1</span> &amp;&amp; board[r][c] == <span class="string">'O'</span>)&#123;</span><br><span class="line">            board[r][c] = <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>[] dir : dirs)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = r + dir[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> y = c + dir[<span class="number">1</span>];</span><br><span class="line">                helper(x,y,board);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In both solution, we just first check the boundary of the board and to check the continus Os, and we change every continus O in boundary into ‘a’. After that, we make a loop of the whole board to change ‘a’ into O and all other Os into ‘X’.</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-130-Surrounded-Regions-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;130. Surrounded Regions&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/surrounded-regions/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;ðŸ”—Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BFS Solution :&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[][] board)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board.length &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; || board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Queue&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[]&amp;gt; queue = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dirs = &amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row = board.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col = board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i&amp;lt;row;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; j&amp;lt;col;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( (i==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || i==row-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || j==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || j==col-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) &amp;amp;&amp;amp; board[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    queue.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[]&amp;#123;i,j&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    board[i][j] = &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!queue.isEmpty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] temp = queue.poll();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] dir : dirs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = temp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]+dir[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y = temp[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+dir[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; x &amp;lt; row &amp;amp;&amp;amp; y &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;lt; col &amp;amp;&amp;amp; board[x][y] == &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    queue.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[]&amp;#123;x,y&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    board[x][y] = &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; row ; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; j&amp;lt;col ; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)board[i][j] = &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;)board[i][j] = &lt;span class=&quot;string&quot;&gt;&#39;X&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;DFS Solution :&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dirs = &amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[][] board)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board.length &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; || board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row = board.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col = board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i&amp;lt;row;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; j&amp;lt;col;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( (i==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || i==row-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || j==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || j==col-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) &amp;amp;&amp;amp; board[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    helper(i,j,board);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; row ; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; j&amp;lt;col ; j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)board[i][j] = &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j] == &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;)board[i][j] = &lt;span class=&quot;string&quot;&gt;&#39;X&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;[][]board)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (r &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; c &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; r &amp;lt;= board.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; board[r][c] == &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            board[r][c] = &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] dir : dirs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x = r + dir[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y = c + dir[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                helper(x,y,board);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In both solution, we just first check the boundary of the board and to check the continus Os, and we change every continus O in boundary into ‘a’. After that, we make a loop of the whole board to change ‘a’ into O and all other Os into ‘X’.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>React Review 📓</title>
    <link href="WangHngLeee.github.io/2020/05/19/react1/"/>
    <id>WangHngLeee.github.io/2020/05/19/react1/</id>
    <published>2020-05-19T13:58:50.000Z</published>
    <updated>2020-05-19T19:39:10.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-复习">React 复习</h2><h3 id="生命周期">生命周期</h3><p>生命周期就是组件从实例化到渲染再到最终从页面中销毁，整个过程就是生命周期。在生命周期中，有很多可以调用的事件，也称为hook/钩子函数。</p><h3 id="生命周期三个状态">生命周期三个状态</h3><ul><li>Mounting : 将组件插入DOM中</li><li>Updating : 将组件更新到DOM中</li><li>Unmounting : 将组件移出DOM</li></ul><h3 id="钩子函数（方法，事件）">钩子函数（方法，事件）</h3><ul><li><p>componentWillMount(): 组件将要渲染,AJAX,添加动画前的类</p></li><li><p>componentDidMount(): 组件渲染完毕，添加动画</p></li><li><p>componentWillReceiveProps(): 组件将要接受props数据</p></li><li><p>shouldComponentUpdate(): 组件接收到新的props/state时判断是否更新，返回boolean值</p></li><li><p>componentWillUpdate(): 组件将要更新</p></li><li><p>componentDidUpdate(): 组件更新完毕</p></li><li><p>compnentWillUnmount(): 组件将要卸载</p></li></ul><a id="more"></a><p>尝试以下代码输出情况：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complife</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            msg:<span class="string">'test msg'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'构造函数'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillMount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'挂载完毕，准备渲染'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'渲染完毕'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillReceiveProps()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件将要接受props'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    shouldComponentUpdate()&#123;</span><br><span class="line">        <span class="comment">//如果希望更新返回true，不希望则返回false，不更新就是undefined</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.msg == <span class="string">'test msg'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUpdate()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件将要更新'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidUpdate()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件更新完毕'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件卸载'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log（<span class="string">'渲染函数'</span>)</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;hello world&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Complife /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>console结果</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">组件将要渲染</span><br><span class="line">渲染函数</span><br><span class="line">组件渲染完毕</span><br></pre></td></tr></table></figure><p>没有其他event时构造的顺序如上面结果所示。</p><p>但如果有clickevent更新状态时，组件的状态顺序又是怎样的呢？</p><p>其他不变，在render函数中增加一个ondlick事件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">......</span><br><span class="line">    render()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log（<span class="string">'渲染函数'</span>)</span><br><span class="line">            <span class="keyword">return</span>(</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;h1&gt;&#123;<span class="keyword">this</span>.state.msg&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;button onClick=&#123;this.changeMsg&#125;&gt;更新&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        changeMsg=()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">            this.setState(&#123;</span></span><br><span class="line"><span class="regexp">                msg:"changing msg"</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp">......</span></span><br></pre></td></tr></table></figure><p>点击更新后此时console将会多出以下内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组件将要更新</span><br><span class="line">渲染函数</span><br><span class="line">组件更新完毕</span><br></pre></td></tr></table></figure><p>在complife之后增加parent class尝试Unmount函数</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            isshow:<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.remove&#125;&gt; remove complif组件 &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;complife /</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    remove=()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">        this.setState(&#123;</span></span><br><span class="line"><span class="regexp">            isshow:false;</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">    &lt;Parent /</span>&gt;,</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>此时点击button后会增加一条console</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组件卸载</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React-复习&quot;&gt;React 复习&lt;/h2&gt;
&lt;h3 id=&quot;生命周期&quot;&gt;生命周期&lt;/h3&gt;
&lt;p&gt;生命周期就是组件从实例化到渲染再到最终从页面中销毁，整个过程就是生命周期。在生命周期中，有很多可以调用的事件，也称为hook/钩子函数。&lt;/p&gt;
&lt;h3 id=&quot;生命周期三个状态&quot;&gt;生命周期三个状态&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mounting : 将组件插入DOM中&lt;/li&gt;
&lt;li&gt;Updating : 将组件更新到DOM中&lt;/li&gt;
&lt;li&gt;Unmounting : 将组件移出DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;钩子函数（方法，事件）&quot;&gt;钩子函数（方法，事件）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;componentWillMount(): 组件将要渲染,AJAX,添加动画前的类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;componentDidMount(): 组件渲染完毕，添加动画&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;componentWillReceiveProps(): 组件将要接受props数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shouldComponentUpdate(): 组件接收到新的props/state时判断是否更新，返回boolean值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;componentWillUpdate(): 组件将要更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;componentDidUpdate(): 组件更新完毕&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;compnentWillUnmount(): 组件将要卸载&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端框架" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="React" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/React/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="React" scheme="WangHngLeee.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 91 💪</title>
    <link href="WangHngLeee.github.io/2020/05/16/code01/"/>
    <id>WangHngLeee.github.io/2020/05/16/code01/</id>
    <published>2020-05-16T15:16:38.000Z</published>
    <updated>2020-05-16T23:15:14.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-289-Game-of-Life-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">289. Game of Life</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/game-of-life/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dir =&#123;&#123;<span class="number">1</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gameOfLife</span><span class="params">(<span class="keyword">int</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;board.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;board[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> live=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span>[] d:dir)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(d[<span class="number">0</span>]+i&lt;<span class="number">0</span> || d[<span class="number">0</span>]+i&gt;=board.length || d[<span class="number">1</span>]+j&lt;<span class="number">0</span> || d[<span class="number">1</span>]+j&gt;=board[<span class="number">0</span>].length) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(board[d[<span class="number">0</span>]+i][d[<span class="number">1</span>]+j]==<span class="number">1</span> || board[d[<span class="number">0</span>]+i][d[<span class="number">1</span>]+j]==<span class="number">2</span>) live++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==<span class="number">0</span> &amp;&amp; live==<span class="number">3</span>) board[i][j]=<span class="number">3</span>;<span class="comment">// dead to live</span></span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==<span class="number">1</span> &amp;&amp; (live&lt;<span class="number">2</span> || live&gt;<span class="number">3</span>)) board[i][j]=<span class="number">2</span>; <span class="comment">// live to dead</span></span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==<span class="number">1</span> &amp;&amp; (live ==<span class="number">2</span> || live ==<span class="number">3</span>))board[i][j]=<span class="number">1</span>; <span class="comment">// continue live;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;board.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;board[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">                board[i][j]%=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First we loop the whole board , find total lives for each cell in 8 directions. Then we check different situation according to the question descriptoin. I use three different state to save the state:</p><ul><li>1 means keep living</li><li>2 means live to dead*</li><li>3 means dead to live.</li></ul><p>Finally we just use the number to %2 to get the final result.</p><a id="more"></a><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1249-Minimum-Remove-to-Make-Valid-Parentheses-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1249. Minimum Remove to Make Valid Parentheses</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minRemoveToMakeValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] check = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()];</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;s.length() ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">'('</span>)stack.push(i); <span class="comment">// add idnex of ( to stack</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.isEmpty())&#123; <span class="comment">// stack not empty then add index of ) to stack</span></span><br><span class="line">                    check[i] = <span class="keyword">true</span>;</span><br><span class="line">                    check[stack.pop()] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                check[i] = <span class="keyword">true</span>; <span class="comment">// any character in s should be true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; check.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check[i])&#123;</span><br><span class="line">                res.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First we add index of open / close parenthes to stack. Then we check for pair. If there is a pair of them we change the index of these in check to be true. All other chars should be true in check array except for ( and ). Finally we loop the check array to form the final res string.</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-415-Add-Strings-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">415. Add Strings</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/add-strings/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addStrings</span><span class="params">(String num1, String num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = num1.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len2 = num2.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(len1 &gt;=<span class="number">0</span> || len2 &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> n1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> n2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(len1 &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                n1  = num1.charAt(len1)-<span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(len2&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                n2 = num2.charAt(len2)-<span class="string">'0'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> sum = n1 + n2 + carry;</span><br><span class="line">            carry = sum/<span class="number">10</span>;</span><br><span class="line">            sb.append(sum%<span class="number">10</span>);</span><br><span class="line">            len1--;</span><br><span class="line">            len2--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry!=<span class="number">0</span>)&#123;</span><br><span class="line">            sb.append(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Normal solution. Using carry and sum/10 and sum%10. Remeber to reverse the ans in the final.</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-953-Verifying-an-Alien-Dictionary-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">953. Verifying an Alien Dictionary</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/verifying-an-alien-dictionary/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dict = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAlienSorted</span><span class="params">(String[] words, String order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;order.length() ;i++)&#123;</span><br><span class="line">            dict[order.charAt(i)-<span class="string">'a'</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ;j&lt;words.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(checkbig(words[j-<span class="number">1</span>],words[j]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkbig</span><span class="params">(String word1, String word2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = word1.length();</span><br><span class="line">        <span class="keyword">int</span> b = word2.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;a &amp;&amp; i&lt;b;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(word1.charAt(i) != word2.charAt(i))&#123;</span><br><span class="line">                <span class="keyword">if</span>(dict[word1.charAt(i)-<span class="string">'a'</span>] &lt; dict[word2.charAt(i)-<span class="string">'a'</span>])<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(dict[word1.charAt(i)-<span class="string">'a'</span>] &gt; dict[word2.charAt(i)-<span class="string">'a'</span>])<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> word1.length() &gt; word2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First we use int[26] to store the new order of letters. Then we use it as a new dictionary to compare.</p><p>After we make it, we loop the given string array, then check them one by one.</p><p>Make a new function checkbig to check whether the later word is bigger than the former. If yes then return false. Otherwise we continue.<br>In the checkbig function, we check the value of each char in the dictionary. If word1’s char is little than the word2 then we return true. So back to the main function it will return false.</p><p>In final we also need check the length of them. eg ( ‘word’, ‘wordl’).</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-339-Nested-List-Weight-Sum-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">339. Nested List Weight Sum</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/nested-list-weight-sum/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> * <span class="comment">// This is the interface that allows for creating nested lists.</span></span><br><span class="line"> * <span class="comment">// You should not implement it, or speculate about its implementation</span></span><br><span class="line"> * <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NestedInteger</span> </span>&#123;</span><br><span class="line"> *     <span class="comment">// Constructor initializes an empty nested list.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="title">NestedInteger</span><span class="params">()</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// Constructor initializes a single integer.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="title">NestedInteger</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// @return true if this NestedInteger holds a single integer, rather than a nested list.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInteger</span><span class="params">()</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// @return the single integer that this NestedInteger holds, if it holds a single integer</span></span><br><span class="line"> *     <span class="comment">// Return null if this NestedInteger holds a nested list</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> Integer <span class="title">getInteger</span><span class="params">()</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// Set this NestedInteger to hold a single integer.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInteger</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// Set this NestedInteger to hold a nested list and adds a nested integer to it.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(NestedInteger ni)</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// @return the nested list that this NestedInteger holds, if it holds a nested list</span></span><br><span class="line"> *     <span class="comment">// Return null if this NestedInteger holds a single integer</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> List&lt;NestedInteger&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depthSum</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nestedList == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">1</span>;</span><br><span class="line">        Queue&lt;NestedInteger&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(NestedInteger ni : nestedList)&#123;</span><br><span class="line">            queue.add(ni);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;size ;i++)&#123;</span><br><span class="line">                NestedInteger temp = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(temp.isInteger())sum+=temp.getInteger()*level;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(NestedInteger n : temp.getList())&#123;</span><br><span class="line">                        queue.add(n);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            level++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using BFS to loop the whole array like a binary tree. In the queue loop, we only need to check whether current is an integer or a nestedarray. If is an integer, we add its value * level to the sum. After each level loop, we increase level by 1.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,[4,[6]]]</span><br><span class="line">Output: 27</span><br><span class="line">Explanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4*2 + 6*3 = 27.</span><br></pre></td></tr></table></figure><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-364-Nested-List-Weight-Sum-II-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">364. Nested List Weight Sum II</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/nested-list-weight-sum-ii/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> * <span class="comment">// This is the interface that allows for creating nested lists.</span></span><br><span class="line"> * <span class="comment">// You should not implement it, or speculate about its implementation</span></span><br><span class="line"> * <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NestedInteger</span> </span>&#123;</span><br><span class="line"> *     <span class="comment">// Constructor initializes an empty nested list.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="title">NestedInteger</span><span class="params">()</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// Constructor initializes a single integer.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="title">NestedInteger</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// @return true if this NestedInteger holds a single integer, rather than a nested list.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInteger</span><span class="params">()</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// @return the single integer that this NestedInteger holds, if it holds a single integer</span></span><br><span class="line"> *     <span class="comment">// Return null if this NestedInteger holds a nested list</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> Integer <span class="title">getInteger</span><span class="params">()</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// Set this NestedInteger to hold a single integer.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInteger</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// Set this NestedInteger to hold a nested list and adds a nested integer to it.</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(NestedInteger ni)</span></span>;</span><br><span class="line"> *</span><br><span class="line"> *     <span class="comment">// @return the nested list that this NestedInteger holds, if it holds a nested list</span></span><br><span class="line"> *     <span class="comment">// Return null if this NestedInteger holds a single integer</span></span><br><span class="line"> *     <span class="function"><span class="keyword">public</span> List&lt;NestedInteger&gt; <span class="title">getList</span><span class="params">()</span></span>;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depthSumInverse</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nestedList == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;NestedInteger&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(NestedInteger ni : nestedList)&#123;</span><br><span class="line">            queue.add(ni);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> prevsum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">int</span> levelsum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; size ;i++)&#123;</span><br><span class="line">                NestedInteger temp = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(temp.isInteger())levelsum+=temp.getInteger();</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(NestedInteger n : temp.getList())&#123;</span><br><span class="line">                        queue.add(n);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            prevsum+=levelsum;</span><br><span class="line">            total+=prevsum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Different to the former question, in this question we have to loop from the leaf. So we have to keep a prevsum to keep track of.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,[4,[6]]]</span><br><span class="line">Output: 17</span><br><span class="line">Explanation: One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 1*3 + 4*2 + 6*1 = 17.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-289-Game-of-Life-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;289. Game of Life&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/game-of-life/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dir =&amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;,&amp;#123;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;,&amp;#123;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gameOfLife&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] board)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;board.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; live=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] d:dir)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]+i&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]+i&amp;gt;=board.length || d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+j&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+j&amp;gt;=board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]+i][d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+j]==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || board[d[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]+i][d[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+j]==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) live++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j]==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; live==&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) board[i][j]=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// dead to live&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j]==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; (live&amp;lt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; || live&amp;gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) board[i][j]=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// live to dead&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(board[i][j]==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; (live ==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; || live ==&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))board[i][j]=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// continue live;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;board.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;board[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                board[i][j]%=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;First we loop the whole board , find total lives for each cell in 8 directions. Then we check different situation according to the question descriptoin. I use three different state to save the state:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 means keep living&lt;/li&gt;
&lt;li&gt;2 means live to dead*&lt;/li&gt;
&lt;li&gt;3 means dead to live.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally we just use the number to %2 to get the final result.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Interview Note 5 💪</title>
    <link href="WangHngLeee.github.io/2020/04/26/front-end-interview2/"/>
    <id>WangHngLeee.github.io/2020/04/26/front-end-interview2/</id>
    <published>2020-04-26T18:28:27.000Z</published>
    <updated>2020-05-19T15:45:43.592Z</updated>
    
    <content type="html"><![CDATA[<h1>HTML</h1><h2 id="DOCTYPE-作用">&lt;!DOCTYPE&gt;作用</h2><p>一般在html文档第一行声明。用来告知浏览器用什么文档解析标准来解析当前文档。解析模式分为标准模式和兼容模式。</p><h2 id="标准模式-兼容模式">标准模式 &amp;&amp; 兼容模式</h2><ul><li>标准模式：标准模式的渲染方式和 JS 引擎的解析方式都是以该浏览器支持的最高标准运行。</li><li>兼容模式：页面以宽松的向后兼容的方式显示，模拟老式浏览器的行为以防止站点无法工作。</li></ul><h2 id="link-和-import区别">link 和 @import区别</h2><ul><li>从属关系：link是基于html的语法，而@import是基于css的，css2.1之后才出现。</li><li>加载顺序：link中的内容可以随页面其他内容一起加载，而@import中引入的css必须等其他全部加载完成后再开始加载。</li><li>兼容性区别：link是基于html的，不存在兼容性问题。@import是css2.1之后才出现的，会存在部分IE5+之前的浏览器在不兼容的问题。</li><li>DOM可操作性： 可以通过JS操作DOM改变link中的内容来改变样式；而DOM是基于文档的，无法使用@import来改变。</li></ul><h2 id="浏览器渲染原理">浏览器渲染原理</h2><ol><li>首先解析收到HTML的文件，构造DOM树。</li><li>对CSS文件进行解析，构造CSSOM规则树。</li><li>根据DOM和CSSOM规则树构造渲染树。</li><li>当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也叫做回流/重排）.</li><li>布局阶段结束后是绘制阶段（重绘），遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示在屏幕上，绘制使用 UI 基础组件。</li></ol><h2 id="async-和-defer-的作用和区别">async 和 defer 的作用和区别</h2><ol><li>如果script中没有async和defer，则浏览器会自动加载和执行指定对脚本文件，并暂停其他资源的加载和执行，知道script中的资源加载执行完毕。</li><li><strong>defer</strong>：表示延迟执行引入的JS。JS加载时 HTML 并未停止解析，这两个过程是并行的。当整个 document 解析完毕后再执行脚本文件，在 DOMContentLoaded 事件触发之前完成。多个脚本按顺序执行。</li><li><strong>async</strong>：表示异步执行引入JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行，也就是说它的执行仍然会阻塞文档的解析，只是它的加载过程不会阻塞。多个脚本的执行顺序无法保证。</li></ol><img src="https://segmentfault.com/img/bVWhRl?w=801&h=814"><h2 id="DOMContentLoaded-事件和-Load-事件的区别">DOMContentLoaded 事件和 Load 事件的区别</h2><p>DOMContentLoaded在HTML文件全部加载完成后触发，并不需要等待css样式、图片图表等文件的加载。</p><p>Load必须等到所有文件全部加载完成后才会触发。</p><h2 id="HTML离线缓存">HTML离线缓存</h2><p>原理：HTML5 的离线存储是基于一个新建的 .appcache 文件的缓存机制（不是存储技术），通过这个文件上的解析清单离线存储资源，这些资源就会像 cookie 一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p><p>在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问 app ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过 app 并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</p><p>离线的情况下，浏览器就直接使用离线存储的资源。</p><h2 id="attibute和property区别">attibute和property区别</h2><p>attribute 是 dom 元素在文档中作为 html 标签拥有的属性；<br>property 就是 dom 元素在 js 中作为对象拥有的属性。</p><p>对于 html 的标准属性来说，attribute 和 property 是同步的，是会自动更新的，但是对于自定义的属性来说，他们是不同步的。</p><h1>CSS</h1><h2 id></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;HTML&lt;/h1&gt;
&lt;h2 id=&quot;DOCTYPE-作用&quot;&gt;&amp;lt;!DOCTYPE&amp;gt;作用&lt;/h2&gt;
&lt;p&gt;一般在html文档第一行声明。用来告知浏览器用什么文档解析标准来解析当前文档。解析模式分为标准模式和兼容模式。&lt;/p&gt;
&lt;h2 id=&quot;标准模式-兼容模式&quot;&gt;
      
    
    </summary>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/Interview/"/>
    
      <category term="HTML" scheme="WangHngLeee.github.io/categories/Interview/HTML/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Interview Note 4 💪</title>
    <link href="WangHngLeee.github.io/2020/04/26/frontend-interview-note/"/>
    <id>WangHngLeee.github.io/2020/04/26/frontend-interview-note/</id>
    <published>2020-04-26T18:28:27.000Z</published>
    <updated>2020-05-19T15:45:59.415Z</updated>
    
    <content type="html"><![CDATA[<h1>CSS</h1><h2 id="before-和-after中单引号和双引号的区别">::before 和:after中单引号和双引号的区别</h2><p>单冒号(:)用于css伪类，双冒号(::)用于css伪元素。有些浏览器考虑到兼容问题，部分情况下也可以用单引号(:)表示伪元素。</p><p>伪类(😃：一般匹配的是元素的某些特定状态，例如:hover, :link</p><ul><li>伪类用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的<br>元素时，我们可以通过 :hover 来描述这个元素的状态。</li></ul><p>伪元素(:😃：一般匹配的是特殊位置，比如::before ::after等。</p><ul><li>伪元素用于创建一些不在文档树中的元素，并为其添加样式。它们允许我们为元素的某些部分设置样式。比如说，我们可以通过 ::be<br>fore 来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</li></ul><a id="more"></a><h2 id="居中问题">居中问题</h2><h3 id="1-水平居中">1.水平居中</h3><ol><li>为div设置宽度，让margin为0 auto。</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用text-align实现</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:black;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:pink;<span class="comment">/*和black区分开更清楚*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-水平垂直居中">2.水平垂直居中</h3><ol><li>容器高宽值给定时,margin设为自身宽高一半</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先将div左上角移到屏幕中心，再设置margin为自身size的一半。</p><ol start="2"><li>容器宽高未知时，使用transform方法。</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;<span class="comment">/* 相对定位或绝对定位均可 */</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用flex布局</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:red;<span class="comment">/*看效果*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="position中，不同的值其定位原点各是什么？-relative-absolute-static-fixed-inherit">position中，不同的值其定位原点各是什么？(relative,absolute,static,fixed,inherit)</h2><ul><li><p>absolute:<br>生成绝对定位的元素，相对于值不为 static 的第一个父元素的 padding box 进行定位，也可以理解为离自己这一级元素最近的<br>一级 position 设置为 absolute 或者 relative 的父元素的 padding box 的左上角为原点的。</p></li><li><p>fixed :生成绝对定位的元素，相对于浏览器窗口进行定位。</p></li><li><p>relative: 生成相对定位的元素，相对于其元素本身所在正常位置进行定位。</p></li><li><p>static: 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right, z-index 声明）。</p></li><li><p>inherit: 规定从父元素继承 position 属性的值。</p></li></ul><h2 id="li-与-li-之间有看不见的空白间隔问题-解决方法">li 与 li 之间有看不见的空白间隔问题 &amp;&amp; 解决方法</h2><p>浏览器在渲染inline行内元素的时候，为了美观会将元素间的空白字符渲染成换空格。而我们在写li的时候为了美观会将li放在单独一行，所以li换行后会产生换行符。</p><ul><li>为li设置 float: left。</li><li>将所有 li 写在同一行。</li><li>将 ul 内的font-size设为0。</li><li>消除 ul 的字符间隔 ，设置letter-spacing: -8px，</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;CSS&lt;/h1&gt;
&lt;h2 id=&quot;before-和-after中单引号和双引号的区别&quot;&gt;::before 和:after中单引号和双引号的区别&lt;/h2&gt;
&lt;p&gt;单冒号(:)用于css伪类，双冒号(::)用于css伪元素。有些浏览器考虑到兼容问题，部分情况下也可以用单引号(:)表示伪元素。&lt;/p&gt;
&lt;p&gt;伪类(😃：一般匹配的是元素的某些特定状态，例如:hover, :link&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;伪类用于当已有的元素处于某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的&lt;br&gt;
元素时，我们可以通过 :hover 来描述这个元素的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;伪元素(:😃：一般匹配的是特殊位置，比如::before ::after等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;伪元素用于创建一些不在文档树中的元素，并为其添加样式。它们允许我们为元素的某些部分设置样式。比如说，我们可以通过 ::be&lt;br&gt;
fore 来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/Interview/"/>
    
      <category term="CSS" scheme="WangHngLeee.github.io/categories/Interview/CSS/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
  </entry>
  
  <entry>
    <title>📖 Vue学习笔记(3)</title>
    <link href="WangHngLeee.github.io/2020/04/13/vue3/"/>
    <id>WangHngLeee.github.io/2020/04/13/vue3/</id>
    <published>2020-04-13T17:15:41.000Z</published>
    <updated>2020-04-27T00:06:07.125Z</updated>
    
    <content type="html"><![CDATA[<h1>vue v-model 和 数据双向绑定</h1><h2 id="v-model">v-model</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span> &#123;&#123; msg &#125;&#125; <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">v-bind:value</span> = <span class="string">"msg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">v-model</span> = <span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            msg: <span class="string">'This is new data '</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码很清楚的展示了v-bind 单向数据绑定和 v-model 双向数据绑定的区别。<br><br>第一个input框内的文字只会和h4内同步一次，当对input做出改变时，h4内容不会随之改变。<br><br>相反，使用了v-model的input发生改变时，h4显示的内容会随之一起改变。</p><p>待更新</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;vue v-model 和 数据双向绑定&lt;/h1&gt;
&lt;h2 id=&quot;v-model&quot;&gt;v-model&lt;/h2&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="前端框架" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/"/>
    
    
      <category term="Vue" scheme="WangHngLeee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>📖 前端问题杂烩-Vue篇(1)</title>
    <link href="WangHngLeee.github.io/2020/04/08/front-end-interview-vue/"/>
    <id>WangHngLeee.github.io/2020/04/08/front-end-interview-vue/</id>
    <published>2020-04-08T18:15:41.000Z</published>
    <updated>2020-05-19T15:45:47.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="讲一讲MVVM？（⭐️⭐️⭐️⭐️）">讲一讲MVVM？（⭐️⭐️⭐️⭐️）</h3><p>MVVM是Model-View-ViewModel的缩写，也就是把后端概念里MVC的controller换成了viewmodel。<br></p><p>Model层代表数据模型，View代表UI组件，ViewModel是View和Model层的桥梁，数据会绑定到viewModel层并自动将数据渲染到页面中，视图变化的时候会通知viewModel层更新数据。</p><h3 id="讲一下Vue2-x响应式数据的原理（⭐️⭐️⭐️）">讲一下Vue2.x响应式数据的原理（⭐️⭐️⭐️）</h3><p>Vue在初始化数据时，会使用Object.defineProperty重新定义data中的所有属性。当页面使用对应属性时，首先会进行依赖收集(收集当前组件的watcher)，如果属性发生变化会通知相关依赖进行更新操作(发布订阅)。</p><a id="more"></a><h3 id="讲一下Vue3-x响应式数据原理（⭐️⭐️⭐️⭐️）">讲一下Vue3.x响应式数据原理（⭐️⭐️⭐️⭐️）</h3><p>Vue3.x改用Proxy替代Object.defineProperty。因为Proxy可以直接监听对象和数组的变化，并且有多达13种拦截方法。并且作为新标准将受到浏览器厂商重点持续的性能优化。</p><h3 id="Proxy只会代理对象的第一层，那么Vue3又是怎样处理这个问题的呢？（⭐️⭐️⭐️）">Proxy只会代理对象的第一层，那么Vue3又是怎样处理这个问题的呢？（⭐️⭐️⭐️）</h3><p>判断当前Reflect.get的返回值是否为Object。如果是则再通过reactive方法做代理，这样就实现了深度观测。</p><h3 id="监测数组的时候可能触发多次get-set，如何防止触发多次呢？（⭐️⭐️⭐️）">监测数组的时候可能触发多次get/set，如何防止触发多次呢？（⭐️⭐️⭐️）</h3><p>可以通过判断key是否为当前被代理对象target自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行trigger。</p><h3 id="vue2-x中如何监测数组变化（⭐️⭐️）">vue2.x中如何监测数组变化（⭐️⭐️）</h3><p>使用了函数劫持的方式，重写了数组的方法，Vue将data中的数组进行了原型链重写，指向了自己定义的数组原型方法。这样当调用数组api时，可以通知依赖更新。如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。<br><br>（这里要多看vue源码和js原型链的概念。)</p><h3 id="nextTick是什么？它的实现原理？（⭐️⭐️）">nextTick是什么？它的实现原理？（⭐️⭐️）</h3><p>在下次 DOM 更新循环结束之后执行延迟回调。nextTick主要使用了宏任务和微任务。根据执行环境分别尝试采用</p><ul><li>Promise</li><li>MutationObserver</li><li>setImmediate</li></ul><p>如果以上都不行则采用setTimeout<br>定义了一个异步方法，多次调用nextTick会将方法存入队列中，通过这个异步方法清空当前队列。</p><p>(其实问框架最终还是考验原生JavaScript的功底)</p><h3 id="Vue的生命周期（⭐️⭐️⭐️⭐️⭐️）">Vue的生命周期（⭐️⭐️⭐️⭐️⭐️）</h3><p>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载DOM、渲染➡️更新➡️渲染、销毁等一系列过程，这就是Vue生命周期的定义。通俗讲就是Vue实例从创建到销毁到全过程。</p><p><strong>beforeCreate</strong>：是new Vue()之后触发的第一个钩子，在当前阶段data、methods、computed以及watch上的数据和方法都不能被访问。</p><p><strong>created</strong>：在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发updated函数。可以做一些初始数据的获取，在当前阶段无法与Dom进行交互，如果非要想，可以通过vm.$nextTick来访问Dom。</p><p><strong>beforeMount</strong>：  发生在挂载之前，在这之前template模板已导入渲染函数编译。而当前阶段虚拟Dom已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发updated。</p><p><strong>mounted</strong>： 在挂载完成后发生，在当前阶段，真实的Dom挂载完毕，数据完成双向绑定，可以访问到Dom节点，使用$refs属性对Dom进行操作。</p><p><strong>beforeUpdate</strong>： 发生在更新之前，也就是响应式数据发生更新，虚拟dom重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。</p><p><strong>updated</strong>： 发生在更新完成之后，当前阶段组件Dom已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。</p><p><strong>beforeDestroy</strong>： 发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。</p><p><strong>destroyed</strong>： 发生在实例销毁之后，这个时候只剩下了dom空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;讲一讲MVVM？（⭐️⭐️⭐️⭐️）&quot;&gt;讲一讲MVVM？（⭐️⭐️⭐️⭐️）&lt;/h3&gt;
&lt;p&gt;MVVM是Model-View-ViewModel的缩写，也就是把后端概念里MVC的controller换成了viewmodel。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Model层代表数据模型，View代表UI组件，ViewModel是View和Model层的桥梁，数据会绑定到viewModel层并自动将数据渲染到页面中，视图变化的时候会通知viewModel层更新数据。&lt;/p&gt;
&lt;h3 id=&quot;讲一下Vue2-x响应式数据的原理（⭐️⭐️⭐️）&quot;&gt;讲一下Vue2.x响应式数据的原理（⭐️⭐️⭐️）&lt;/h3&gt;
&lt;p&gt;Vue在初始化数据时，会使用Object.defineProperty重新定义data中的所有属性。当页面使用对应属性时，首先会进行依赖收集(收集当前组件的watcher)，如果属性发生变化会通知相关依赖进行更新操作(发布订阅)。&lt;/p&gt;
    
    </summary>
    
      <category term="前端框架" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/"/>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Interview/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
      <category term="Vue" scheme="WangHngLeee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>📖 Vue学习笔记(2)</title>
    <link href="WangHngLeee.github.io/2020/04/05/vue2/"/>
    <id>WangHngLeee.github.io/2020/04/05/vue2/</id>
    <published>2020-04-05T13:15:41.000Z</published>
    <updated>2020-04-05T14:29:12.774Z</updated>
    
    <content type="html"><![CDATA[<h1>vue指令–事件修饰符</h1><h2 id="stop阻止冒泡">.stop阻止冒泡</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span> = <span class="string">"divclicker"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'clickme'</span> @<span class="attr">click.stop</span> =<span class="string">"btnclicker"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                divclicker()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'div clicked'</span>)</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                btnclicker()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'btn clicked'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">btn clicked</span><br></pre></td></tr></table></figure><p>stop让冒泡停在了btn这个地方，不会继续向上延伸到div父类。<br><br>如果没有stop阻止冒泡的话，正常冒泡行为输出应该为：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">btn clicked</span><br><span class="line">div clicked</span><br></pre></td></tr></table></figure><ul><li>xxx.stop: 自身修饰符,可以阻止冒泡行为。</li></ul><a id="more"></a><h2 id="prevent-阻止默认事件">.prevent 阻止默认事件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://google.com"</span> @<span class="attr">click.prevent</span>=<span class="string">"linkclicked"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                linkclicked()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'link clicked'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码最终将会console出‘link clicked’的结果但是并不会跳转，因为prevent阻止了跳转的默认行为。<br></p><ul><li>.prevent: 可以阻止默认的js行为。</li></ul><h2 id="capture-捕获行为">.capture 捕获行为</h2><p>利用之前.stop中的代码来看：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span> = <span class="string">"divclicker"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'clickme'</span> @<span class="attr">click</span> =<span class="string">"btnclicker"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                divclicker()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'div clicked'</span>)</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                btnclicker()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'btn clicked'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时控制台输出的顺序则将会是</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div clicked</span><br><span class="line">btn clicked</span><br></pre></td></tr></table></figure><p>capture改变了web的默认冒泡行为，变成了捕获行为。<br></p><ul><li>冒泡：渲染之后，当用户产生交互时，先从父节点向下寻找触发行为的component，然后由下至上冒泡地依次触发sub父类。</li><li>捕获：与冒泡相反，直接由上到下触发。</li></ul><h2 id="self-自身触发">.self 自身触发</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.self</span> = <span class="string">"divclicker"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'clickme'</span> @<span class="attr">click</span> =<span class="string">"btnclicker"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                divclicker()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'div clicked'</span>)</span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                btnclicker()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'btn clicked'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时只点击button时控制台只会输出：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">btn clicked</span><br></pre></td></tr></table></figure><p>并没有div的消息出现，这是因为self定义了只有点击该元素本身的时候才会触发行为。所以当点击div范围内的空白处时会输出‘div clicked’.</p><h2 id="once-只执行一次">.once 只执行一次</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://google.com"</span> @<span class="attr">click.prevent.self</span> =<span class="string">"linkclicked"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;&#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                linkclicked()&#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'link clicked'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码只会阻止该a标签跳转一次，点击第二次则会正常跳转，因为self限制了prevent只起作用一次。</p><ul><li>事件修饰符可以串联。</li><li>once只触发一次，且只有一次有效。</li></ul><h2 id="stop-和-self-阻止冒泡的原理区别">.stop 和 .self 阻止冒泡的原理区别</h2><p>.stop 和 .self 都可以产生阻止冒泡的行为发生，但是二者原理不同。<br></p><ul><li>.stop 阻止了该元素之上的所有父元素的冒泡行为</li><li>.self 只阻止了自身的冒泡行为。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// self机制</span><br><span class="line">div1</span><br><span class="line">    div2</span><br><span class="line">        div3 @click.self</span><br><span class="line">            btn @click</span><br></pre></td></tr></table></figure><p>点击btn后，除了div3不会冒泡，btn，div1和div2均会正常冒泡。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// stop机制</span><br><span class="line">div1</span><br><span class="line">    div2</span><br><span class="line">        div3 @click.stop</span><br><span class="line">            btn @click</span><br></pre></td></tr></table></figure><p>此时点击btn，只有btn和div3会冒泡，而div1和div2均不会冒泡。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;vue指令–事件修饰符&lt;/h1&gt;
&lt;h2 id=&quot;stop阻止冒泡&quot;&gt;.stop阻止冒泡&lt;/h2&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; @&lt;span class=&quot;attr&quot;&gt;click&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;divclicker&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;button&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;clickme&#39;&lt;/span&gt; @&lt;span class=&quot;attr&quot;&gt;click.stop&lt;/span&gt; =&lt;span class=&quot;string&quot;&gt;&quot;btnclicker&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vm = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vue(&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;            el:&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            data:&amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            methods:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                divclicker()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;div clicked&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                btnclicker()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;btn clicked&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;btn clicked&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;stop让冒泡停在了btn这个地方，不会继续向上延伸到div父类。&lt;br&gt;&lt;br&gt;
如果没有stop阻止冒泡的话，正常冒泡行为输出应该为：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;btn clicked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;div clicked&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;xxx.stop: 自身修饰符,可以阻止冒泡行为。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端框架" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/"/>
    
    
      <category term="Vue" scheme="WangHngLeee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>📖 Vue学习笔记(1)</title>
    <link href="WangHngLeee.github.io/2020/04/04/vue1/"/>
    <id>WangHngLeee.github.io/2020/04/04/vue1/</id>
    <published>2020-04-04T17:23:41.000Z</published>
    <updated>2020-04-05T14:29:14.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC-MVVM">MVC &amp; MVVM</h2><h4 id="MVC">MVC</h4><ul><li>MVC是后端中的分层概念。M-Model，V-View，C-Controller。</li></ul><h4 id="MVVM">MVVM</h4><ul><li>MVVC只是针对前端分层。M-Model，V-View，VM-View Model。其中M和V要通过VM来进行数据链接。</li></ul><h2 id="Vue基本代码">Vue基本代码</h2><p>分两大部分。html和js。</p><h4 id="html部分">html部分</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">//js中new的vue实例将会控制该div中的所有元素。</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="js部分">js部分</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建新的vue实例</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>, <span class="comment">// 选择控制某个div</span></span><br><span class="line">    data:&#123;</span><br><span class="line">        title:<span class="string">'test'</span><span class="comment">//存放data</span></span><br><span class="line">    &#125;,</span><br><span class="line">    method:&#123;</span><br><span class="line">        func1()&#123;</span><br><span class="line">            <span class="comment">// 实现函数内容</span></span><br><span class="line">        &#125;,</span><br><span class="line">        func2()&#123;</span><br><span class="line">            <span class="comment">//实现函数内容</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>不难看出，html中的部分是V-view，js中的部分是VM-ViewModel，负责数据链接，另外model部分也在js中，具体是data体现了model的功能。</li><li>vue中不需要用data.title来引用，直接用即可。</li></ul><a id="more"></a><h2 id="v-cloak-v-text-v-html">v-cloak / v-text / v-html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>aaa &#123;&#123; msg &#125;&#125; aaa<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">"msg1"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">"msg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            msg1:<span class="string">'test'</span>，</span></span><br><span class="line"><span class="xml">            msg2:'<span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is h1 text<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用v-cloak能够解决插值表达式在网速不稳定下文本的闪烁问题。</li><li>v-text能够覆盖原本的文本，而v-cloak只会替代本身的占字符。</li><li>v-html可以自动识别html文本语句并转成html渲染。</li></ul><h2 id="v-bind-属性绑定">v-bind 属性绑定</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"btn"</span> <span class="attr">v-bind:title</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            title:<span class="string">'this is title'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-bind会将目标target绑定到该元素上，如果不用v-bind则会显示title字样而不是data中自定义的title值。</li><li>另外由于v-bind:是js语法，所以后面可以跟自定义的lambda，例如v-bind:title=“title + ‘123’”.</li><li>v-bind:也可以直接简写为:</li></ul><h2 id="v-on-事件绑定">v-on 事件绑定</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"btn"</span> <span class="attr">v-on:click</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            title:<span class="string">'this is title'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            alert:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'test'</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>v-on用于事件绑定。后面一般跟自己定义的函数。类似js中的onclick.</li><li>可以简写为@click，@mouseover。。。</li><li>js中定义methods时，有两种写法，一种是function，一种是函数名直接跟().</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods&#123;</span><br><span class="line">    alert()&#123;</span><br><span class="line">        alert(<span class="string">'test'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    alert1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'test1'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="demo1-跑马灯文字循环">demo1 : 跑马灯文字循环</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'开始'</span> @<span class="attr">click</span>=<span class="string">"begin"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span> <span class="attr">value</span>=<span class="string">'停止'</span> @<span class="attr">click</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            msg:<span class="string">'测试跑马灯文字流！测试！'</span>，</span></span><br><span class="line"><span class="javascript">            intervalId:<span class="literal">null</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:</span><br><span class="line">            begin()&#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(intervalId != <span class="literal">null</span>)<span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.intervalId = setInterval( <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 保证能够自动刷新加入interval</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> start = msg.substring(<span class="number">0</span>,<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> end = msg.substring(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.msg = start + end;<span class="comment">//重新拼接string</span></span></span><br><span class="line">                &#125;,400);</span><br><span class="line">            &#125;,</span><br><span class="line">            stop()&#123;</span><br><span class="line"><span class="javascript">                clearInterval(<span class="keyword">this</span>.intervalId);</span></span><br><span class="line"><span class="javascript">                intervalId = <span class="literal">null</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><ul><li>每次把第一位char移到最后</li><li>为了保证连续滚动，设定interval</li><li>利用intervalId来保证开始和停止按钮正常工作。利用intervalId是否为null来判断之前是否移动过。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MVC-MVVM&quot;&gt;MVC &amp;amp; MVVM&lt;/h2&gt;
&lt;h4 id=&quot;MVC&quot;&gt;MVC&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MVC是后端中的分层概念。M-Model，V-View，C-Controller。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;MVVM&quot;&gt;MVVM&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MVVC只是针对前端分层。M-Model，V-View，VM-View Model。其中M和V要通过VM来进行数据链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Vue基本代码&quot;&gt;Vue基本代码&lt;/h2&gt;
&lt;p&gt;分两大部分。html和js。&lt;/p&gt;
&lt;h4 id=&quot;html部分&quot;&gt;html部分&lt;/h4&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//js中new的vue实例将会控制该div中的所有元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123; title &amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;js部分&quot;&gt;js部分&lt;/h4&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建新的vue实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vm = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    el:&lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 选择控制某个div&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        title:&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//存放data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    method:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        func1()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 实现函数内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        func2()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//实现函数内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;不难看出，html中的部分是V-view，js中的部分是VM-ViewModel，负责数据链接，另外model部分也在js中，具体是data体现了model的功能。&lt;/li&gt;
&lt;li&gt;vue中不需要用data.title来引用，直接用即可。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端框架" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="WangHngLeee.github.io/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/"/>
    
    
      <category term="Vue" scheme="WangHngLeee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 90 💪</title>
    <link href="WangHngLeee.github.io/2020/03/15/chin-up-28/"/>
    <id>WangHngLeee.github.io/2020/03/15/chin-up-28/</id>
    <published>2020-03-15T18:13:23.000Z</published>
    <updated>2020-03-16T01:03:27.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-567-Permutation-in-String-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">567. Permutation in String</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/permutation-in-string/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1 == <span class="keyword">null</span> || s2 == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> len1 = s1.length();</span><br><span class="line">        <span class="keyword">int</span> len2 = s2.length();</span><br><span class="line">        <span class="keyword">if</span>(len1 &gt; len2)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;len1 ;i++)&#123;</span><br><span class="line">            arr[s1.charAt(i) - <span class="string">'a'</span>]++;</span><br><span class="line">            arr[s2.charAt(i) - <span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(allzero(arr))<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = len1; j&lt;len2 ;j++)&#123;</span><br><span class="line">            arr[s2.charAt(j)-<span class="string">'a'</span>]--;</span><br><span class="line">            arr[s2.charAt(j-len1)-<span class="string">'a'</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(allzero(arr))<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allzero</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]!=<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典26大小arr方法。检查各个字母出现的次数。维护一个len1大小的窗口</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-567-Permutation-in-String-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color
      
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="SilidingWindow" scheme="WangHngLeee.github.io/tags/SilidingWindow/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Contest 180 🏆</title>
    <link href="WangHngLeee.github.io/2020/03/15/contest06/"/>
    <id>WangHngLeee.github.io/2020/03/15/contest06/</id>
    <published>2020-03-15T13:02:09.000Z</published>
    <updated>2020-03-16T00:11:01.441Z</updated>
    
    <content type="html"><![CDATA[<p>由于比赛时间延后没赶上，所以这次赛后做的，本次三题。</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-1380-Lucky-Numbers-in-a-Matrix-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">1380. Lucky Numbers in a Matrix</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/lucky-numbers-in-a-matrix/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">luckyNumbers</span> <span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; minvalues = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;matrix.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> min = matrix[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt; matrix[<span class="number">0</span>].length ;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] &lt; min)&#123;</span><br><span class="line">                    min = matrix[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            minvalues.add(min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ; j&lt; matrix[<span class="number">0</span>].length ;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> max = matrix[<span class="number">0</span>][j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span> ; i&lt;matrix.length ;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] &gt; max)&#123;</span><br><span class="line">                    max = matrix[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(minvalues.contains(max))&#123;</span><br><span class="line">                res.add(max);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很直观。行的min同时也是col的max才是lucky number。 所以一个set先存出现过的min值，再扫描col找到所有的max，如果max在set里出现过，则加入res。</p><a id="more"></a><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1381-Design-a-Stack-With-Increment-Operation-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1381. Design a Stack With Increment Operation</font> </td></tr></table></h2><p><a href="https://leetcode.com/problems/design-a-stack-with-increment-operation/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><h3 id="First-Soluiton">First Soluiton</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomStack</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack;</span><br><span class="line">    <span class="keyword">int</span> max;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        max = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack.size() &lt; max)&#123;</span><br><span class="line">            stack.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.size() == <span class="number">0</span> ? -<span class="number">1</span> : stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; temp = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()) temp.push(stack.pop());</span><br><span class="line">        <span class="keyword">while</span>(k!=<span class="number">0</span> &amp;&amp; !temp.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = temp.pop() + val;</span><br><span class="line">            stack.push(cur);</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!temp.isEmpty())</span><br><span class="line">            stack.push(temp.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Simply using extra stack to reverse the original stack, and to add some operations on it.</p><h3 id="Optimized-Soluiton">Optimized Soluiton</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomStack</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; arr;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        size = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.size() &lt; size)&#123;</span><br><span class="line">            arr.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.size() == <span class="number">0</span> ? -<span class="number">1</span> : arr.remove(arr.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k &amp;&amp; i&lt;arr.size() ; i++)&#123;</span><br><span class="line">            arr.set(i,arr.get(i)+val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using extra arr to simulate a stack. Pay attention to the ‘remove’, it can remove the specified index num and return it’s value.</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1382-Balance-a-Binary-Search-Tree-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1382. Balance a Binary Search Tree</font> </td></tr></table></h2><p><a href="https://leetcode.com/problems/balance-a-binary-search-tree/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; sortedarr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">balanceBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        inorder(root);</span><br><span class="line">        <span class="keyword">return</span> buildtree(<span class="number">0</span>,sortedarr.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)<span class="keyword">return</span>;</span><br><span class="line">        inorder(root.left);</span><br><span class="line">        sortedarr.add(root.val);</span><br><span class="line">        inorder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildtree</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = start + ( end - start)/<span class="number">2</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(sortedarr.get(mid));</span><br><span class="line">        root.left = buildtree(start,mid-<span class="number">1</span>);</span><br><span class="line">        root.right = buildtree(mid+<span class="number">1</span>,end);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Classic template : inorder traverse + preorder buildtree.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于比赛时间延后没赶上，所以这次赛后做的，本次三题。&lt;/p&gt;
&lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-1380-Lucky-Numbers-in-a-Matrix-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;1380. Lucky Numbers in a Matrix&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/lucky-numbers-in-a-matrix/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;Integer&amp;gt; &lt;span class=&quot;title&quot;&gt;luckyNumbers&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] matrix)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Integer&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        HashSet&amp;lt;Integer&amp;gt; minvalues = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i&amp;lt;matrix.length ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; min = matrix[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ; j&amp;lt; matrix[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length ;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(matrix[i][j] &amp;lt; min)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    min = matrix[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minvalues.add(min);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; j&amp;lt; matrix[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length ;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; max = matrix[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i =&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ; i&amp;lt;matrix.length ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(matrix[i][j] &amp;gt; max)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    max = matrix[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(minvalues.contains(max))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                res.add(max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很直观。行的min同时也是col的max才是lucky number。 所以一个set先存出现过的min值，再扫描col找到所有的max，如果max在set里出现过，则加入res。&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly Contest" scheme="WangHngLeee.github.io/categories/Weekly-Contest/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Contest" scheme="WangHngLeee.github.io/tags/Contest/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 89 💪</title>
    <link href="WangHngLeee.github.io/2020/03/12/chin-up-27/"/>
    <id>WangHngLeee.github.io/2020/03/12/chin-up-27/</id>
    <published>2020-03-12T15:13:23.000Z</published>
    <updated>2020-05-16T22:28:46.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-28B463-font-color-white-734-Sentence-Similarity-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">734. Sentence Similarity</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/sentence-similarity/" target="_blank" rel="noopener"><font size="4">đQuestion Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areSentencesSimilar</span><span class="params">(String[] words1, String[] words2, List&lt;List&lt;String&gt;&gt; pairs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(words1.length != words2.length)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;String,Set&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(List&lt;String&gt; str : pairs)&#123;</span><br><span class="line">            map.putIfAbsent(str.get(<span class="number">0</span>),<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">            map.putIfAbsent(str.get(<span class="number">1</span>),<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">            map.get(str.get(<span class="number">0</span>)).add(str.get(<span class="number">1</span>));</span><br><span class="line">            map.get(str.get(<span class="number">1</span>)).add(str.get(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; words1.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(words1[i].equals(words2[i]))<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(words1[i]))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(!map.get(words1[i]).contains(words2[i]))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using map to store the key-value of each string in the pairs. Then we loop the word1 and words2, only when two stirng is equal or map contains each other then we can continue to loop. Other wise we return fasle.</p><a id="more"></a><h2 id="table-tr-td-bgcolor-28B463-font-color-white-737-Sentence-Similarity-II-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">737. Sentence Similarity II</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/sentence-similarity-ii/" target="_blank" rel="noopener"><font size="4">đQuestion Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areSentencesSimilarTwo</span><span class="params">(String[] words1, String[] words2, List&lt;List&lt;String&gt;&gt; pairs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(words1.length != words2.length)<span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// corner case</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(List&lt;String&gt; str : pairs)&#123;<span class="comment">// initialize union find hashmap</span></span><br><span class="line">            String parent1 = find(map,str.get(<span class="number">0</span>));</span><br><span class="line">            String parent2 = find(map,str.get(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span>(!parent1.equals(parent2))map.put(parent1,parent2); <span class="comment">// </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; words1.length ;i++)&#123; <span class="comment">// return false if two string are not equal and both of them are not from the same root string</span></span><br><span class="line">            <span class="keyword">if</span>(!words1[i].equals(words2[i]) &amp;&amp; !find(map,words1[i]).equals(find(map,words2[i])))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">(Map&lt;String,String&gt; map, String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(s))map.put(s,s);</span><br><span class="line">        <span class="keyword">return</span> s.equals(map.get(s)) ? s : find(map,map.get(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using Union-Find. Using map to create unionfind graph. First we initialize each string with the root of itself. Then we update the root with parent2 if they are not the same. Then loop the word1, if we meet two string are not equal and are not from the same root string , we return false. Otherwise we continue until we return true in the final.</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-277-Find-the-Celebrity-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">277. Find the Celebrity</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/find-the-celebrity/" target="_blank" rel="noopener"><font size="4">đQuestion Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The knows API is defined in the parent class Relation.</span></span><br><span class="line"><span class="comment">      boolean knows(int a, int b); */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">Relation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCelebrity</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> person = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(knows(person,i))&#123;</span><br><span class="line">                person = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;n ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != person &amp;&amp; (!knows(i,person) || knows(person,i)))<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>we first loop the perosn and change the candidate if the first know the second one. Because we have to make sure that candidate know nobody. Then we for loop again, only when the person is not candidate and he don’t know the candidate or the candidate know the person, we return -1. Other wise we just return the candidate that we found.</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-139-Word-Break-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white"> 139. Word Break </font></td></tr></table></h2><p><a href="https://leetcode.com/problems/word-break/" target="_blank" rel="noopener"><font size="4">đQuestion Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()+<span class="number">1</span>];</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String str : wordDict)&#123;</span><br><span class="line">            set.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j&lt;i ;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j] &amp;&amp; set.contains(s.substring(j,i)))&#123;</span><br><span class="line">                    dp[i] = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dpć´ć°0-ĺ˝ĺindexććsubstringćŻĺŚĺşç°čżă</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-399-Evaluate-Division-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">399. Evaluate Division</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/evaluate-division/" target="_blank" rel="noopener"><font size="4">đQuestion Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span>[] calcEquation(List&lt;List&lt;String&gt;&gt; eq, <span class="keyword">double</span>[] vals, List&lt;List&lt;String&gt;&gt; q) &#123;</span><br><span class="line">        Map&lt;String, Map&lt;String, Double&gt;&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vals.length; i++) &#123;</span><br><span class="line">            m.putIfAbsent(eq.get(i).get(<span class="number">0</span>), <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">            m.putIfAbsent(eq.get(i).get(<span class="number">1</span>), <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">            m.get(eq.get(i).get(<span class="number">0</span>)).put(eq.get(i).get(<span class="number">1</span>), vals[i]);</span><br><span class="line">            m.get(eq.get(i).get(<span class="number">1</span>)).put(eq.get(i).get(<span class="number">0</span>), <span class="number">1</span> / vals[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span>[] r = <span class="keyword">new</span> <span class="keyword">double</span>[q.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q.size(); i++)</span><br><span class="line">            r[i] = dfs(q.get(i).get(<span class="number">0</span>), q.get(i).get(<span class="number">1</span>), <span class="number">1</span>, m, <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">dfs</span><span class="params">(String s, String t, <span class="keyword">double</span> r, Map&lt;String, Map&lt;String, Double&gt;&gt; m, Set&lt;String&gt; seen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!m.containsKey(s) || !seen.add(s)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s.equals(t)) <span class="keyword">return</span> r;</span><br><span class="line">        Map&lt;String, Double&gt; next = m.get(s);</span><br><span class="line">        <span class="keyword">for</span> (String c : next.keySet()) &#123;</span><br><span class="line">            <span class="keyword">double</span> result = dfs(c, t, r * next.get(c), m, seen);</span><br><span class="line">            <span class="keyword">if</span> (result != -<span class="number">1</span>) <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ç°ććŻä¸Şĺ­ćŻĺŻšĺşçĺłçłťĺ­čżmăĺDFSćžqueryéç¸ĺŻšĺşçä¸¤ä¸Şäšé´çĺźă</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-990-Satisfiability-of-Equality-Equations-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">990. Satisfiability of Equality Equations</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/satisfiability-of-equality-equations/" target="_blank" rel="noopener"><font size="4">đQuestion Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] UF = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equationsPossible</span><span class="params">(String[] equations)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(equations.length == <span class="number">0</span> || equations == <span class="keyword">null</span>)<span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// corner case</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            UF[i] = i;<span class="comment">//initialize UF array.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String str : equations)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(<span class="number">1</span>) == <span class="string">'='</span>)&#123;</span><br><span class="line">                UF[find(str.charAt(<span class="number">0</span>)-<span class="string">'a'</span>)] = find(str.charAt(<span class="number">3</span>)-<span class="string">'a'</span>);<span class="comment">// link the two == chars</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String str : equations)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(<span class="number">1</span>) == <span class="string">'!'</span>)&#123; <span class="comment">//check whether two chars in != case have the same root</span></span><br><span class="line">                <span class="keyword">if</span>(UF[find(str.charAt(<span class="number">0</span>)-<span class="string">'a'</span>)] == find(str.charAt(<span class="number">3</span>)-<span class="string">'a'</span>))<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123; <span class="comment">// create find function.</span></span><br><span class="line">        <span class="keyword">if</span>(a != UF[a])UF[a] = find(UF[a]);</span><br><span class="line">        <span class="keyword">return</span> UF[a];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UnionFindăCreate a UF graph to store the first and second char in equations. In ‘==’ case, we update the UF of first char. In ‘!=’ case, if we find that the two char has the same root, then return false.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-734-Sentence-Similarity-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;734. Sentence Similarity&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/sentence-similarity/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;đQuestion Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;areSentencesSimilar&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] words1, String[] words2, List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; pairs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(words1.length != words2.length)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Map&amp;lt;String,Set&amp;lt;String&amp;gt;&amp;gt; map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(List&amp;lt;String&amp;gt; str : pairs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.putIfAbsent(str.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.putIfAbsent(str.get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;),&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(str.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)).add(str.get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.get(str.get(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)).add(str.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; words1.length ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(words1[i].equals(words2[i]))&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!map.containsKey(words1[i]))&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!map.get(words1[i]).contains(words2[i]))&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Using map to store the key-value of each string in the pairs. Then we loop the word1 and words2, only when two stirng is equal or map contains each other then we can continue to loop. Other wise we return fasle.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="DP" scheme="WangHngLeee.github.io/tags/DP/"/>
    
      <category term="Union-Find" scheme="WangHngLeee.github.io/tags/Union-Find/"/>
    
      <category term="DFS" scheme="WangHngLeee.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 88 💪</title>
    <link href="WangHngLeee.github.io/2020/03/10/chin-up-26/"/>
    <id>WangHngLeee.github.io/2020/03/10/chin-up-26/</id>
    <published>2020-03-10T15:13:23.000Z</published>
    <updated>2020-03-13T23:02:39.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-F5B041-font-color-white-304-Range-Sum-Query-2D-Immutable-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">304. Range Sum Query 2D - Immutable</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/range-sum-query-2d-immutable/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumMatrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span>; i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ;j&lt;=n ;j++)&#123;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>] - dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + matrix[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRegion</span><span class="params">(<span class="keyword">int</span> row1, <span class="keyword">int</span> col1, <span class="keyword">int</span> row2, <span class="keyword">int</span> col2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> iMin = Math.min(row1, row2);</span><br><span class="line">        <span class="keyword">int</span> iMax = Math.max(row1, row2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> jMin = Math.min(col1, col2);</span><br><span class="line">        <span class="keyword">int</span> jMax = Math.max(col1, col2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[iMax + <span class="number">1</span>][jMax + <span class="number">1</span>] - dp[iMax + <span class="number">1</span>][jMin] - dp[iMin][jMax + <span class="number">1</span>] + dp[iMin][jMin];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dp存当前位置构成的方形内所有的和，在计算时由于dp[i-1][j-1]加了两次，要减去一次，然后加上当前的值matrix[i][j]。<br>在计算sum的时候，最右下位置的和减去最小行、最小列对应的和值，由于左上的值被减了两次，要加回来一次。<br><img src="https://i.imgur.com/gQ2jkLB.jpg"></p><a id="more"></a><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-221-Maximal-Square-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">221. Maximal Square</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/maximal-square/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j-<span class="number">1</span>], Math.min(dp[i][j-<span class="number">1</span>], dp[i-<span class="number">1</span>][j]))+<span class="number">1</span>;</span><br><span class="line">                    max = Math.max(max,dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max*max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dp[i][j]表示位于右下角(i, j)的正方形的边长长度。<br>如果此单元格的值也是1，则正方形最小长度其上方的值，左侧和对角线左上值中的最小值+1。因为如果一侧短或缺失，则不会形成正方形。</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1277-Count-Square-Submatrices-with-All-One-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1277. Count Square Submatrices with All One</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/count-square-submatrices-with-all-ones/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSquares</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; m ;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;n ;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; j &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        matrix[i][j] = Math.min(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>], Math.min(matrix[i][j-<span class="number">1</span>],matrix[i-<span class="number">1</span>][j]))+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res+=matrix[i][j];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>matrix保存每个位置能够组成正方形的最小边长，其实把所有情况的最小边长加起来就是正方形的个数。</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">309. Best Time to Buy and Sell Stock with Cooldown</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sell = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> prevsell = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> buy = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> prevbuy;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> price : prices)&#123;</span><br><span class="line">            prevbuy = buy;</span><br><span class="line">            buy = Math.max(prevsell - price, prevbuy);</span><br><span class="line">            prevsell = sell;</span><br><span class="line">            sell = Math.max(prevbuy + price, prevsell);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sell;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>buy–目前买完之后最大剩余值，sell–目前卖完最大剩余值，prevbuy–上次操作之后剩余值，prevsell–上次操作之后剩余值。<br>更新buy，要求最大剩余值，所以要和prevsell-price比较。更新sell，要求最大卖出值，所以 prevbuy + price比较。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-F5B041-font-color-white-304-Range-Sum-Query-2D-Immutable-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#F5B041&quot;&gt;&lt;font color=&quot;white&quot;&gt;304. Range Sum Query 2D - Immutable&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/range-sum-query-2d-immutable/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NumMatrix&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] dp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NumMatrix&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[][] matrix)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(matrix == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; || matrix.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m = matrix.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = matrix[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[m+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;=m;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ;j&amp;lt;=n ;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i][j] = dp[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j] + dp[i][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] - dp[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] + matrix[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sumRegion&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; col2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; iMin = Math.min(row1, row2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; iMax = Math.max(row1, row2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; jMin = Math.min(col1, col2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; jMax = Math.max(col1, col2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dp[iMax + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][jMax + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] - dp[iMax + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][jMin] - dp[iMin][jMax + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] + dp[iMin][jMin];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;dp存当前位置构成的方形内所有的和，在计算时由于dp[i-1][j-1]加了两次，要减去一次，然后加上当前的值matrix[i][j]。&lt;br&gt;
在计算sum的时候，最右下位置的和减去最小行、最小列对应的和值，由于左上的值被减了两次，要加回来一次。&lt;br&gt;
&lt;img src=&quot;https://i.imgur.com/gQ2jkLB.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="DP" scheme="WangHngLeee.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Contest 179 🏆</title>
    <link href="WangHngLeee.github.io/2020/03/07/contest05/"/>
    <id>WangHngLeee.github.io/2020/03/07/contest05/</id>
    <published>2020-03-08T04:02:09.000Z</published>
    <updated>2020-03-09T01:31:22.991Z</updated>
    
    <content type="html"><![CDATA[<p>本次三题。</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-1374-Generate-a-String-With-Characters-That-Have-Odd-Counts-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">1374. Generate a String With Characters That Have Odd Counts</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateTheString</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> )<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> k = n-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; k ;i++)&#123;</span><br><span class="line">                sb.append(<span class="string">"a"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">"b"</span>);</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;n ;i++)&#123;</span><br><span class="line">                sb.append(<span class="string">"a"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是判断n的奇偶性，如果奇数全部加a，如果偶数则在最后一位加b就行了。题目描述不清。</p><a id="more"></a><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1375-Bulb-Switcher-III-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1375. Bulb Switcher III</font> </td></tr></table></h2><p><a href="https://leetcode.com/problems/rank-teams-by-votes/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTimesAllBlue</span><span class="params">(<span class="keyword">int</span>[] light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = light.length;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; len; i++)&#123;</span><br><span class="line">            right = Math.max(right,light[i]);</span><br><span class="line">            <span class="keyword">if</span>(right == i+<span class="number">1</span>)res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>维护最右的灯泡编号，如果当前index+1等于最右的灯泡编号，则说明左边全部点亮，res++。因为index反映了点亮了多少灯泡，而灯泡不可能重复，所以在最右编号不变的情况下，如果index+1等于最右编号(编号从1开始所以要+1)，说明左边全部点过，res++。</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-1376-Time-Needed-to-Inform-All-Employees-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">1376. Time Needed to Inform All Employees</font> </td></tr></table></h2><p><a href="https://leetcode.com/problems/time-needed-to-inform-all-employees/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numOfMinutes</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> headID, <span class="keyword">int</span>[] manager, <span class="keyword">int</span>[] informTime)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;manager.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(manager[i]!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!map.containsKey(manager[i]))&#123;</span><br><span class="line">                    map.put(manager[i],<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                &#125;</span><br><span class="line">                map.get(manager[i]).add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(headID);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;size ; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(manager[temp]!=-<span class="number">1</span>)&#123; <span class="comment">// 避开head的位置，从不是head的time开始累加。</span></span><br><span class="line">                    informTime[temp]+=informTime[manager[temp]];</span><br><span class="line">                &#125;</span><br><span class="line">                max = Math.max(max,informTime[temp]);</span><br><span class="line">                <span class="keyword">if</span>(map.get(temp)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> num : map.get(temp))&#123;</span><br><span class="line">                        queue.add(num);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接裸BFS。更新informTime的值，使其成为累计和。最后返回其中的max。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本次三题。&lt;/p&gt;
&lt;h2 id=&quot;table-tr-td-bgcolor-28B463-font-color-white-1374-Generate-a-String-With-Characters-That-Have-Odd-Counts-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#28B463&quot;&gt;&lt;font color=&quot;white&quot;&gt;1374. Generate a String With Characters That Have Odd Counts&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;generateTheString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; )&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StringBuilder sb = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; k ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sb.append(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sb.append(&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sb.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i&amp;lt;n ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sb.append(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sb.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是判断n的奇偶性，如果奇数全部加a，如果偶数则在最后一位加b就行了。题目描述不清。&lt;/p&gt;
    
    </summary>
    
      <category term="Weekly Contest" scheme="WangHngLeee.github.io/categories/Weekly-Contest/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="Contest" scheme="WangHngLeee.github.io/tags/Contest/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 87 💪</title>
    <link href="WangHngLeee.github.io/2020/03/06/chin-up-25/"/>
    <id>WangHngLeee.github.io/2020/03/06/chin-up-25/</id>
    <published>2020-03-06T16:13:23.000Z</published>
    <updated>2020-03-13T20:43:12.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-992-Subarrays-with-K-Different-Integers-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">992. Subarrays with K Different Integers</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/subarrays-with-k-different-integers/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subarraysWithKDistinct</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> help(A,K) - help(A,K-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">help</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span></span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; A.length ;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.getOrDefault(A[j], <span class="number">0</span>) == <span class="number">0</span>) K--;</span><br><span class="line">            map.put(A[j],map.getOrDefault(A[j],<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(K&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                map.put(A[i],map.get(A[i])-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(map.get(A[i]) == <span class="number">0</span>)K++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += j-i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正好有K个 = 最多K个的情况减去最多K-1的情况。</p><a id="more"></a><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-15-3Sum-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">15. 3Sum</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/3sum/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.length ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || i&gt;<span class="number">0</span> &amp;&amp; nums[i] != nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> low = i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> high = nums.length -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> target = <span class="number">0</span> - nums[i];</span><br><span class="line">                <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[low] + nums[high] == target)&#123;</span><br><span class="line">                        res.add(Arrays.asList(nums[low],nums[high],nums[i]));</span><br><span class="line">                        <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[low]==nums[low + <span class="number">1</span>])low++;</span><br><span class="line">                        <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[high ] == nums[high-<span class="number">1</span>])high--;</span><br><span class="line">                        low++;</span><br><span class="line">                        high--;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[low] + nums[high] &lt; target)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[low] == nums[low]+<span class="number">1</span>)low++;</span><br><span class="line">                        low++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[high] == nums[high-<span class="number">1</span>])high--;</span><br><span class="line">                        high--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四遍。two pointers基本思路。注意判断有重复数字的情况。</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-167-Two-Sum-II-Input-array-is-sorted-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">167. Two Sum II - Input array is sorted</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(numbers == <span class="keyword">null</span> || numbers.length&lt;<span class="number">2</span>)<span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = numbers.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = numbers[left] + numbers[right];</span><br><span class="line">            <span class="keyword">if</span>(temp == target)&#123;</span><br><span class="line">                res[<span class="number">0</span>] = left+<span class="number">1</span>;</span><br><span class="line">                res[<span class="number">1</span>] = right+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;target)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>two pointers。注意最后返回index要+1.</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-16-3Sum-Closest-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">16. 3Sum Closest</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/3sum-closest/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> sum = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[nums.length-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> closetsum = sum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;nums.length-<span class="number">2</span> ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || i&gt;<span class="number">0</span> &amp;&amp; nums[i] != nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> left = i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> right = nums.length -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    sum = nums[i] + nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum &lt; target)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left+<span class="number">1</span>])left++;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; target)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right-<span class="number">1</span>])right--;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> sum;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(Math.abs(target - closetsum) &gt; Math.abs(target-sum))&#123;</span><br><span class="line">                        closetsum = sum;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closetsum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 sum变种。只需要多维护一个临时的sum值，和closetsum比较更新就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-992-Subarrays-with-K-Different-Integers-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;992. Subarrays with K Different Integers&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/subarrays-with-k-different-integers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;subarraysWithKDistinct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] A, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; K)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; help(A,K) - help(A,K-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] A, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; K)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Map&amp;lt;Integer, Integer&amp;gt; map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ans = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; j &amp;lt; A.length ;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (map.getOrDefault(A[j], &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) K--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map.put(A[j],map.getOrDefault(A[j],&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(K&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                map.put(A[i],map.get(A[i])-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(map.get(A[i]) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)K++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ans += j-i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正好有K个 = 最多K个的情况减去最多K-1的情况。&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="TwoPointer" scheme="WangHngLeee.github.io/tags/TwoPointer/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode EveryDay 86 💪</title>
    <link href="WangHngLeee.github.io/2020/03/05/chin-up-24/"/>
    <id>WangHngLeee.github.io/2020/03/05/chin-up-24/</id>
    <published>2020-03-05T16:13:23.000Z</published>
    <updated>2020-03-13T23:02:39.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-4-Median-of-Two-Sorted-Arrays-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">4. Median of Two Sorted Arrays</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[m+n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;m ;i++)&#123;</span><br><span class="line">            arr[i] = nums1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j&lt;n;j++)&#123;</span><br><span class="line">            arr[m+j] = nums2[j];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">int</span> k = arr.length;</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">2</span> != <span class="number">0</span>)<span class="keyword">return</span> (<span class="keyword">double</span>)arr[k/<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">else</span>  <span class="keyword">return</span> ((<span class="keyword">double</span>)(arr[(k/<span class="number">2</span>) - <span class="number">1</span>] + arr[(k/<span class="number">2</span>)])/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>two array 加到一起sort。</p><a id="more"></a><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-378-Kth-Smallest-Element-in-a-Sorted-Matrix-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">378. Kth Smallest Element in a Sorted Matrix</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a,b)-&gt;b-a);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt; m ;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n ;j++)&#123;</span><br><span class="line">                pq.add(matrix[i][j]);</span><br><span class="line">                <span class="keyword">if</span>(pq.size() &gt; k)pq.poll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pq.poll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经典kth问题。维护大小为k的max/min heap即可。</p><h2 id="table-tr-td-bgcolor-E74C3C-font-color-white-668-Kth-Smallest-Number-in-Multiplication-Table-font-td-tr-table"><table><tr><td bgcolor="#E74C3C"><font color="white">668. Kth Smallest Number in Multiplication Table</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthNumber</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lo=<span class="number">1</span>, hi=m*n;</span><br><span class="line">        <span class="keyword">while</span>(lo&lt;hi)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid= (lo+hi)/<span class="number">2</span>, cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j=n; i&lt;=m; i++)&#123;</span><br><span class="line">                <span class="keyword">while</span>(j&gt;=<span class="number">1</span> &amp;&amp; i*j&gt;mid) j--;</span><br><span class="line">                cnt+=j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt&gt;=k) hi=mid;</span><br><span class="line">            <span class="keyword">else</span> lo=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>binary search把num分成两部分来找。</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-917-Reverse-Only-Letters-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">917. Reverse Only Letters</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/reverse-only-letters/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseOnlyLetters</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(S == <span class="keyword">null</span> || S.length() == <span class="number">0</span>)<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;S.length() ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Character.isLetter(S.charAt(i)))&#123;</span><br><span class="line">                stack.push(S.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; S.length() ;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Character.isLetter(S.charAt(i)))&#123;</span><br><span class="line">                sb.append(S.charAt(i));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(stack.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stack逆序输出。注意标点符号不只有‘-’。</p><h2 id="table-tr-td-bgcolor-28B463-font-color-white-925-Long-Pressed-Name-font-td-tr-table"><table><tr><td bgcolor="#28B463"><font color="white">925. Long Pressed Name</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/long-pressed-name/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLongPressedName</span><span class="params">(String name, String typed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = name.length();</span><br><span class="line">        <span class="keyword">int</span> n = typed.length();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;m &amp;&amp; name.charAt(i) == typed.charAt(j))&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span> || typed.charAt(j) != typed.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i == m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>two pointer.只需要对typed自身检查有无相同重复即可。如果两个位置元素相同，则name 的index++，如果不同并且typed的前一个和该元素不一样，则直接返回false。<br><br>abc-aabc-true<br><br>abc-adbc-false</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-986-Interval-List-Intersections-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">986. Interval List Intersections</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/interval-list-intersections/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] intervalIntersection(<span class="keyword">int</span>[][] A, <span class="keyword">int</span>[][] B) &#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a&lt;A.length &amp; b&lt;B.length)&#123;</span><br><span class="line">            <span class="keyword">int</span> start = Math.max(A[a][<span class="number">0</span>],B[b][<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> end = Math.min(A[a][<span class="number">1</span>],B[b][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(start &lt;= end)&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;start,end&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(A[a][<span class="number">1</span>] &gt; B[b][<span class="number">1</span>])b++;</span><br><span class="line">            <span class="keyword">else</span> a++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] ans = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] num : res)&#123;</span><br><span class="line">            ans[i] = num;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interval的题。start取最大，end取最小，如果start&lt;end 说明有有交集，加入res。如果没有，A的结尾比B的大，则b往后遍历一个，相反，A往后循环一个。</p><h2 id="table-tr-td-bgcolor-F5B041-font-color-white-855-Exam-Room-font-td-tr-table"><table><tr><td bgcolor="#F5B041"><font color="white">855. Exam Room</font></td></tr></table></h2><p><a href="https://leetcode.com/problems/exam-room/" target="_blank" rel="noopener"><font size="4">🔗Question Link </font></a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExamRoom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    List&lt;Integer&gt; L;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExamRoom</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        n = N;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">seat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            L.add(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// empty we set seat at 0;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> d = Math.max(L.get(<span class="number">0</span>), n - <span class="number">1</span> - L.get(L.size() - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.size() - <span class="number">1</span>; ++i) d = Math.max(d, (L.get(i + <span class="number">1</span>) - L.get(i)) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (L.get(<span class="number">0</span>) == d) &#123;<span class="comment">//d == 0 we also set seat at 0</span></span><br><span class="line">            L.add(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.size() - <span class="number">1</span>; ++i)<span class="comment">//try to find the minimum index that match d.</span></span><br><span class="line">            <span class="keyword">if</span> ((L.get(i + <span class="number">1</span>) - L.get(i)) / <span class="number">2</span> == d) &#123;</span><br><span class="line">                L.add(i + <span class="number">1</span>, (L.get(i + <span class="number">1</span>) + L.get(i)) / <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">return</span> L.get(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        L.add(n- <span class="number">1</span>); <span class="comment">// no match we add at last position</span></span><br><span class="line">        <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leave</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123; <span class="comment">// find the p and remove it</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.size(); ++i) <span class="keyword">if</span> (L.get(i) == p) L.remove(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有意思的design题。用list存seat的位置，然后每次遍历找最大的dist，然后再重头开始找最小能够匹配dist的index，把seat插入该index。<br>否则直接安排在最后面。leave的时候只需要remove p所在的list index即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;table-tr-td-bgcolor-E74C3C-font-color-white-4-Median-of-Two-Sorted-Arrays-font-td-tr-table&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=&quot;#E74C3C&quot;&gt;&lt;font color=&quot;white&quot;&gt;4. Median of Two Sorted Arrays&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;font size=&quot;4&quot;&gt;🔗Question Link &lt;/font&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findMedianSortedArrays&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m = nums1.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = nums2.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[m+n];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ;i&amp;lt;m ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            arr[i] = nums1[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ;j&amp;lt;n;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            arr[m+j] = nums2[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Arrays.sort(arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = arr.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(k%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;)arr[k/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ((&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;)(arr[(k/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] + arr[(k/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)])/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;two array 加到一起sort。&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Cracking" scheme="WangHngLeee.github.io/categories/Leetcode-Cracking/"/>
    
    
      <category term="Leetcode" scheme="WangHngLeee.github.io/tags/Leetcode/"/>
    
      <category term="BinarySearch" scheme="WangHngLeee.github.io/tags/BinarySearch/"/>
    
      <category term="TwoPointer" scheme="WangHngLeee.github.io/tags/TwoPointer/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Interview Note 3 💪</title>
    <link href="WangHngLeee.github.io/2020/03/05/frontend-interview-js/"/>
    <id>WangHngLeee.github.io/2020/03/05/frontend-interview-js/</id>
    <published>2020-03-05T13:05:35.000Z</published>
    <updated>2020-05-19T15:45:40.502Z</updated>
    
    <content type="html"><![CDATA[<h1>JS</h1><h3 id="闭包">闭包</h3><p>闭包就是能够读取其他函数内部变量的函数，或者子函数在外调用，子函数所在的父函数的作用域不会被释放。<br>应用场景？函数防抖，使用闭包设计单例模式，为多个组件独立属性，设置私有变量，取到正确值。</p><h3 id="类的创建和继承">类的创建和继承</h3><p>创建：new一个function，在这个function的prototype里面增加属性和方法。<br>1、原型链继承，将父类的实例作为子类的原型，他的特点是实例是子类的实例也是父类的实例，父类新增的原型方法/属性，子类都能够访问，并且原型链继承简单易于实现，缺点是来自原型对象的所有属性被所有实例共享，无法实现多继承，无法向父类构造函数传参。<br>2、构造继承，使用父类的构造函数来增强子类实例，即复制父类的实例属性给子类，<br>构造继承可以向父类传递参数，可以实现多继承，通过call多个父类对象。但是构造继承只能继承父类的实例属性和方法，不能继承原型属性和方法，无法实现函数服用，每个子类都有父类实例函数的副本，影响性能<br>3、实例继承，为父类实例添加新特性，作为子类实例返回，实例继承的特点是不限制调用方法，不管是new 子类（）还是子类（）返回的对象具有相同的效果，缺点是实例是父类的实例，不是子类的实例，不支持多继承<br>4、拷贝继承：特点：支持多继承，缺点：效率较低，内存占用高（因为要拷贝父类的属性）无法获取父类不可枚举的方法（不可枚举方法，不能使用for in 访问到）<br>5、组合继承：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用<br>6、寄生组合继承：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点</p><h3 id="Javascript-的作用域链？">Javascript 的作用域链？</h3><p>作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和<br>函数。作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前<br>端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。<br>当我们查找一个变量时，如果当前执行环境中没有找到，我们可以沿着作用域链向后查找。</p><a id="more"></a><h3 id="事件流和事件模型">事件流和事件模型</h3><p>事件是用户操作网页时发生的交互动作或者网页本身的一些操作，现代浏览器一共有三种事件模型。<br>1.DOM0 级模型，这种模型不会传播，所以没有事件流的概念，但是现在有的浏览器支持以冒泡的方式实<br>现，它可以在网页中直接定义监听函数，也可以通过 js 属性来指定监听函数。这种方式是所有浏览器都兼容的。<br><a href="http://2.IE" target="_blank" rel="noopener">2.IE</a> 事件模型，在该事件模型中，一次事件共有两个过程，事件处理阶段，和事件冒泡阶段。事件处理阶段会<br>首先执行目标元素绑定的监听事件。然后是事件冒泡阶段，冒泡指的是事件从目标元素冒泡到 document，依次检查经过的节点<br>是否绑定了事件监听函数，如果有则执行。这种模型通过 attachEvent 来添加监听函数，可以添加多个监听函数，会按顺序依<br>次执行。<br>3.DOM2 级事件模型，在该事件模型中，一次事件共有三个过程，事件捕获阶段。捕获指的是事件从 docu<br>ment 一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。后面两个阶段和 IE 事件模型<br>的两个阶段相同。这种事件模型，事件绑定的函数是 addEventListener，其中第三个参数可以指定事件是否在捕获阶段执行。<br>事件流：事件流描述的是从页面中接收事件的顺序,DOM2级事件流包括下面几个阶段。事件捕获阶段，处于目标阶段，事件冒泡阶段</p><h3 id="如何让事件先冒泡后捕获">如何让事件先冒泡后捕获</h3><p>在DOM标准事件模型中，是先捕获后冒泡。但是如果要实现先冒泡后捕获的效果，对于同一个事件，监听捕获和冒泡，分别对应相应的处理函数，监听到捕获事件，先暂缓执行，直到冒泡事件被捕获后再执行捕获之间。<br>根据w3c标准，应先捕获再冒泡。若要实现先冒泡后捕获，给一个元素绑定两个addEventListener，其中一个第三个参数设置为false（即冒泡），另一个第三个参数设置为true（即捕获），调整它们的代码顺序，将设置为false的监听事件放在设置为true的监听事件前面即可。</p><h3 id="事件委托与冒泡原理">事件委托与冒泡原理</h3><p>事件委托指的是，不在事件的发生地（直接dom）上设置监听函数，而是在其父元素上设置监听函数，通过事件冒泡，父元素可以监听到子元素上事件的触发，通过判断事件发生元素DOM的类型，来做出不同的响应。<br>事件冒泡，就是元素自身的事件被触发后，如果父元素有相同的事件，如onclick事件，那么元素本身的触发状态就会传递，也就是冒到父元素，父元素的相同事件也会一级一级根据嵌套关系向外触发，直到document/window，冒泡过程结束。<br>举例：最经典的就是ul和li标签的事件监听，比如我们在添加事件时候，采用事件委托机制，不会在li标签上直接添加，而是在ul父元素上添加。好处：比较合适动态元素的绑定，新添加的子元素也会有监听函数，也可以有事件触发机制。</p><h3 id="如何阻止冒泡？">如何阻止冒泡？</h3><p>w3c的方法是e.stopPropagation()，IE则是使用e.cancelBubble = true</p><h3 id="深拷贝-浅拷贝">深拷贝 浅拷贝</h3><p>浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此<br>两个对象会有同一个引用类型的引用。浅拷贝可以使用  Object.assign 和展开运算符来实现。</p><p>深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引<br>用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对<br>象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败。</p><h3 id="懒加载和预加载">懒加载和预加载</h3><p>预加载：提前加载图片，当用户需要查看时可直接从本地缓存中渲染。<br>懒加载：懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。<br>两种技术的本质：两者的行为是相反的，一个是提前加载，一个是迟缓甚至不加载。<br>懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。</p><h3 id="改变函数内部this指针的指向函数（bind，apply，call的区别）">改变函数内部this指针的指向函数（bind，apply，call的区别）</h3><p>Call，apply它们的共同点是，都能够改变函数执行时的上下文，将一个对象的方法交给另一个对象来执行，并且是立即执行的。<br>bind 方法 与 apply 和 call 比较类似，也能改变函数体内的 this 指向。不同的是，bind 方法的返回值是函数，并且需要稍后调用，才会执行。而 apply 和 call 则是立即调用</p><h3 id="JS节流与防抖">JS节流与防抖</h3><ul><li>函数节流: 指定时间间隔内只会执行一次任务；</li><li>函数防抖: 任务频繁触发的情况下，只有任务触发的间隔超过指定间隔的时候，任务才会执行。</li></ul><h3 id="iframe-iframe的缺点">iframe &amp;&amp; iframe的缺点</h3><p>定义：iframe元素会创建包含另一个文档的内联框架<br>提示：可以将提示文字放在<iframe></iframe>之间，来提示某些不支持iframe的浏览器<br>缺点：iframe 会阻塞主页面的 onload 事件。window 的 onload 事件需要在所有 iframe 加载完毕后（包含里面的元素）才<br>会触发。在 Safari 和 Chrome 里，通过 JavaScript 动态设置 iframe 的 src 可以避免这种阻塞情况。<br>（2） 搜索引擎的检索程序无法解读这种页面，不利于网页的 SEO 。<br>（3） iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。<br>（4） 浏览器的后退按钮失效。<br>（5） 小型的移动设备无法完全显示框架。</p><h3 id="JS中的垃圾回收机制">JS中的垃圾回收机制</h3><p>垃圾回收有两种实现方式，分别是标记清除和引用计数<br>标记清除：当变量进入执行环境时标记为“进入环境”，当变量离开执行环境时则标记为“离开环境”，被标记为“进入环境”的变量是不能被回收的，因为它们正在被使用，而标记为“离开环境”的变量则可以被回收。<br>引用计数：统计引用类型变量声明后被引用的次数，当次数为 0 时，该变量将被回收。</p><h3 id="common-js">common.js</h3><p>Commonjs：开始于服务器端的模块化，同步定义的模块化，每个模块都是一个单独的作用域，模块输出，modules.exports，模块加载require()引入模块。</p><h3 id="数组去重">数组去重</h3><p>法一：indexOf循环去重<br>法二：ES6 Set去重；Array.from(new Set(array))<br>法三：Object 键值对去重；把数组的值存成 Object 的 key 值，比如 Object[value1] = true，在判断另一个值的时候，如果 Object[value2]存在的话，就说明该值是重复的。</p><h3 id="判断数据类型（是数组）？">判断数据类型（是数组）？</h3><p>Object.prototype.call.toString()<br>Instanceof</p><h3 id="跨域？实现方法">跨域？实现方法</h3><p>跨域，是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript实施的安全限制，那么只要协议、域名、端口有任何一个不同，都被当作是不同的域。跨域原理，即是通过各种方式，避开浏览器的安全限制。<br>JSONP：通过动态创建script，再请求一个带参网址实现跨域通信。document.domain + iframe跨域：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。<br>location.hash + iframe跨域：a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。<br><a href="http://window.name" target="_blank" rel="noopener">window.name</a> + iframe跨域：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。<br>postMessage跨域：可以跨域操作的window属性之一。<br>CORS：服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求，前后端都需要设置。<br>代理跨域：起一个代理服务器，实现数据的转发</p><h3 id="重排和重绘">重排和重绘</h3><p>重绘：当盒子的位置、大小以及其他属性，颜色、字体大小等都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。<br>重排：当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。<br>重绘和重排的关系：在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为重绘。所以，重排必定会引发重绘，但重绘不一定会引发重排。</p><h3 id="虚拟virtual-dom">虚拟virtual dom</h3><p>用JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中 当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异 把所记录的差异应用到所构建的真正的DOM树上，视图就更新了。Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。</p><h3 id="webpack？">webpack？</h3><p>css文件<br>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle。</p><h3 id="promise">promise</h3><p>ES6新语法，Promise是一个对象，保存着未来将要结束的事件，她有两个特征:<br>1、对象的状态不受外部影响，Promise对象代表一个异步操作，有三种状态，pending进行中，fulfilled已成功，rejected已失败，只有异步操作的结果，才可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也就是promise名字的由来<br>2、一旦状态改变，就不会再变，promise对象状态改变只有两种可能，从pending改到fulfilled或者从pending改到rejected，只要这两种情况发生，状态就凝固了，不会再改变，这个时候就称为定型resolved,</p><h3 id="vue生命周期">vue生命周期</h3><p>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、销毁等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。</p><h3 id="es6箭头函数特性">es6箭头函数特性</h3><p>1、箭头函数没有this，所以需要通过查找作用域链来确定this的值，这就意味着如果箭头函数被非箭头函数包含，this绑定的就是最近一层非箭头函数的this，<br>2、箭头函数没有自己的arguments对象，但是可以访问外围函数的arguments对象<br>3、不能通过new关键字调用，同样也没有new.target值和原型</p><h3 id="es6新特性">es6新特性</h3><p>块级作用域：ES5只有全局作用域和函数作用域，块级作用域的好处是不再需要立即执行的函数表达式，循环体中的闭包不再有问题<br>rest参数：用于获取函数的多余参数，这样就不需要使用arguments对象了，<br>promise:一种异步编程的解决方案，比传统的解决方案回调函数和事件更合理强大<br>模块化：其模块功能主要有两个命令构成，export和import，export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能</p><h3 id="同源策略">同源策略</h3><p>如果没有同源策略，不同源的数据和资源（如HTTP头、Cookie、DOM、localStorage等）就能相互随意访问，根本没有隐私和安全可言。为了安全起见和资源的有效管理，浏览器当然要采用这种策略。</p><h3 id="PWA">PWA</h3><p>PWA全称Progressive Web App，即渐进式WEB应用。一个 PWA 应用首先是一个网页, 可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能</p><h3 id="Redux">Redux</h3><p>在组件化的应用中，会有着大量的组件层级关系，深嵌套的组件与浅层父组件进行数据交互，变得十分繁琐困难。而redux，站在一个服务级别的角度，可以毫无阻碍地将应用的状态传递到每一个层级的组件中。redux就相当于整个应用的管家。<br>redux里常用方法<br>提供 getState() 方法获取 state；<br>提供 dispatch(action) 方法更新 state；<br>通过 subscribe(listener) 注册监听器;</p><h3 id="vue双向绑定原理：">vue双向绑定原理：</h3><p>vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)。</p><h3 id="什么是-DOM-和-BOM？">什么是 DOM 和 BOM？</h3><p>DOM 指的是文档对象模型，它指的是把文档当做一个对象来对待，这个对象主要定义了处理网页内容的方法和接口。<br>BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM<br>的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。</p><h3 id="Ajax">Ajax</h3><p>我对 ajax 的理解是，它是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，<br>更新网页的相应部分，而不用刷新整个页面的一种方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;JS&lt;/h1&gt;
&lt;h3 id=&quot;闭包&quot;&gt;闭包&lt;/h3&gt;
&lt;p&gt;闭包就是能够读取其他函数内部变量的函数，或者子函数在外调用，子函数所在的父函数的作用域不会被释放。&lt;br&gt;
应用场景？函数防抖，使用闭包设计单例模式，为多个组件独立属性，设置私有变量，取到正确值。&lt;/p&gt;
&lt;h3 id=&quot;类的创建和继承&quot;&gt;类的创建和继承&lt;/h3&gt;
&lt;p&gt;创建：new一个function，在这个function的prototype里面增加属性和方法。&lt;br&gt;
1、原型链继承，将父类的实例作为子类的原型，他的特点是实例是子类的实例也是父类的实例，父类新增的原型方法/属性，子类都能够访问，并且原型链继承简单易于实现，缺点是来自原型对象的所有属性被所有实例共享，无法实现多继承，无法向父类构造函数传参。&lt;br&gt;
2、构造继承，使用父类的构造函数来增强子类实例，即复制父类的实例属性给子类，&lt;br&gt;
构造继承可以向父类传递参数，可以实现多继承，通过call多个父类对象。但是构造继承只能继承父类的实例属性和方法，不能继承原型属性和方法，无法实现函数服用，每个子类都有父类实例函数的副本，影响性能&lt;br&gt;
3、实例继承，为父类实例添加新特性，作为子类实例返回，实例继承的特点是不限制调用方法，不管是new 子类（）还是子类（）返回的对象具有相同的效果，缺点是实例是父类的实例，不是子类的实例，不支持多继承&lt;br&gt;
4、拷贝继承：特点：支持多继承，缺点：效率较低，内存占用高（因为要拷贝父类的属性）无法获取父类不可枚举的方法（不可枚举方法，不能使用for in 访问到）&lt;br&gt;
5、组合继承：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用&lt;br&gt;
6、寄生组合继承：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点&lt;/p&gt;
&lt;h3 id=&quot;Javascript-的作用域链？&quot;&gt;Javascript 的作用域链？&lt;/h3&gt;
&lt;p&gt;作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和&lt;br&gt;
函数。作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前&lt;br&gt;
端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。&lt;br&gt;
当我们查找一个变量时，如果当前执行环境中没有找到，我们可以沿着作用域链向后查找。&lt;/p&gt;
    
    </summary>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/Interview/"/>
    
      <category term="JS" scheme="WangHngLeee.github.io/categories/Interview/JS/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Interview Note 2 💪</title>
    <link href="WangHngLeee.github.io/2020/03/04/front-end-interview-css/"/>
    <id>WangHngLeee.github.io/2020/03/04/front-end-interview-css/</id>
    <published>2020-03-04T13:05:35.000Z</published>
    <updated>2020-05-19T15:45:51.561Z</updated>
    
    <content type="html"><![CDATA[<h1>CSS 篇</h1><h3 id="盒模型">盒模型</h3><p>CSS中的盒子模型包括IE盒子模型和标准的W3C盒子模型。<br>box-sizing(有3个值哦)：border-box,padding-box,content-box.<br>标准的盒子模型：width指content部分的宽度<br>在IE盒子模型中：width表示content+padding+border<br>标准盒子模型的盒子宽度：左右border+左右padding+width<br>IE盒子模型的盒子宽度：width</p><h3 id="flex">flex</h3><p>Flex是Flexible Box的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性。<br>布局的传统解决方案，基于盒状模型，依赖display属性 + position属性 + float属性。<br>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><h3 id="css选择器">css选择器</h3><p>id 选择器，class 选择器，标签选择器，伪元素选择器，伪类选择器等<br>同一元素引用了多个样式时，排在后面的样式属性的优先级高；<br>样式选择器的类型不同时，优先级顺序为：id 选择器 &gt; class 选择器 &gt; 标签选择器；<br>标签之间存在层级包含关系时，后代元素会继承祖先元素的样式。如果后代元素定义了与祖先元素相同的样式，则祖先元素的相同的样式属性会被覆盖。继承的样式的优先级比较低，至少比标签选择器的优先级低；<br>带有!important 标记的样式属性的优先级最高；<br>样式表的来源不同时，优先级顺序为：内联样式&gt; 内部样式 &gt; 外部样式 &gt; 浏览器用户自定义样式 &gt; 浏览器默认样式</p><a id="more"></a><h3 id="BFC">BFC</h3><p>BFC，块级格式化上下文，用于清楚浮动，防止margin重叠等。这是一个独立的渲染区域，规定了内部如何布局，并且这个区域的子元素不会影响到外面的元素，其中比较重要的布局规则有内部box垂直放置，计算BFC的高度的时候，浮动元素也参与计算，触发BFC的规则有根元素，浮动元素，position为absolute或fixed的元素，display为inline-block，table-cell，table-caption，flex，inline-flex，overflow不为visible的元素</p><h3 id="清除浮动：">清除浮动：</h3><p>bfc清除浮动<br>给要清除浮动的元素添加样式clear （ clear的原理是使浮动元素不影响别的元素，而不是消灭浮动）<br>父元素结束标签钱插入清除浮动的块级元素，给该元素添加样式clear<br>添加伪元素，在父级元素的最后，添加一个伪元素，通过清除伪元素的浮动，注意该伪元素的display为block，<br>父元素添加样式overflow清除浮动，overflow设置除visible以外的任何位置</p><h3 id="层叠上下文">层叠上下文</h3><p>层叠上下文，stacking context， 是HTML中的一个三维的概念。z-index<br>顺序根据z-index从大到小显示，首先看父类容器的z-index。div的z-index决定了子元素的显示顺序。</p><h3 id="CSS-中哪些属性可以继承？">CSS 中哪些属性可以继承？</h3><p>每一个属性在定义中都给出了这个属性是否具有继承性，一个具有继承性的属性会在没有指定值的时候，会使用父元素的同属性的值<br>来作为自己的值。<br>一般具有继承性的属性有，字体相关的属性，font-size 和 font-weight 等。文本相关的属性，color 和 text-align 等。<br>表格的一些布局属性、列表属性如 list-style 等。 还有光标属性 cursor、元素可见性 visibility 。<br>当一个属性不是继承属性的时候，我们也可以通过将它的值设置为 inherit 来使它从父元素那获取同名的属性值来继承。</p><h3 id="垂直居中问题：">垂直居中问题：</h3><p>对于宽高固定的元素<br>（1）我们可以利用 margin:0 auto 来实现元素的水平居中。<br>（2）利用绝对定位，设置四个方向的值都为0，并将 margin 设置为 auto ，由于宽高固定，因此对应方向实现平分，可以实现水<br>平和垂直方向上的居中。<br>（3）利用绝对定位，先将元素的左上角通过 top: 50% 和 left: 50% 定位到页面的中心，然后再通过 margin 负值来调整元素<br>的中心点到页面的中心。<br>（4）利用绝对定位，先将元素的左上角通过 top: 50% 和 left: 50% 定位到页面的中心，然后再通过 translate 来调整元素<br>的中心点到页面的中心。<br>（5）使用 flex 布局，通过 align-items: center 和 justify-content: center 设置容器的垂直和水平方向上为居中对<br>齐，然后它的子元素也可以实现垂直和水平的居中。<br>对于宽高不定的元素，上面的后面两种方法，可以实现元素的垂直和水平的居中。</p><h3 id="CSS-position种类-属性？">CSS position种类&amp;属性？</h3><p>固定定位fixed：元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed定位使元素的位置与文档流无关，因此不占据空间。 Fixed定位的元素和其他元素重叠。<br>相对定位relative：如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直或水平位置，让这个元素“相对于”它的起点进行移动。 在使用相对定位时，无论是否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。<br>绝对定位absolute：绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<html>。 absolute 定位使元素的位置与文档流无关，因此不占据空间。 absolute 定位的元素和其他元素重叠。<br>粘性定位sticky：元素先按照普通文档流定位，然后相对于该元素在流中的flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。<br>默认定位Static：默认值。没有定位，元素出现在正常的流中（忽略top, bottom, left, right 或者 z-index 声明）。<br>inherit:规定应该从父元素继承position 属性的值。</html></p><h3 id="常见页面布局">常见页面布局</h3><p>传统盒模型布局：文档流布局，浮动布局，定位布局<br>弹性盒子flex布局：<br>Grid网格布局<br>圣杯（多列）布局<br>双飞翼布局</p><h3 id="响应式布局">响应式布局</h3><p>1.媒体查询：CSS3媒体查询可以让我们针对不同的媒体类型定义不同的样式，当重置浏览器窗口大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面。<br>2.百分比布局：通过百分比单位，可以使得浏览器中组件的宽和高随着浏览器的高度的变化而变化，从而实现响应式的效果<br>3.rem布局：rem单位都是相对于根元素html的font-size来决定大小的。通过rem来实现响应式的布局，只需要根据视图容器的大小，动态的改变font-size即可<br>4.视口单位<br>5.图片响应式： 大小自适应 ｜｜ 根据分辨率尽可能选择分辨率高的图片。</p><h3 id="css预处理，后处理">css预处理，后处理</h3><p>预处理：广义上说，目标格式为 CSS 的 预处理器 是 CSS 预处理器，但本文 特指 以最终生成 CSS 为目的的 领域特定语言。Sass、LESS、Stylus 是目前最主流的 CSS 预处理器。<br>实现原理：取到 DSL 源代码 的 分析树，将含有 动态生成 相关节点的 分析树 转换为 静态分析树，将 静态分析树 转换为 CSS 的 静态分析树，将 CSS 的 静态分析树 转换为 CSS 代码<br>后处理：对 CSS 进行处理，并最终生成 CSS 的 预处理器，它属于广义上的 CSS 预处理器。<br>CSS 压缩工具（如 clean-css）<br>实现原理：将 源代码 做为 CSS 解析，获得分析树，对CSS的分析树进行后处理，</p><h3 id="css3新特性">css3新特性</h3><p>Transition:可以在当元素从一种样式变换为另一种样式时为元素添加效果，而不用使用Flash动画或JavaScript<br>Transform：Transform用来向元素应用各种2D和3D转换，该属性允许我们对元素进行旋转、缩放、移动或倾斜等<br>Animation：Animation让CSS拥有了可以制作动画的功能。使用Animation制作动画可以省去复杂的js代码</p><h3 id="display哪些取值">display哪些取值</h3><p>none：隐藏，不会占用文档流位置（其他元素会占用他的位置）<br>inline：行内元素<br>inline-block：行内块元素，也即有块元素的一些特性，可以设置宽高度边距等等。<br>block：块元素，独占一行，可以设置宽高边距等等。<br>table：相关，众所周知table域有一些特定的标签：table、tr、th、td、tfoot等等。那么可以用div等元素的来实现吗？可以，将这些元素的display设置成table-*就行。<br>inherit：即继承。</p><h3 id="相邻的两个inline-block节点为什么会出现间隔，该如何解决">相邻的两个inline-block节点为什么会出现间隔，该如何解决</h3><p>两个In line block 节点之间有空隙原因：英文有空格作为词分界，而中文则没有。（这背后延伸出一个中文分词的问题）这个问题的原因可以上述到SGML(标准通用标记语言)和TeX(排版工具)，它实际上是一个行内（inline）的问题，它由空格、换行或回车所产生空白符所致<br>方法1. 改变书写方式 去掉html中的空格，或者排列在一行，但是可读性差<br>方法2：font-size<br>方法3：使用margin负值<br>方法4：使用word-spacing或letter-spacing</p><h3 id="meta-viewport-移动端适配">meta viewport 移动端适配</h3><p>所做的适配，就是要调整layout viewport的大小，而用meta标签就可以调整layout viewport的大小。</p><h3 id="rem布局的优缺点">rem布局的优缺点</h3><p>rem可以让我们的页面更灵活，更健壮，比起到处写死的px值，em似乎更有张力，改动父元素的字体大小，子元素会等比例变化，这一变化似乎预示了无限可能<br>rem是弹性布局的一种，弹性布局是响应式布局的一种，但是响应式布局不是弹性布局。弹性布局强调等比缩放，强调百分百还原，响应式布局强调不同设备有不同的展现。<br>Rem过于死板，响应式布局可以多设备自适应，</p><h3 id="link标签和import标签的区别：">link标签和import标签的区别：</h3><p>link属于html标签，而@import是css提供的<br>页面被加载时，link会同时被加载，而@import引用的css会等到页面加载结束后加载。<br>link是html标签，因此没有兼容性，而@import只有IE5以上才能识别。<br>link方式样式的权重高于@import的。</p><h3 id="1像素边框问题：">1像素边框问题：</h3><p>1）border-image 图片 实现<br>缺点是制作图片的圆角时候会出现模糊。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.border-image<span class="number">-1</span>px &#123;</span><br><span class="line">    border-width: <span class="number">1</span>px <span class="number">0</span>px;</span><br><span class="line">    -webkit-border-image: url(<span class="string">"image_url"</span>) <span class="number">2</span> <span class="number">0</span> stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>background-image 渐变实现<br>除啦用图片，难道纯粹的css就不能实现吗？我的确不想使用图片，感觉制作起来很麻烦，其实百度糯米团首页就是这么做的但是这种方法有个缺点，就是不能实现圆角</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.border &#123;</span><br><span class="line">      background-image:linear-gradient(<span class="number">180</span>deg, red, red <span class="number">50</span>%, transparent <span class="number">50</span>%),</span><br><span class="line">      linear-gradient(<span class="number">270</span>deg, red, red <span class="number">50</span>%, transparent <span class="number">50</span>%),</span><br><span class="line">      linear-gradient(<span class="number">0</span>deg, red, red <span class="number">50</span>%, transparent <span class="number">50</span>%),</span><br><span class="line">      linear-gradient(<span class="number">90</span>deg, red, red <span class="number">50</span>%, transparent <span class="number">50</span>%);</span><br><span class="line">      background-size: <span class="number">100</span>% <span class="number">1</span>px,<span class="number">1</span>px <span class="number">100</span>% ,<span class="number">100</span>% <span class="number">1</span>px, <span class="number">1</span>px <span class="number">100</span>%;</span><br><span class="line">      background-repeat: no-repeat;</span><br><span class="line">      background-position: top, right top,  bottom, left top;</span><br><span class="line">      padding: <span class="number">10</span>px;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>viewport+rem实现<br>box-shadow 实现<br>利用阴影我们也可以实现，那么我们来看看阴影，优点是圆角不是问题，缺点是颜色不好控制。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    -webkit-box-shadow:<span class="number">0</span> <span class="number">1</span>px <span class="number">1</span>px <span class="number">-1</span>px rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transform: scale(0.5) 实现 推荐相当灵活<br>其实我们刚才列举了那么多例子，无非就是把1px缩放都0.5px的状态下，而0.5px并不是所有都支持，再根据媒体查询设置不同的缩放比例就可以了，那么我们就开始玩儿缩放吧。<br>1.用height：1px的div，然后根据媒体查询设置transform: scaleY(0.5);，</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    height:<span class="number">1</span>px;</span><br><span class="line">    background:#000;</span><br><span class="line">    -webkit-transform: scaleY(<span class="number">0.5</span>);</span><br><span class="line">    -webkit-transform-origin:<span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.用::after和::befor,设置border-bottom：1px solid #000,然后在缩放-webkit-transform: scaleY(0.5);可以实现两根边线的需求</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div::after&#123;</span><br><span class="line">    content:<span class="string">''</span>;width:<span class="number">100</span>%;</span><br><span class="line">    border-bottom:1px solid #000;</span><br><span class="line">    transform: scaleY(<span class="number">0.5</span>);&#125;</span><br></pre></td></tr></table></figure><p>3.用::after设置border：1px solid #000; width:200%; height:200%,然后再缩放scaleY(0.5); 优点可以实现圆角，京东就是这么实现的，缺点是按钮添加active比较麻烦。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.div::after &#123;</span><br><span class="line">    content: <span class="string">''</span>;</span><br><span class="line">    width: <span class="number">200</span>%;</span><br><span class="line">    height: <span class="number">200</span>%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line">    border: 1px solid #bfbfbf;</span><br><span class="line">    border-radius: <span class="number">4</span>px;</span><br><span class="line">    -webkit-transform: scale(<span class="number">0.5</span>,<span class="number">0.5</span>);</span><br><span class="line">    transform: scale(<span class="number">0.5</span>,<span class="number">0.5</span>);</span><br><span class="line">    -webkit-transform-origin: top left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;CSS 篇&lt;/h1&gt;
&lt;h3 id=&quot;盒模型&quot;&gt;盒模型&lt;/h3&gt;
&lt;p&gt;CSS中的盒子模型包括IE盒子模型和标准的W3C盒子模型。&lt;br&gt;
box-sizing(有3个值哦)：border-box,padding-box,content-box.&lt;br&gt;
标准的盒子模型：width指content部分的宽度&lt;br&gt;
在IE盒子模型中：width表示content+padding+border&lt;br&gt;
标准盒子模型的盒子宽度：左右border+左右padding+width&lt;br&gt;
IE盒子模型的盒子宽度：width&lt;/p&gt;
&lt;h3 id=&quot;flex&quot;&gt;flex&lt;/h3&gt;
&lt;p&gt;Flex是Flexible Box的缩写，意为&amp;quot;弹性布局&amp;quot;，用来为盒状模型提供最大的灵活性。&lt;br&gt;
布局的传统解决方案，基于盒状模型，依赖display属性 + position属性 + float属性。&lt;br&gt;
容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。&lt;/p&gt;
&lt;h3 id=&quot;css选择器&quot;&gt;css选择器&lt;/h3&gt;
&lt;p&gt;id 选择器，class 选择器，标签选择器，伪元素选择器，伪类选择器等&lt;br&gt;
同一元素引用了多个样式时，排在后面的样式属性的优先级高；&lt;br&gt;
样式选择器的类型不同时，优先级顺序为：id 选择器 &amp;gt; class 选择器 &amp;gt; 标签选择器；&lt;br&gt;
标签之间存在层级包含关系时，后代元素会继承祖先元素的样式。如果后代元素定义了与祖先元素相同的样式，则祖先元素的相同的样式属性会被覆盖。继承的样式的优先级比较低，至少比标签选择器的优先级低；&lt;br&gt;
带有!important 标记的样式属性的优先级最高；&lt;br&gt;
样式表的来源不同时，优先级顺序为：内联样式&amp;gt; 内部样式 &amp;gt; 外部样式 &amp;gt; 浏览器用户自定义样式 &amp;gt; 浏览器默认样式&lt;/p&gt;
    
    </summary>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/Interview/"/>
    
      <category term="CSS" scheme="WangHngLeee.github.io/categories/Interview/CSS/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
  </entry>
  
  <entry>
    <title>Front-end Interview Note 1 💪</title>
    <link href="WangHngLeee.github.io/2020/03/04/frontent-interview-html/"/>
    <id>WangHngLeee.github.io/2020/03/04/frontent-interview-html/</id>
    <published>2020-03-04T13:05:35.000Z</published>
    <updated>2020-05-19T15:46:03.506Z</updated>
    
    <content type="html"><![CDATA[<h1>HTML篇</h1><h3 id="语义化">语义化</h3><p>HTML5语义化标签是指正确的标签包含了正确的内容，结构良好，便于阅读，比如nav表示导航条，类似的还有article、header、footer等等标签。</p><h3 id="移动设备忽略将页面中的数字识别为电话号码的方法">移动设备忽略将页面中的数字识别为电话号码的方法</h3><p>如果忽略页面中的数字识别为电话号码, 只要把这个默认行为关闭就行，只要一行代码:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;meta name = <span class="string">"format-detection"</span> content = <span class="string">"telephone=no"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="http-vs-https">http vs https :</h3><p>定义：<br>http: 超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。<br>https: 是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。<br>区别：<br>Https协议需要ca证书，费用较高。<br>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。<br>使用不同的链接方式，端口也不同，一般而言，http协议的端口为80，https的端口为443<br>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><h3 id="websocket">websocket</h3><p>WebSocket是HTML5中的协议，支持持久连续，http协议不支持持久性连接。Http1.0和HTTP1.1都不支持持久性的链接，HTTP1.1中的keep-alive，将多个http请求合并为1个</p><h3 id="Cookie、sessionStorage、localStorage的区别">Cookie、sessionStorage、localStorage的区别</h3><p>共同点：都是保存在浏览器端，并且是同源的<br>cookie数据始终在同源的http请求中携带(即使不需要)，即cookie在浏览器和服务器间来回传递<br>cookie数据还有路径（path）的概念，可以限制。cookie只属于某个路径下<br>存储大小限制也不同–cookie数据不能超过4K，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如回话标识。<br>webStorage虽然也有存储大小的限制，但是比cookie大得多，可以达到5M或更大<br>数据的有效期不同 --sessionStorage：仅在当前的浏览器窗口关闭有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前一直有效，即使窗口和浏览器关闭<br>作用域不同–sessionStorage：不在不同的浏览器窗口中共享，即使是同一个页面；localStorage：在所有同源窗口都是共享的；cookie：也是在所有同源窗口中共享的</p><a id="more"></a><h3 id="cookie-session区别">cookie session区别</h3><p>1.cookie数据存放在客户的浏览器上，session数据放在服务器上。<br>2.cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session。<br>3.session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用COOKIE。<br>4.单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie</p><h3 id="Doctype作用-严格模式与混杂模式如何区分？它们有何意义">Doctype作用?严格模式与混杂模式如何区分？它们有何意义?</h3><p>Doctype声明于文档最前面，告诉浏览器以何种方式来渲染页面，这里有两种模式，严格模式和混杂模式。<br>严格模式的排版和JS 运作模式是 以该浏览器支持的最高标准运行。<br>混杂模式，向后兼容，模拟老式浏览器，防止浏览器无法兼容页面。</p><h3 id="浏览器缓存，强-协商缓存">浏览器缓存，强/协商缓存</h3><p>浏览器缓存是浏览器在本地磁盘对用户最近请求过的文档进行存储，当访问者再次访问同一页面时，浏览器就可以直接从本地磁盘加载文档。<br>缓存分为两种：强缓存和协商缓存，根据响应的header内容来决定。<br>强缓存相关字段有expires，cache-control。如果cache-control与expires同时存在的话，cache-control的优先级高于expires。<br>协商缓存相关字段有Last-Modified/If-Modified-Since，Etag/If-None-Match</p><table><thead><tr><th style="text-align:center">缓存类型</th><th style="text-align:right">获取资源形式</th><th style="text-align:center">状态码</th><th style="text-align:center">发送请求到服务器</th></tr></thead><tbody><tr><td style="text-align:center">协商缓存</td><td style="text-align:right">从缓存取</td><td style="text-align:center">200(from cache)</td><td style="text-align:center">否，直接从缓存取</td></tr><tr><td style="text-align:center"></td><td style="text-align:right"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">强缓存</td><td style="text-align:right">从缓存取</td><td style="text-align:center">304(undefined)</td><td style="text-align:center">是，通过服务器来告知缓存是否可用</td></tr><tr><td style="text-align:center"></td><td style="text-align:right"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>什么时候用哪个？<br><br>因为服务器上的资源不是一直固定不变的，大多数情况下它会更新，这个时候如果我们还访问本地缓存，那么对用户来说，那就相当于资源没有更新，用户看到的还是旧的资源；所以我们希望服务器上的资源更新了浏览器就请求新的资源，没有更新就使用本地的缓存，以最大程度的减少因网络请求而产生的资源浪费。</p><h3 id="304状态码">304状态码</h3><p>304：如果客户端发送了一个带条件的GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个304状态码。</p><h3 id="前端优化">前端优化</h3><p>降低请求量：合并资源，减少HTTP 请求数，minify / gzip 压缩，webP，lazyLoad。<br><br>加快请求速度：预解析DNS，减少域名数，并行加载，CDN 分发。<br><br>缓存：HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存localStorage。<br><br>渲染：JS/CSS优化，加载顺序，服务端渲染，pipeline。</p><h3 id="GET和POST的区别">GET和POST的区别</h3><p>get参数通过url传递，post放在request body中。<br>get请求在url中传递的参数是有长度限制的，而post没有。<br>get比post更不安全，因为参数直接暴露在url中，所以不能用来传递敏感信息。<br>get请求只能进行url编码，而post支持多种编码方式<br>get请求会浏览器主动cache，而post支持多种编码方式。<br>get请求参数会被完整保留在浏览历史记录里，而post中的参数不会被保留。<br>GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。<br>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><h3 id="浏览器渲染原理？">浏览器渲染原理？</h3><p>1）首先解析收到的文档，根据文档定义构建一棵 DOM 树，DOM 树是由 DOM 元素及属性节点组成的。<br>2）然后对 CSS 进行解析，生成 CSSOM 规则树。<br>（3）根据 DOM 树和 CSSOM 规则树构建渲染树。渲染树的节点被称为渲染对象，渲染对象是一个包含有颜色和大小等属性的矩<br>形，渲染对象和 DOM 元素相对应，但这种对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。还有一些 DOM<br>元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。<br>（4）当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也<br>可以叫做回流）。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动<br>重排”。<br>（5）布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示在屏幕上，绘制使用 UI 基础组<br>件。</p><h3 id="输入url会发生什么？">输入url会发生什么？</h3><p>DNS解析–TCP连接–发送HTTP请求–服务器处理请求并返回HTTP报文–浏览器解析渲染页面–连接结束</p><p>输入url后，首先需要找到这个url域名的服务器ip,为了寻找这个ip，浏览器首先会寻找缓存，查看缓存中是否有记录，缓存的查找记录为：浏览器缓存-》系统缓存-》路由器缓存，缓存中没有则查找系统的hosts文件中是否有记录，如果没有则查询DNS服务器，得到服务器的ip地址后，浏览器根据这个ip以及相应的端口号，构造一个http请求，这个请求报文会包括这次请求的信息，主要是请求方法，请求说明和请求附带的数据，并将这个http请求封装在一个tcp包中，这个tcp包会依次经过传输层，网络层，数据链路层，物理层到达服务器，服务器解析这个请求来作出响应，返回相应的html给浏览器，因为html是一个树形结构，浏览器根据这个html来构建DOM树，在dom树的构建过程中如果遇到JS脚本和外部JS连接，则会停止构建DOM树来执行和下载相应的代码，这会造成阻塞，这就是为什么推荐JS代码应该放在html代码的后面，之后根据外部央视，内部央视，内联样式构建一个CSS对象模型树CSSOM树，构建完成后和DOM树合并为渲染树，这里主要做的是排除非视觉节点，比如script，meta标签和排除display为none的节点，之后进行布局，布局主要是确定各个元素的位置和尺寸，之后是渲染页面，因为html文件中会含有图片，视频，音频等资源，在解析DOM的过程中，遇到这些都会进行并行下载，浏览器对每个域的并行下载数量有一定的限制，一般是4-6个，当然在这些所有的请求中我们还需要关注的就是缓存，缓存一般通过Cache-Control、Last-Modify、Expires等首部字段控制。 Cache-Control和Expires的区别在于Cache-Control使用相对时间，Expires使用的是基于服务器 端的绝对时间，因为存在时差问题，一般采用Cache-Control，在请求这些有设置了缓存的数据时，会先 查看是否过期，如果没有过期则直接使用本地缓存，过期则请求并在服务器校验文件是否修改，如果上一次 响应设置了ETag值会在这次请求的时候作为If-None-Match的值交给服务器校验，如果一致，继续校验 Last-Modified，没有设置ETag则直接验证Last-Modified，再决定是否返回304</p><h3 id="描述一下XSS和CRSF攻击？防御方法？">描述一下XSS和CRSF攻击？防御方法？</h3><p>XSS, 即为（Cross Site Scripting）, 中文名为跨站脚本, 是发生在目标用户的浏览器层面上的，当渲染DOM树的过程成发生了不在预期内执行的JS代码时，就发生了XSS攻击。大多数XSS攻击的主要方式是嵌入一段远程或者第三方域上的JS代码。实际上是在目标网站的作用域下执行了这段js代码。<br>CSRF（Cross Site Request Forgery，跨站请求伪造），字面理解意思就是在别的站点伪造了一个请求。专业术语来说就是在受害者访问一个网站时，其 Cookie 还没有过期的情况下，攻击者伪造一个链接地址发送受害者并欺骗让其点击，从而形成 CSRF 攻击。</p><p>XSS防御的总体思路是：对输入(和URL参数)进行过滤，对输出进行编码。也就是对提交的所有内容进行过滤，对url中的参数进行过滤，过滤掉会导致脚本执行的相关内容；然后对动态输出到页面的内容进行html编码，使脚本无法在浏览器中执行。虽然对输入过滤可以被绕过，但是也还是会拦截很大一部分的XSS攻击。</p><p>防御CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;HTML篇&lt;/h1&gt;
&lt;h3 id=&quot;语义化&quot;&gt;语义化&lt;/h3&gt;
&lt;p&gt;HTML5语义化标签是指正确的标签包含了正确的内容，结构良好，便于阅读，比如nav表示导航条，类似的还有article、header、footer等等标签。&lt;/p&gt;
&lt;h3 id=&quot;移动设备忽略将页面中的数字识别为电话号码的方法&quot;&gt;移动设备忽略将页面中的数字识别为电话号码的方法&lt;/h3&gt;
&lt;p&gt;如果忽略页面中的数字识别为电话号码, 只要把这个默认行为关闭就行，只要一行代码:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta name = &lt;span class=&quot;string&quot;&gt;&quot;format-detection&quot;&lt;/span&gt; content = &lt;span class=&quot;string&quot;&gt;&quot;telephone=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;http-vs-https&quot;&gt;http vs https :&lt;/h3&gt;
&lt;p&gt;定义：&lt;br&gt;
http: 超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。&lt;br&gt;
https: 是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。&lt;br&gt;
区别：&lt;br&gt;
Https协议需要ca证书，费用较高。&lt;br&gt;
http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。&lt;br&gt;
使用不同的链接方式，端口也不同，一般而言，http协议的端口为80，https的端口为443&lt;br&gt;
http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。&lt;/p&gt;
&lt;h3 id=&quot;websocket&quot;&gt;websocket&lt;/h3&gt;
&lt;p&gt;WebSocket是HTML5中的协议，支持持久连续，http协议不支持持久性连接。Http1.0和HTTP1.1都不支持持久性的链接，HTTP1.1中的keep-alive，将多个http请求合并为1个&lt;/p&gt;
&lt;h3 id=&quot;Cookie、sessionStorage、localStorage的区别&quot;&gt;Cookie、sessionStorage、localStorage的区别&lt;/h3&gt;
&lt;p&gt;共同点：都是保存在浏览器端，并且是同源的&lt;br&gt;
cookie数据始终在同源的http请求中携带(即使不需要)，即cookie在浏览器和服务器间来回传递&lt;br&gt;
cookie数据还有路径（path）的概念，可以限制。cookie只属于某个路径下&lt;br&gt;
存储大小限制也不同–cookie数据不能超过4K，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如回话标识。&lt;br&gt;
webStorage虽然也有存储大小的限制，但是比cookie大得多，可以达到5M或更大&lt;br&gt;
数据的有效期不同 --sessionStorage：仅在当前的浏览器窗口关闭有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前一直有效，即使窗口和浏览器关闭&lt;br&gt;
作用域不同–sessionStorage：不在不同的浏览器窗口中共享，即使是同一个页面；localStorage：在所有同源窗口都是共享的；cookie：也是在所有同源窗口中共享的&lt;/p&gt;
    
    </summary>
    
      <category term="Interview" scheme="WangHngLeee.github.io/categories/Interview/"/>
    
      <category term="HTML" scheme="WangHngLeee.github.io/categories/Interview/HTML/"/>
    
    
      <category term="Front-end" scheme="WangHngLeee.github.io/tags/Front-end/"/>
    
      <category term="Interview Questions" scheme="WangHngLeee.github.io/tags/Interview-Questions/"/>
    
  </entry>
  
</feed>
